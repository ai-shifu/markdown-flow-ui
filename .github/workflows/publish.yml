name: Publish Package and Create Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run format check
        run: npm run format:check

      - name: Run tests
        run: npm test || true # Tests are optional for now

      - name: Build Storybook
        run: npm run build-storybook

  release:
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g commitizen cz-conventional-changelog

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version automatically
        id: bump-version
        run: |
          set -euo pipefail

          echo "üîç Checking for conventional commits that warrant version bump..."
          echo "üìä Current git status:"
          git status --porcelain

          echo "üè∑Ô∏è Current tags:"
          git tag -l --sort=-version:refname | head -5

          echo "üìù Recent commits:"
          git log --oneline -5

          # Try commitizen dry-run with improved error handling
          echo "üß™ Running commitizen dry-run..."
          if DRY_RUN_OUTPUT=$(cz bump --dry-run 2>&1); then
            echo "‚úÖ Commitizen dry-run successful"
            echo "$DRY_RUN_OUTPUT"
            DRY_RUN_EXIT=0
          else
            DRY_RUN_EXIT=$?
            echo "‚ö†Ô∏è Commitizen dry-run failed with exit code: $DRY_RUN_EXIT" >&2
            DRY_RUN_OUTPUT=$(cz bump --dry-run 2>&1 || true)
            echo "$DRY_RUN_OUTPUT"
          fi

          # More robust version detection
          if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version" || echo "$DRY_RUN_OUTPUT" | grep -qE "tag to create.*v[0-9]"; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version bump detected based on conventional commits"

            # Enhanced version extraction with multiple fallback methods
            NEW_VERSION=""

            # Method 1: Extract from "bump: version" line
            if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version"; then
              NEW_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep "bump: version" | sed -n 's/.*‚Üí \(.*\)/\1/p' | head -1)
            fi

            # Method 2: Extract from "tag to create" line if method 1 fails
            if [ -z "$NEW_VERSION" ] && echo "$DRY_RUN_OUTPUT" | grep -qE "tag to create.*v[0-9]"; then
              NEW_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            fi

            # Method 3: Fallback to commitizen info if still empty
            if [ -z "$NEW_VERSION" ]; then
              echo "‚ö†Ô∏è Could not extract version from dry-run, trying commitizen info..." >&2
              CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "1.0.0")
              NEW_VERSION="v$(echo "$CURRENT_VERSION" | awk -F. '{print $1"."$2"."$3+1}')"
              echo "üìù Fallback version calculated: $NEW_VERSION"
            fi

            if [ -z "$NEW_VERSION" ]; then
              echo "‚ùå Failed to determine new version" >&2
              exit 1
            fi

            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üéØ New version will be: $NEW_VERSION"

            # Generate changelog with better error handling
            echo "üìù Generating changelog content..."
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            CHANGELOG_CONTENT=""

            if [ -n "$LAST_TAG" ]; then
              if CHANGELOG_CONTENT=$(cz changelog --start-rev="$LAST_TAG" --unreleased-version="$NEW_VERSION" --dry-run 2>/dev/null); then
                echo "‚úÖ Changelog generated successfully"
              else
                echo "‚ö†Ô∏è Changelog generation failed, using fallback" >&2
                CHANGELOG_CONTENT="## What's Changed\n\nThis release includes improvements and bug fixes since $LAST_TAG."
              fi
            else
              echo "üìù No previous tags found, generating initial changelog"
              CHANGELOG_CONTENT="## What's Changed\n\nüéâ Initial release of markdown-flow-ui library with comprehensive features for markdown rendering."
            fi

            {
              echo "changelog_content<<EOF"
              echo -e "$CHANGELOG_CONTENT"
              echo "EOF"
            } >> $GITHUB_OUTPUT

            # Create git tag with improved error handling
            echo "üè∑Ô∏è Creating git tag..."
            TAG_CREATED=false

            if cz bump --yes 2>/dev/null; then
              echo "‚úÖ Commitizen tag created successfully"
              TAG_CREATED=true
            else
              echo "‚ö†Ô∏è Commitizen bump failed, attempting manual tag creation..." >&2

              # Check if tag already exists
              if git tag -l | grep -q "^$NEW_VERSION$"; then
                echo "‚ö†Ô∏è Tag $NEW_VERSION already exists, skipping creation"
                TAG_CREATED=true
              else
                PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo '1.0.0')
                if git tag "$NEW_VERSION" -m "bump: version $PREV_TAG ‚Üí $NEW_VERSION" 2>/dev/null; then
                  echo "‚úÖ Manual tag created: $NEW_VERSION"
                  TAG_CREATED=true
                else
                  echo "‚ùå Failed to create tag $NEW_VERSION" >&2
                  exit 1
                fi
              fi
            fi

            # Push tags with retry mechanism
            if [ "$TAG_CREATED" = true ]; then
              echo "üöÄ Pushing tags to remote..."
              for i in {1..3}; do
                if git push origin --follow-tags; then
                  echo "‚úÖ Tags pushed successfully"
                  break
                else
                  echo "‚ö†Ô∏è Push attempt $i failed, retrying..." >&2
                  sleep $((i * 2))
                  if [ $i -eq 3 ]; then
                    echo "‚ùå Failed to push tags after 3 attempts" >&2
                    exit 1
                  fi
                fi
              done
            fi
          else
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No version bump needed based on commit messages"
          fi

      - name: Get version
        id: version
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          VERSION=$(echo "${{ steps.bump-version.outputs.new_version }}" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: npm run build

      - name: Check if version exists on npm
        id: check_version
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if npm view $PACKAGE_NAME@${{ steps.version.outputs.version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.version }} does not exist on npm"
          fi

      - name: Publish to npm
        if: steps.bump-version.outputs.bump_needed == 'true' && steps.check_version.outputs.exists == 'false'
        run: |
          # Update package.json version for npm publish
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish if version exists
        if: steps.bump-version.outputs.bump_needed == 'true' && steps.check_version.outputs.exists == 'true'
        run: echo "Skipping npm publish - version ${{ steps.version.outputs.version }} already exists"

      - name: Create GitHub Release
        if: steps.bump-version.outputs.bump_needed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ${{ steps.bump-version.outputs.changelog_content }}

            ## üì¶ Package Information
            - **Package**: [markdown-flow-ui](https://www.npmjs.com/package/markdown-flow-ui)
            - **Version**: ${{ steps.version.outputs.version }}
            - **Installation**: `npm install markdown-flow-ui@${{ steps.version.outputs.version }}`

            ## üîó Links
            - [NPM Package](https://www.npmjs.com/package/markdown-flow-ui/v/${{ steps.version.outputs.version }})
            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false
