name: Publish Package and Create Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run format check
        run: npm run format:check

      - name: Run tests
        run: npm test || true # Tests are optional for now

      - name: Build Storybook
        run: npm run build-storybook

  release:
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g commitizen cz-conventional-changelog

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version automatically
        id: bump-version
        run: |
          echo "🔍 Checking for conventional commits that warrant version bump..."
          echo "📊 Current git status:"
          git status --porcelain

          echo "🏷️ Current tags:"
          git tag -l --sort=-version:refname | head -5

          echo "📝 Recent commits:"
          git log --oneline -5

          # Try commitizen dry-run with error handling
          if DRY_RUN_OUTPUT=$(cz bump --dry-run 2>&1); then
            echo "🧪 Commitizen dry-run output:"
            echo "$DRY_RUN_OUTPUT"
          else
            echo "⚠️ Commitizen dry-run failed, trying alternative detection..."
            DRY_RUN_OUTPUT=$(cz bump --dry-run 2>&1 || true)
            echo "🧪 Commitizen dry-run output (with errors):"
            echo "$DRY_RUN_OUTPUT"
          fi

          if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version"; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "Version bump detected based on conventional commits"

            # Get the new version that commitizen would create
            NEW_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep "bump: version" | sed 's/.*→ //')
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version will be: $NEW_VERSION"

            # Generate changelog content from last tag to current commits (incremental only)
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG_CONTENT=$(cz changelog --start-rev=$LAST_TAG --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## What's Changed\n\nThis release includes improvements and bug fixes.")
            else
              CHANGELOG_CONTENT=$(cz changelog --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## What's Changed\n\nInitial release of markdown-flow-ui library.")
            fi
            echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Create ONLY git tag - no package.json modification needed
            echo "Creating git tag..."
            if ! cz bump --yes; then
              echo "⚠️ Commitizen bump failed, trying manual tag creation..."
              if git tag -l | grep -q "^v$NEW_VERSION$"; then
                echo "⚠️ Tag v$NEW_VERSION already exists, skipping tag creation"
              else
                git tag "v$NEW_VERSION" -m "bump: version $(git describe --tags --abbrev=0 2>/dev/null || echo '1.0.0') → $NEW_VERSION"
                echo "✅ Manual tag created: v$NEW_VERSION"
              fi
            else
              echo "✅ Commitizen tag created successfully"
            fi

            # Push the tag
            git push origin --follow-tags
          else
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "No version bump needed based on commit messages"
          fi

      - name: Get version
        id: version
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          VERSION=$(echo "${{ steps.bump-version.outputs.new_version }}" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: npm run build

      - name: Check if version exists on npm
        id: check_version
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if npm view $PACKAGE_NAME@${{ steps.version.outputs.version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.version }} does not exist on npm"
          fi

      - name: Publish to npm
        if: steps.bump-version.outputs.bump_needed == 'true' && steps.check_version.outputs.exists == 'false'
        run: |
          # Update package.json version for npm publish
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish if version exists
        if: steps.bump-version.outputs.bump_needed == 'true' && steps.check_version.outputs.exists == 'true'
        run: echo "Skipping npm publish - version ${{ steps.version.outputs.version }} already exists"

      - name: Create GitHub Release
        if: steps.bump-version.outputs.bump_needed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ${{ steps.bump-version.outputs.changelog_content }}

            ## 📦 Package Information
            - **Package**: [markdown-flow-ui](https://www.npmjs.com/package/markdown-flow-ui)
            - **Version**: ${{ steps.version.outputs.version }}
            - **Installation**: `npm install markdown-flow-ui@${{ steps.version.outputs.version }}`

            ## 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/markdown-flow-ui/v/${{ steps.version.outputs.version }})
            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false