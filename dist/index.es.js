import * as It from "react";
import ch, { useState as He, useRef as ft, useCallback as Kt, useEffect as dt, forwardRef as uh, createElement as Mc, useLayoutEffect as lS, useImperativeHandle as cS } from "react";
function hh(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var bo = { exports: {} }, Yr = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var zf;
function uS() {
  if (zf) return Yr;
  zf = 1;
  var n = Symbol.for("react.transitional.element"), e = Symbol.for("react.fragment");
  function t(i, r, s) {
    var o = null;
    if (s !== void 0 && (o = "" + s), r.key !== void 0 && (o = "" + r.key), "key" in r) {
      s = {};
      for (var a in r)
        a !== "key" && (s[a] = r[a]);
    } else s = r;
    return r = s.ref, {
      $$typeof: n,
      type: i,
      key: o,
      ref: r !== void 0 ? r : null,
      props: s
    };
  }
  return Yr.Fragment = e, Yr.jsx = t, Yr.jsxs = t, Yr;
}
var Fr = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Zf;
function hS() {
  return Zf || (Zf = 1, process.env.NODE_ENV !== "production" && function() {
    function n(b) {
      if (b == null) return null;
      if (typeof b == "function")
        return b.$$typeof === Q ? null : b.displayName || b.name || null;
      if (typeof b == "string") return b;
      switch (b) {
        case m:
          return "Fragment";
        case g:
          return "Profiler";
        case O:
          return "StrictMode";
        case v:
          return "Suspense";
        case x:
          return "SuspenseList";
        case A:
          return "Activity";
      }
      if (typeof b == "object")
        switch (typeof b.tag == "number" && console.error(
          "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
        ), b.$$typeof) {
          case p:
            return "Portal";
          case S:
            return (b.displayName || "Context") + ".Provider";
          case y:
            return (b._context.displayName || "Context") + ".Consumer";
          case _:
            var Z = b.render;
            return b = b.displayName, b || (b = Z.displayName || Z.name || "", b = b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef"), b;
          case C:
            return Z = b.displayName || null, Z !== null ? Z : n(b.type) || "Memo";
          case T:
            Z = b._payload, b = b._init;
            try {
              return n(b(Z));
            } catch {
            }
        }
      return null;
    }
    function e(b) {
      return "" + b;
    }
    function t(b) {
      try {
        e(b);
        var Z = !1;
      } catch {
        Z = !0;
      }
      if (Z) {
        Z = console;
        var j = Z.error, w = typeof Symbol == "function" && Symbol.toStringTag && b[Symbol.toStringTag] || b.constructor.name || "Object";
        return j.call(
          Z,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          w
        ), e(b);
      }
    }
    function i(b) {
      if (b === m) return "<>";
      if (typeof b == "object" && b !== null && b.$$typeof === T)
        return "<...>";
      try {
        var Z = n(b);
        return Z ? "<" + Z + ">" : "<...>";
      } catch {
        return "<...>";
      }
    }
    function r() {
      var b = M.A;
      return b === null ? null : b.getOwner();
    }
    function s() {
      return Error("react-stack-top-frame");
    }
    function o(b) {
      if (R.call(b, "key")) {
        var Z = Object.getOwnPropertyDescriptor(b, "key").get;
        if (Z && Z.isReactWarning) return !1;
      }
      return b.key !== void 0;
    }
    function a(b, Z) {
      function j() {
        $ || ($ = !0, console.error(
          "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
          Z
        ));
      }
      j.isReactWarning = !0, Object.defineProperty(b, "key", {
        get: j,
        configurable: !0
      });
    }
    function l() {
      var b = n(this.type);
      return Y[b] || (Y[b] = !0, console.error(
        "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
      )), b = this.props.ref, b !== void 0 ? b : null;
    }
    function c(b, Z, j, w, he, ve, Ee, _e) {
      return j = ve.ref, b = {
        $$typeof: d,
        type: b,
        key: Z,
        props: ve,
        _owner: he
      }, (j !== void 0 ? j : null) !== null ? Object.defineProperty(b, "ref", {
        enumerable: !1,
        get: l
      }) : Object.defineProperty(b, "ref", { enumerable: !1, value: null }), b._store = {}, Object.defineProperty(b._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      }), Object.defineProperty(b, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      }), Object.defineProperty(b, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: Ee
      }), Object.defineProperty(b, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: _e
      }), Object.freeze && (Object.freeze(b.props), Object.freeze(b)), b;
    }
    function u(b, Z, j, w, he, ve, Ee, _e) {
      var Ae = Z.children;
      if (Ae !== void 0)
        if (w)
          if (L(Ae)) {
            for (w = 0; w < Ae.length; w++)
              h(Ae[w]);
            Object.freeze && Object.freeze(Ae);
          } else
            console.error(
              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
            );
        else h(Ae);
      if (R.call(Z, "key")) {
        Ae = n(b);
        var Ke = Object.keys(Z).filter(function(Rt) {
          return Rt !== "key";
        });
        w = 0 < Ke.length ? "{key: someKey, " + Ke.join(": ..., ") + ": ...}" : "{key: someKey}", ee[Ae + w] || (Ke = 0 < Ke.length ? "{" + Ke.join(": ..., ") + ": ...}" : "{}", console.error(
          `A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,
          w,
          Ae,
          Ke,
          Ae
        ), ee[Ae + w] = !0);
      }
      if (Ae = null, j !== void 0 && (t(j), Ae = "" + j), o(Z) && (t(Z.key), Ae = "" + Z.key), "key" in Z) {
        j = {};
        for (var je in Z)
          je !== "key" && (j[je] = Z[je]);
      } else j = Z;
      return Ae && a(
        j,
        typeof b == "function" ? b.displayName || b.name || "Unknown" : b
      ), c(
        b,
        Ae,
        ve,
        he,
        r(),
        j,
        Ee,
        _e
      );
    }
    function h(b) {
      typeof b == "object" && b !== null && b.$$typeof === d && b._store && (b._store.validated = 1);
    }
    var f = ch, d = Symbol.for("react.transitional.element"), p = Symbol.for("react.portal"), m = Symbol.for("react.fragment"), O = Symbol.for("react.strict_mode"), g = Symbol.for("react.profiler"), y = Symbol.for("react.consumer"), S = Symbol.for("react.context"), _ = Symbol.for("react.forward_ref"), v = Symbol.for("react.suspense"), x = Symbol.for("react.suspense_list"), C = Symbol.for("react.memo"), T = Symbol.for("react.lazy"), A = Symbol.for("react.activity"), Q = Symbol.for("react.client.reference"), M = f.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, R = Object.prototype.hasOwnProperty, L = Array.isArray, P = console.createTask ? console.createTask : function() {
      return null;
    };
    f = {
      "react-stack-bottom-frame": function(b) {
        return b();
      }
    };
    var $, Y = {}, ie = f["react-stack-bottom-frame"].bind(
      f,
      s
    )(), D = P(i(s)), ee = {};
    Fr.Fragment = m, Fr.jsx = function(b, Z, j, w, he) {
      var ve = 1e4 > M.recentlyCreatedOwnerStacks++;
      return u(
        b,
        Z,
        j,
        !1,
        w,
        he,
        ve ? Error("react-stack-top-frame") : ie,
        ve ? P(i(b)) : D
      );
    }, Fr.jsxs = function(b, Z, j, w, he) {
      var ve = 1e4 > M.recentlyCreatedOwnerStacks++;
      return u(
        b,
        Z,
        j,
        !0,
        w,
        he,
        ve ? Error("react-stack-top-frame") : ie,
        ve ? P(i(b)) : D
      );
    };
  }()), Fr;
}
var Xf;
function fS() {
  return Xf || (Xf = 1, process.env.NODE_ENV === "production" ? bo.exports = uS() : bo.exports = hS()), bo.exports;
}
var ce = fS();
async function dS(n, e) {
  const t = n.getReader();
  let i;
  for (; !(i = await t.read()).done; )
    e(i.value);
}
function pS(n) {
  let e, t, i, r = !1;
  return function(o) {
    e === void 0 ? (e = o, t = 0, i = -1) : e = gS(e, o);
    const a = e.length;
    let l = 0;
    for (; t < a; ) {
      r && (e[t] === 10 && (l = ++t), r = !1);
      let c = -1;
      for (; t < a && c === -1; ++t)
        switch (e[t]) {
          case 58:
            i === -1 && (i = t - l);
            break;
          case 13:
            r = !0;
          case 10:
            c = t;
            break;
        }
      if (c === -1)
        break;
      n(e.subarray(l, c), i), l = t, i = -1;
    }
    l === a ? e = void 0 : l !== 0 && (e = e.subarray(l), t -= l);
  };
}
function mS(n, e, t) {
  let i = qf();
  const r = new TextDecoder();
  return function(o, a) {
    if (o.length === 0)
      t?.(i), i = qf();
    else if (a > 0) {
      const l = r.decode(o.subarray(0, a)), c = a + (o[a + 1] === 32 ? 2 : 1), u = r.decode(o.subarray(c));
      switch (l) {
        case "data":
          i.data = i.data ? i.data + `
` + u : u;
          break;
        case "event":
          i.event = u;
          break;
        case "id":
          n(i.id = u);
          break;
        case "retry":
          const h = parseInt(u, 10);
          isNaN(h) || e(i.retry = h);
          break;
      }
    }
  };
}
function gS(n, e) {
  const t = new Uint8Array(n.length + e.length);
  return t.set(n), t.set(e, n.length), t;
}
function qf() {
  return {
    data: "",
    event: "",
    id: "",
    retry: void 0
  };
}
var OS = function(n, e) {
  var t = {};
  for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var r = 0, i = Object.getOwnPropertySymbols(n); r < i.length; r++)
      e.indexOf(i[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[r]) && (t[i[r]] = n[i[r]]);
  return t;
};
const Nc = "text/event-stream", bS = 1e3, Vf = "last-event-id";
function yS(n, e) {
  var { signal: t, headers: i, onopen: r, onmessage: s, onclose: o, onerror: a, openWhenHidden: l, fetch: c } = e, u = OS(e, ["signal", "headers", "onopen", "onmessage", "onclose", "onerror", "openWhenHidden", "fetch"]);
  return new Promise((h, f) => {
    const d = Object.assign({}, i);
    d.accept || (d.accept = Nc);
    let p;
    function m() {
      p.abort(), document.hidden || v();
    }
    l || document.addEventListener("visibilitychange", m);
    let O = bS, g = 0;
    function y() {
      document.removeEventListener("visibilitychange", m), window.clearTimeout(g), p.abort();
    }
    t?.addEventListener("abort", () => {
      y(), h();
    });
    const S = c ?? window.fetch, _ = r ?? xS;
    async function v() {
      var x;
      p = new AbortController();
      try {
        const C = await S(n, Object.assign(Object.assign({}, u), { headers: d, signal: p.signal }));
        await _(C), await dS(C.body, pS(mS((T) => {
          T ? d[Vf] = T : delete d[Vf];
        }, (T) => {
          O = T;
        }, s))), o?.(), y(), h();
      } catch (C) {
        if (!p.signal.aborted)
          try {
            const T = (x = a?.(C)) !== null && x !== void 0 ? x : O;
            window.clearTimeout(g), g = window.setTimeout(v, T);
          } catch (T) {
            y(), f(T);
          }
      }
    }
    v();
  });
}
function xS(n) {
  const e = n.headers.get("content-type");
  if (!e?.startsWith(Nc))
    throw new Error(`Expected content-type to be ${Nc}, Actual: ${e}`);
}
const kS = "[DONE]", SS = (n, e = {}) => {
  const [t, i] = He(null), [r, s] = He(!1), [o, a] = He(null), [l, c] = He(null), u = ft(null), h = ft(!1), f = ft(!0), d = ft(!1), p = ft(-1), m = ft(""), { autoConnect: O = !0 } = e, g = Kt(async () => {
    if (!(h.current || !f.current || d.current))
      try {
        s(!0), a(null), d.current = !1, h.current = !0;
        const S = ++p.current;
        c(S), m.current = "";
        const _ = new AbortController();
        u.current = _, await yS(n, {
          ...e,
          method: "POST",
          headers: {
            Accept: "text/event-stream",
            "Content-Type": "application/json",
            "Cache-Control": "no-cache",
            ...Object.entries(e.headers || {}).reduce(
              (v, [x, C]) => (v[x] = String(C), v),
              {}
            )
          },
          signal: _.signal,
          openWhenHidden: !0,
          onopen: async (v) => {
            f.current && !d.current && (s(!1), a(null));
          },
          onmessage: (v) => {
            if (f.current && !d.current) {
              if (v.data.toUpperCase() === kS) {
                e.onFinish?.(m.current, S), y();
                return;
              }
              try {
                let x = v.data;
                m.current += x, i(m.current);
              } catch {
              }
            }
          },
          onclose: () => {
            f.current && !d.current && s(!1);
          },
          onerror: (v) => {
            f.current && !d.current && (a(v), s(!1));
          }
        });
      } catch (S) {
        f.current && !d.current && (a(S), s(!1));
      }
  }, [n, JSON.stringify(e)]), y = Kt(() => {
    d.current = !0, u.current && (u.current.abort(), u.current = null), h.current = !1, f.current && s(!1);
  }, []);
  return dt(() => {
    if (f.current = !0, d.current = !1, h.current = !1, O) {
      const S = setTimeout(() => {
        h.current || g();
      }, 100);
      return () => {
        f.current = !1, d.current = !0, clearTimeout(S), y();
      };
    } else
      return () => {
        f.current = !1, d.current = !0, y();
      };
  }, [g, y, O]), dt(() => {
    if (h.current) {
      y(), h.current = !1, d.current = !1, i(null), a(null), s(!0), m.current = "";
      const S = setTimeout(() => {
        h.current || g();
      }, 100);
      return () => {
        clearTimeout(S);
      };
    }
  }, [n, JSON.stringify(e), g, y]), {
    data: t,
    isLoading: r,
    error: o,
    sseIndex: l,
    connect: g,
    close: y
  };
}, wS = (n) => {
  const [e, t] = He(null), [i, r] = He(!0), [s, o] = He(null);
  return dt(() => {
    n && (async () => {
      try {
        r(!0);
        const l = await fetch("https://play.dev.pillowai.cn/api/v1/playground/markdownflow_info", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ content: n }),
          // Next.js fetch 的缓存选项
          cache: "no-store"
          // 或者使用 next: { revalidate: 0 } 来禁用缓存
        });
        if (!l.ok)
          throw new Error(`HTTP error! status: ${l.status}`);
        const c = await l.json();
        c.code === 200 ? t(c.data) : o(c.message || "请求失败");
      } catch (l) {
        o(l.message || "网络错误");
      } finally {
        r(!1);
      }
    })();
  }, [n]), { data: e, loading: i, error: s };
};
function vS(n, e) {
  const t = {};
  return (n[n.length - 1] === "" ? [...n, ""] : n).join(
    (t.padRight ? " " : "") + "," + (t.padLeft === !1 ? "" : " ")
  ).trim();
}
const ES = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u, _S = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u, QS = {};
function Yf(n, e) {
  return (QS.jsx ? _S : ES).test(n);
}
const CS = /[ \t\n\f\r]/g;
function TS(n) {
  return typeof n == "object" ? n.type === "text" ? Ff(n.value) : !1 : Ff(n);
}
function Ff(n) {
  return n.replace(CS, "") === "";
}
let Ws = class {
  /**
   * @param {SchemaType['property']} property
   *   Property.
   * @param {SchemaType['normal']} normal
   *   Normal.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Schema.
   */
  constructor(e, t, i) {
    this.normal = t, this.property = e, i && (this.space = i);
  }
};
Ws.prototype.normal = {};
Ws.prototype.property = {};
Ws.prototype.space = void 0;
function Zg(n, e) {
  const t = {}, i = {};
  for (const r of n)
    Object.assign(t, r.property), Object.assign(i, r.normal);
  return new Ws(t, i, e);
}
function Ic(n) {
  return n.toLowerCase();
}
class Xt {
  /**
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @returns
   *   Info.
   */
  constructor(e, t) {
    this.attribute = t, this.property = e;
  }
}
Xt.prototype.attribute = "";
Xt.prototype.booleanish = !1;
Xt.prototype.boolean = !1;
Xt.prototype.commaOrSpaceSeparated = !1;
Xt.prototype.commaSeparated = !1;
Xt.prototype.defined = !1;
Xt.prototype.mustUseProperty = !1;
Xt.prototype.number = !1;
Xt.prototype.overloadedBoolean = !1;
Xt.prototype.property = "";
Xt.prototype.spaceSeparated = !1;
Xt.prototype.space = void 0;
let PS = 0;
const be = qi(), rt = qi(), Lc = qi(), z = qi(), Ve = qi(), ar = qi(), Wt = qi();
function qi() {
  return 2 ** ++PS;
}
const Dc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  boolean: be,
  booleanish: rt,
  commaOrSpaceSeparated: Wt,
  commaSeparated: ar,
  number: z,
  overloadedBoolean: Lc,
  spaceSeparated: Ve
}, Symbol.toStringTag, { value: "Module" })), El = (
  /** @type {ReadonlyArray<keyof typeof types>} */
  Object.keys(Dc)
);
class fh extends Xt {
  /**
   * @constructor
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @param {number | null | undefined} [mask]
   *   Mask.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Info.
   */
  constructor(e, t, i, r) {
    let s = -1;
    if (super(e, t), Uf(this, "space", r), typeof i == "number")
      for (; ++s < El.length; ) {
        const o = El[s];
        Uf(this, El[s], (i & Dc[o]) === Dc[o]);
      }
  }
}
fh.prototype.defined = !0;
function Uf(n, e, t) {
  t && (n[e] = t);
}
function Cr(n) {
  const e = {}, t = {};
  for (const [i, r] of Object.entries(n.properties)) {
    const s = new fh(
      i,
      n.transform(n.attributes || {}, i),
      r,
      n.space
    );
    n.mustUseProperty && n.mustUseProperty.includes(i) && (s.mustUseProperty = !0), e[i] = s, t[Ic(i)] = i, t[Ic(s.attribute)] = i;
  }
  return new Ws(e, t, n.space);
}
const Xg = Cr({
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: rt,
    ariaAutoComplete: null,
    ariaBusy: rt,
    ariaChecked: rt,
    ariaColCount: z,
    ariaColIndex: z,
    ariaColSpan: z,
    ariaControls: Ve,
    ariaCurrent: null,
    ariaDescribedBy: Ve,
    ariaDetails: null,
    ariaDisabled: rt,
    ariaDropEffect: Ve,
    ariaErrorMessage: null,
    ariaExpanded: rt,
    ariaFlowTo: Ve,
    ariaGrabbed: rt,
    ariaHasPopup: null,
    ariaHidden: rt,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: Ve,
    ariaLevel: z,
    ariaLive: null,
    ariaModal: rt,
    ariaMultiLine: rt,
    ariaMultiSelectable: rt,
    ariaOrientation: null,
    ariaOwns: Ve,
    ariaPlaceholder: null,
    ariaPosInSet: z,
    ariaPressed: rt,
    ariaReadOnly: rt,
    ariaRelevant: null,
    ariaRequired: rt,
    ariaRoleDescription: Ve,
    ariaRowCount: z,
    ariaRowIndex: z,
    ariaRowSpan: z,
    ariaSelected: rt,
    ariaSetSize: z,
    ariaSort: null,
    ariaValueMax: z,
    ariaValueMin: z,
    ariaValueNow: z,
    ariaValueText: null,
    role: null
  },
  transform(n, e) {
    return e === "role" ? e : "aria-" + e.slice(4).toLowerCase();
  }
});
function qg(n, e) {
  return e in n ? n[e] : e;
}
function Vg(n, e) {
  return qg(n, e.toLowerCase());
}
const AS = Cr({
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: ar,
    acceptCharset: Ve,
    accessKey: Ve,
    action: null,
    allow: null,
    allowFullScreen: be,
    allowPaymentRequest: be,
    allowUserMedia: be,
    alt: null,
    as: null,
    async: be,
    autoCapitalize: null,
    autoComplete: Ve,
    autoFocus: be,
    autoPlay: be,
    blocking: Ve,
    capture: null,
    charSet: null,
    checked: be,
    cite: null,
    className: Ve,
    cols: z,
    colSpan: null,
    content: null,
    contentEditable: rt,
    controls: be,
    controlsList: Ve,
    coords: z | ar,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: be,
    defer: be,
    dir: null,
    dirName: null,
    disabled: be,
    download: Lc,
    draggable: rt,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: be,
    formTarget: null,
    headers: Ve,
    height: z,
    hidden: Lc,
    high: z,
    href: null,
    hrefLang: null,
    htmlFor: Ve,
    httpEquiv: Ve,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: be,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: be,
    itemId: null,
    itemProp: Ve,
    itemRef: Ve,
    itemScope: be,
    itemType: Ve,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: be,
    low: z,
    manifest: null,
    max: null,
    maxLength: z,
    media: null,
    method: null,
    min: null,
    minLength: z,
    multiple: be,
    muted: be,
    name: null,
    nonce: null,
    noModule: be,
    noValidate: be,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: be,
    optimum: z,
    pattern: null,
    ping: Ve,
    placeholder: null,
    playsInline: be,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: be,
    referrerPolicy: null,
    rel: Ve,
    required: be,
    reversed: be,
    rows: z,
    rowSpan: z,
    sandbox: Ve,
    scope: null,
    scoped: be,
    seamless: be,
    selected: be,
    shadowRootClonable: be,
    shadowRootDelegatesFocus: be,
    shadowRootMode: null,
    shape: null,
    size: z,
    sizes: null,
    slot: null,
    span: z,
    spellCheck: rt,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: z,
    step: null,
    style: null,
    tabIndex: z,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: be,
    useMap: null,
    value: rt,
    width: z,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: Ve,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: z,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: z,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: be,
    // Lists. Use CSS to reduce space between items instead
    declare: be,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: z,
    // `<img>` and `<object>`
    leftMargin: z,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: z,
    // `<body>`
    marginWidth: z,
    // `<body>`
    noResize: be,
    // `<frame>`
    noHref: be,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: be,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: be,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: z,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: rt,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: z,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: z,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: be,
    disableRemotePlayback: be,
    prefix: null,
    property: null,
    results: z,
    security: null,
    unselectable: null
  },
  space: "html",
  transform: Vg
}), $S = Cr({
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  properties: {
    about: Wt,
    accentHeight: z,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: z,
    amplitude: z,
    arabicForm: null,
    ascent: z,
    attributeName: null,
    attributeType: null,
    azimuth: z,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: z,
    by: null,
    calcMode: null,
    capHeight: z,
    className: Ve,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: z,
    diffuseConstant: z,
    direction: null,
    display: null,
    dur: null,
    divisor: z,
    dominantBaseline: null,
    download: be,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: z,
    enableBackground: null,
    end: null,
    event: null,
    exponent: z,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: z,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: ar,
    g2: ar,
    glyphName: ar,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: z,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: z,
    horizOriginX: z,
    horizOriginY: z,
    id: null,
    ideographic: z,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: z,
    k: z,
    k1: z,
    k2: z,
    k3: z,
    k4: z,
    kernelMatrix: Wt,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: z,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: z,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: z,
    overlineThickness: z,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: z,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: Ve,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: z,
    pointsAtY: z,
    pointsAtZ: z,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: Wt,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: Wt,
    rev: Wt,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: Wt,
    requiredFeatures: Wt,
    requiredFonts: Wt,
    requiredFormats: Wt,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: z,
    specularExponent: z,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: z,
    strikethroughThickness: z,
    string: null,
    stroke: null,
    strokeDashArray: Wt,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: z,
    strokeOpacity: z,
    strokeWidth: null,
    style: null,
    surfaceScale: z,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: Wt,
    tabIndex: z,
    tableValues: null,
    target: null,
    targetX: z,
    targetY: z,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: Wt,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: z,
    underlineThickness: z,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: z,
    values: null,
    vAlphabetic: z,
    vMathematical: z,
    vectorEffect: null,
    vHanging: z,
    vIdeographic: z,
    version: null,
    vertAdvY: z,
    vertOriginX: z,
    vertOriginY: z,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: z,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  },
  space: "svg",
  transform: qg
}), Yg = Cr({
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  },
  space: "xlink",
  transform(n, e) {
    return "xlink:" + e.slice(5).toLowerCase();
  }
}), Fg = Cr({
  attributes: { xmlnsxlink: "xmlns:xlink" },
  properties: { xmlnsXLink: null, xmlns: null },
  space: "xmlns",
  transform: Vg
}), Ug = Cr({
  properties: { xmlBase: null, xmlLang: null, xmlSpace: null },
  space: "xml",
  transform(n, e) {
    return "xml:" + e.slice(3).toLowerCase();
  }
}), RS = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
}, MS = /[A-Z]/g, Gf = /-[a-z]/g, NS = /^data[-\w.:]+$/i;
function IS(n, e) {
  const t = Ic(e);
  let i = e, r = Xt;
  if (t in n.normal)
    return n.property[n.normal[t]];
  if (t.length > 4 && t.slice(0, 4) === "data" && NS.test(e)) {
    if (e.charAt(4) === "-") {
      const s = e.slice(5).replace(Gf, DS);
      i = "data" + s.charAt(0).toUpperCase() + s.slice(1);
    } else {
      const s = e.slice(4);
      if (!Gf.test(s)) {
        let o = s.replace(MS, LS);
        o.charAt(0) !== "-" && (o = "-" + o), e = "data" + o;
      }
    }
    r = fh;
  }
  return new r(i, e);
}
function LS(n) {
  return "-" + n.toLowerCase();
}
function DS(n) {
  return n.charAt(1).toUpperCase();
}
const BS = Zg([Xg, AS, Yg, Fg, Ug], "html"), dh = Zg([Xg, $S, Yg, Fg, Ug], "svg");
function zS(n) {
  return n.join(" ").trim();
}
var Gi = {}, _l, Wf;
function ZS() {
  if (Wf) return _l;
  Wf = 1;
  var n = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, e = /\n/g, t = /^\s*/, i = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/, r = /^:\s*/, s = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/, o = /^[;\s]*/, a = /^\s+|\s+$/g, l = `
`, c = "/", u = "*", h = "", f = "comment", d = "declaration";
  _l = function(m, O) {
    if (typeof m != "string")
      throw new TypeError("First argument must be a string");
    if (!m) return [];
    O = O || {};
    var g = 1, y = 1;
    function S(L) {
      var P = L.match(e);
      P && (g += P.length);
      var $ = L.lastIndexOf(l);
      y = ~$ ? L.length - $ : y + L.length;
    }
    function _() {
      var L = { line: g, column: y };
      return function(P) {
        return P.position = new v(L), T(), P;
      };
    }
    function v(L) {
      this.start = L, this.end = { line: g, column: y }, this.source = O.source;
    }
    v.prototype.content = m;
    function x(L) {
      var P = new Error(
        O.source + ":" + g + ":" + y + ": " + L
      );
      if (P.reason = L, P.filename = O.source, P.line = g, P.column = y, P.source = m, !O.silent) throw P;
    }
    function C(L) {
      var P = L.exec(m);
      if (P) {
        var $ = P[0];
        return S($), m = m.slice($.length), P;
      }
    }
    function T() {
      C(t);
    }
    function A(L) {
      var P;
      for (L = L || []; P = Q(); )
        P !== !1 && L.push(P);
      return L;
    }
    function Q() {
      var L = _();
      if (!(c != m.charAt(0) || u != m.charAt(1))) {
        for (var P = 2; h != m.charAt(P) && (u != m.charAt(P) || c != m.charAt(P + 1)); )
          ++P;
        if (P += 2, h === m.charAt(P - 1))
          return x("End of comment missing");
        var $ = m.slice(2, P - 2);
        return y += 2, S($), m = m.slice(P), y += 2, L({
          type: f,
          comment: $
        });
      }
    }
    function M() {
      var L = _(), P = C(i);
      if (P) {
        if (Q(), !C(r)) return x("property missing ':'");
        var $ = C(s), Y = L({
          type: d,
          property: p(P[0].replace(n, h)),
          value: $ ? p($[0].replace(n, h)) : h
        });
        return C(o), Y;
      }
    }
    function R() {
      var L = [];
      A(L);
      for (var P; P = M(); )
        P !== !1 && (L.push(P), A(L));
      return L;
    }
    return T(), R();
  };
  function p(m) {
    return m ? m.replace(a, h) : h;
  }
  return _l;
}
var jf;
function XS() {
  if (jf) return Gi;
  jf = 1;
  var n = Gi && Gi.__importDefault || function(i) {
    return i && i.__esModule ? i : { default: i };
  };
  Object.defineProperty(Gi, "__esModule", { value: !0 }), Gi.default = t;
  var e = n(ZS());
  function t(i, r) {
    var s = null;
    if (!i || typeof i != "string")
      return s;
    var o = (0, e.default)(i), a = typeof r == "function";
    return o.forEach(function(l) {
      if (l.type === "declaration") {
        var c = l.property, u = l.value;
        a ? r(c, u, l) : u && (s = s || {}, s[c] = u);
      }
    }), s;
  }
  return Gi;
}
var Ur = {}, Hf;
function qS() {
  if (Hf) return Ur;
  Hf = 1, Object.defineProperty(Ur, "__esModule", { value: !0 }), Ur.camelCase = void 0;
  var n = /^--[a-zA-Z0-9_-]+$/, e = /-([a-z])/g, t = /^[^-]+$/, i = /^-(webkit|moz|ms|o|khtml)-/, r = /^-(ms)-/, s = function(c) {
    return !c || t.test(c) || n.test(c);
  }, o = function(c, u) {
    return u.toUpperCase();
  }, a = function(c, u) {
    return "".concat(u, "-");
  }, l = function(c, u) {
    return u === void 0 && (u = {}), s(c) ? c : (c = c.toLowerCase(), u.reactCompat ? c = c.replace(r, a) : c = c.replace(i, a), c.replace(e, o));
  };
  return Ur.camelCase = l, Ur;
}
var Gr, Kf;
function VS() {
  if (Kf) return Gr;
  Kf = 1;
  var n = Gr && Gr.__importDefault || function(r) {
    return r && r.__esModule ? r : { default: r };
  }, e = n(XS()), t = qS();
  function i(r, s) {
    var o = {};
    return !r || typeof r != "string" || (0, e.default)(r, function(a, l) {
      a && l && (o[(0, t.camelCase)(a, s)] = l);
    }), o;
  }
  return i.default = i, Gr = i, Gr;
}
var YS = VS();
const FS = /* @__PURE__ */ hh(YS), Gg = Wg("end"), ph = Wg("start");
function Wg(n) {
  return e;
  function e(t) {
    const i = t && t.position && t.position[n] || {};
    if (typeof i.line == "number" && i.line > 0 && typeof i.column == "number" && i.column > 0)
      return {
        line: i.line,
        column: i.column,
        offset: typeof i.offset == "number" && i.offset > -1 ? i.offset : void 0
      };
  }
}
function US(n) {
  const e = ph(n), t = Gg(n);
  if (e && t)
    return { start: e, end: t };
}
function ds(n) {
  return !n || typeof n != "object" ? "" : "position" in n || "type" in n ? Jf(n.position) : "start" in n || "end" in n ? Jf(n) : "line" in n || "column" in n ? Bc(n) : "";
}
function Bc(n) {
  return ed(n && n.line) + ":" + ed(n && n.column);
}
function Jf(n) {
  return Bc(n && n.start) + "-" + Bc(n && n.end);
}
function ed(n) {
  return n && typeof n == "number" ? n : 1;
}
class _t extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(e, t, i) {
    super(), typeof t == "string" && (i = t, t = void 0);
    let r = "", s = {}, o = !1;
    if (t && ("line" in t && "column" in t ? s = { place: t } : "start" in t && "end" in t ? s = { place: t } : "type" in t ? s = {
      ancestors: [t],
      place: t.position
    } : s = { ...t }), typeof e == "string" ? r = e : !s.cause && e && (o = !0, r = e.message, s.cause = e), !s.ruleId && !s.source && typeof i == "string") {
      const l = i.indexOf(":");
      l === -1 ? s.ruleId = i : (s.source = i.slice(0, l), s.ruleId = i.slice(l + 1));
    }
    if (!s.place && s.ancestors && s.ancestors) {
      const l = s.ancestors[s.ancestors.length - 1];
      l && (s.place = l.position);
    }
    const a = s.place && "start" in s.place ? s.place.start : s.place;
    this.ancestors = s.ancestors || void 0, this.cause = s.cause || void 0, this.column = a ? a.column : void 0, this.fatal = void 0, this.file = "", this.message = r, this.line = a ? a.line : void 0, this.name = ds(s.place) || "1:1", this.place = s.place || void 0, this.reason = this.message, this.ruleId = s.ruleId || void 0, this.source = s.source || void 0, this.stack = o && s.cause && typeof s.cause.stack == "string" ? s.cause.stack : "", this.actual = void 0, this.expected = void 0, this.note = void 0, this.url = void 0;
  }
}
_t.prototype.file = "";
_t.prototype.name = "";
_t.prototype.reason = "";
_t.prototype.message = "";
_t.prototype.stack = "";
_t.prototype.column = void 0;
_t.prototype.line = void 0;
_t.prototype.ancestors = void 0;
_t.prototype.cause = void 0;
_t.prototype.fatal = void 0;
_t.prototype.place = void 0;
_t.prototype.ruleId = void 0;
_t.prototype.source = void 0;
const mh = {}.hasOwnProperty, GS = /* @__PURE__ */ new Map(), WS = /[A-Z]/g, jS = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]), HS = /* @__PURE__ */ new Set(["td", "th"]), jg = "https://github.com/syntax-tree/hast-util-to-jsx-runtime";
function KS(n, e) {
  if (!e || e.Fragment === void 0)
    throw new TypeError("Expected `Fragment` in options");
  const t = e.filePath || void 0;
  let i;
  if (e.development) {
    if (typeof e.jsxDEV != "function")
      throw new TypeError(
        "Expected `jsxDEV` in options when `development: true`"
      );
    i = ow(t, e.jsxDEV);
  } else {
    if (typeof e.jsx != "function")
      throw new TypeError("Expected `jsx` in production options");
    if (typeof e.jsxs != "function")
      throw new TypeError("Expected `jsxs` in production options");
    i = sw(t, e.jsx, e.jsxs);
  }
  const r = {
    Fragment: e.Fragment,
    ancestors: [],
    components: e.components || {},
    create: i,
    elementAttributeNameCase: e.elementAttributeNameCase || "react",
    evaluater: e.createEvaluater ? e.createEvaluater() : void 0,
    filePath: t,
    ignoreInvalidStyle: e.ignoreInvalidStyle || !1,
    passKeys: e.passKeys !== !1,
    passNode: e.passNode || !1,
    schema: e.space === "svg" ? dh : BS,
    stylePropertyNameCase: e.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: e.tableCellAlignToStyle !== !1
  }, s = Hg(r, n, void 0);
  return s && typeof s != "string" ? s : r.create(
    n,
    r.Fragment,
    { children: s || void 0 },
    void 0
  );
}
function Hg(n, e, t) {
  if (e.type === "element")
    return JS(n, e, t);
  if (e.type === "mdxFlowExpression" || e.type === "mdxTextExpression")
    return ew(n, e);
  if (e.type === "mdxJsxFlowElement" || e.type === "mdxJsxTextElement")
    return nw(n, e, t);
  if (e.type === "mdxjsEsm")
    return tw(n, e);
  if (e.type === "root")
    return iw(n, e, t);
  if (e.type === "text")
    return rw(n, e);
}
function JS(n, e, t) {
  const i = n.schema;
  let r = i;
  e.tagName.toLowerCase() === "svg" && i.space === "html" && (r = dh, n.schema = r), n.ancestors.push(e);
  const s = Jg(n, e.tagName, !1), o = aw(n, e);
  let a = Oh(n, e);
  return jS.has(e.tagName) && (a = a.filter(function(l) {
    return typeof l == "string" ? !TS(l) : !0;
  })), Kg(n, o, s, e), gh(o, a), n.ancestors.pop(), n.schema = i, n.create(e, s, o, t);
}
function ew(n, e) {
  if (e.data && e.data.estree && n.evaluater) {
    const i = e.data.estree.body[0];
    return i.type, /** @type {Child | undefined} */
    n.evaluater.evaluateExpression(i.expression);
  }
  vs(n, e.position);
}
function tw(n, e) {
  if (e.data && e.data.estree && n.evaluater)
    return (
      /** @type {Child | undefined} */
      n.evaluater.evaluateProgram(e.data.estree)
    );
  vs(n, e.position);
}
function nw(n, e, t) {
  const i = n.schema;
  let r = i;
  e.name === "svg" && i.space === "html" && (r = dh, n.schema = r), n.ancestors.push(e);
  const s = e.name === null ? n.Fragment : Jg(n, e.name, !0), o = lw(n, e), a = Oh(n, e);
  return Kg(n, o, s, e), gh(o, a), n.ancestors.pop(), n.schema = i, n.create(e, s, o, t);
}
function iw(n, e, t) {
  const i = {};
  return gh(i, Oh(n, e)), n.create(e, n.Fragment, i, t);
}
function rw(n, e) {
  return e.value;
}
function Kg(n, e, t, i) {
  typeof t != "string" && t !== n.Fragment && n.passNode && (e.node = i);
}
function gh(n, e) {
  if (e.length > 0) {
    const t = e.length > 1 ? e : e[0];
    t && (n.children = t);
  }
}
function sw(n, e, t) {
  return i;
  function i(r, s, o, a) {
    const c = Array.isArray(o.children) ? t : e;
    return a ? c(s, o, a) : c(s, o);
  }
}
function ow(n, e) {
  return t;
  function t(i, r, s, o) {
    const a = Array.isArray(s.children), l = ph(i);
    return e(
      r,
      s,
      o,
      a,
      {
        columnNumber: l ? l.column - 1 : void 0,
        fileName: n,
        lineNumber: l ? l.line : void 0
      },
      void 0
    );
  }
}
function aw(n, e) {
  const t = {};
  let i, r;
  for (r in e.properties)
    if (r !== "children" && mh.call(e.properties, r)) {
      const s = cw(n, r, e.properties[r]);
      if (s) {
        const [o, a] = s;
        n.tableCellAlignToStyle && o === "align" && typeof a == "string" && HS.has(e.tagName) ? i = a : t[o] = a;
      }
    }
  if (i) {
    const s = (
      /** @type {Style} */
      t.style || (t.style = {})
    );
    s[n.stylePropertyNameCase === "css" ? "text-align" : "textAlign"] = i;
  }
  return t;
}
function lw(n, e) {
  const t = {};
  for (const i of e.attributes)
    if (i.type === "mdxJsxExpressionAttribute")
      if (i.data && i.data.estree && n.evaluater) {
        const s = i.data.estree.body[0];
        s.type;
        const o = s.expression;
        o.type;
        const a = o.properties[0];
        a.type, Object.assign(
          t,
          n.evaluater.evaluateExpression(a.argument)
        );
      } else
        vs(n, e.position);
    else {
      const r = i.name;
      let s;
      if (i.value && typeof i.value == "object")
        if (i.value.data && i.value.data.estree && n.evaluater) {
          const a = i.value.data.estree.body[0];
          a.type, s = n.evaluater.evaluateExpression(a.expression);
        } else
          vs(n, e.position);
      else
        s = i.value === null ? !0 : i.value;
      t[r] = /** @type {Props[keyof Props]} */
      s;
    }
  return t;
}
function Oh(n, e) {
  const t = [];
  let i = -1;
  const r = n.passKeys ? /* @__PURE__ */ new Map() : GS;
  for (; ++i < e.children.length; ) {
    const s = e.children[i];
    let o;
    if (n.passKeys) {
      const l = s.type === "element" ? s.tagName : s.type === "mdxJsxFlowElement" || s.type === "mdxJsxTextElement" ? s.name : void 0;
      if (l) {
        const c = r.get(l) || 0;
        o = l + "-" + c, r.set(l, c + 1);
      }
    }
    const a = Hg(n, s, o);
    a !== void 0 && t.push(a);
  }
  return t;
}
function cw(n, e, t) {
  const i = IS(n.schema, e);
  if (!(t == null || typeof t == "number" && Number.isNaN(t))) {
    if (Array.isArray(t) && (t = i.commaSeparated ? vS(t) : zS(t)), i.property === "style") {
      let r = typeof t == "object" ? t : uw(n, String(t));
      return n.stylePropertyNameCase === "css" && (r = hw(r)), ["style", r];
    }
    return [
      n.elementAttributeNameCase === "react" && i.space ? RS[i.property] || i.property : i.attribute,
      t
    ];
  }
}
function uw(n, e) {
  try {
    return FS(e, { reactCompat: !0 });
  } catch (t) {
    if (n.ignoreInvalidStyle)
      return {};
    const i = (
      /** @type {Error} */
      t
    ), r = new _t("Cannot parse `style` attribute", {
      ancestors: n.ancestors,
      cause: i,
      ruleId: "style",
      source: "hast-util-to-jsx-runtime"
    });
    throw r.file = n.filePath || void 0, r.url = jg + "#cannot-parse-style-attribute", r;
  }
}
function Jg(n, e, t) {
  let i;
  if (!t)
    i = { type: "Literal", value: e };
  else if (e.includes(".")) {
    const r = e.split(".");
    let s = -1, o;
    for (; ++s < r.length; ) {
      const a = Yf(r[s]) ? { type: "Identifier", name: r[s] } : { type: "Literal", value: r[s] };
      o = o ? {
        type: "MemberExpression",
        object: o,
        property: a,
        computed: !!(s && a.type === "Literal"),
        optional: !1
      } : a;
    }
    i = o;
  } else
    i = Yf(e) && !/^[a-z]/.test(e) ? { type: "Identifier", name: e } : { type: "Literal", value: e };
  if (i.type === "Literal") {
    const r = (
      /** @type {string | number} */
      i.value
    );
    return mh.call(n.components, r) ? n.components[r] : r;
  }
  if (n.evaluater)
    return n.evaluater.evaluateExpression(i);
  vs(n);
}
function vs(n, e) {
  const t = new _t(
    "Cannot handle MDX estrees without `createEvaluater`",
    {
      ancestors: n.ancestors,
      place: e,
      ruleId: "mdx-estree",
      source: "hast-util-to-jsx-runtime"
    }
  );
  throw t.file = n.filePath || void 0, t.url = jg + "#cannot-handle-mdx-estrees-without-createevaluater", t;
}
function hw(n) {
  const e = {};
  let t;
  for (t in n)
    mh.call(n, t) && (e[fw(t)] = n[t]);
  return e;
}
function fw(n) {
  let e = n.replace(WS, dw);
  return e.slice(0, 3) === "ms-" && (e = "-" + e), e;
}
function dw(n) {
  return "-" + n.toLowerCase();
}
const Ql = {
  action: ["form"],
  cite: ["blockquote", "del", "ins", "q"],
  data: ["object"],
  formAction: ["button", "input"],
  href: ["a", "area", "base", "link"],
  icon: ["menuitem"],
  itemId: null,
  manifest: ["html"],
  ping: ["a", "area"],
  poster: ["video"],
  src: [
    "audio",
    "embed",
    "iframe",
    "img",
    "input",
    "script",
    "source",
    "track",
    "video"
  ]
}, pw = {};
function bh(n, e) {
  const t = pw, i = typeof t.includeImageAlt == "boolean" ? t.includeImageAlt : !0, r = typeof t.includeHtml == "boolean" ? t.includeHtml : !0;
  return eO(n, i, r);
}
function eO(n, e, t) {
  if (mw(n)) {
    if ("value" in n)
      return n.type === "html" && !t ? "" : n.value;
    if (e && "alt" in n && n.alt)
      return n.alt;
    if ("children" in n)
      return td(n.children, e, t);
  }
  return Array.isArray(n) ? td(n, e, t) : "";
}
function td(n, e, t) {
  const i = [];
  let r = -1;
  for (; ++r < n.length; )
    i[r] = eO(n[r], e, t);
  return i.join("");
}
function mw(n) {
  return !!(n && typeof n == "object");
}
const nd = document.createElement("i");
function yh(n) {
  const e = "&" + n + ";";
  nd.innerHTML = e;
  const t = nd.textContent;
  return (
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    t.charCodeAt(t.length - 1) === 59 && n !== "semi" || t === e ? !1 : t
  );
}
function en(n, e, t, i) {
  const r = n.length;
  let s = 0, o;
  if (e < 0 ? e = -e > r ? 0 : r + e : e = e > r ? r : e, t = t > 0 ? t : 0, i.length < 1e4)
    o = Array.from(i), o.unshift(e, t), n.splice(...o);
  else
    for (t && n.splice(e, t); s < i.length; )
      o = i.slice(s, s + 1e4), o.unshift(e, 0), n.splice(...o), s += 1e4, e += 1e4;
}
function rn(n, e) {
  return n.length > 0 ? (en(n, n.length, 0, e), n) : e;
}
const id = {}.hasOwnProperty;
function tO(n) {
  const e = {};
  let t = -1;
  for (; ++t < n.length; )
    gw(e, n[t]);
  return e;
}
function gw(n, e) {
  let t;
  for (t in e) {
    const r = (id.call(n, t) ? n[t] : void 0) || (n[t] = {}), s = e[t];
    let o;
    if (s)
      for (o in s) {
        id.call(r, o) || (r[o] = []);
        const a = s[o];
        Ow(
          // @ts-expect-error Looks like a list.
          r[o],
          Array.isArray(a) ? a : a ? [a] : []
        );
      }
  }
}
function Ow(n, e) {
  let t = -1;
  const i = [];
  for (; ++t < e.length; )
    (e[t].add === "after" ? n : i).push(e[t]);
  en(n, 0, 0, i);
}
function nO(n, e) {
  const t = Number.parseInt(n, e);
  return (
    // C0 except for HT, LF, FF, CR, space.
    t < 9 || t === 11 || t > 13 && t < 32 || // Control character (DEL) of C0, and C1 controls.
    t > 126 && t < 160 || // Lone high surrogates and low surrogates.
    t > 55295 && t < 57344 || // Noncharacters.
    t > 64975 && t < 65008 || /* eslint-disable no-bitwise */
    (t & 65535) === 65535 || (t & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    t > 1114111 ? "�" : String.fromCodePoint(t)
  );
}
function mn(n) {
  return n.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
const Pt = wi(/[A-Za-z]/), vt = wi(/[\dA-Za-z]/), bw = wi(/[#-'*+\--9=?A-Z^-~]/);
function ba(n) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    n !== null && (n < 32 || n === 127)
  );
}
const zc = wi(/\d/), yw = wi(/[\dA-Fa-f]/), xw = wi(/[!-/:-@[-`{-~]/);
function ue(n) {
  return n !== null && n < -2;
}
function Ze(n) {
  return n !== null && (n < 0 || n === 32);
}
function Se(n) {
  return n === -2 || n === -1 || n === 32;
}
const tl = wi(new RegExp("\\p{P}|\\p{S}", "u")), Li = wi(/\s/);
function wi(n) {
  return e;
  function e(t) {
    return t !== null && t > -1 && n.test(String.fromCharCode(t));
  }
}
function Tr(n) {
  const e = [];
  let t = -1, i = 0, r = 0;
  for (; ++t < n.length; ) {
    const s = n.charCodeAt(t);
    let o = "";
    if (s === 37 && vt(n.charCodeAt(t + 1)) && vt(n.charCodeAt(t + 2)))
      r = 2;
    else if (s < 128)
      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(s)) || (o = String.fromCharCode(s));
    else if (s > 55295 && s < 57344) {
      const a = n.charCodeAt(t + 1);
      s < 56320 && a > 56319 && a < 57344 ? (o = String.fromCharCode(s, a), r = 1) : o = "�";
    } else
      o = String.fromCharCode(s);
    o && (e.push(n.slice(i, t), encodeURIComponent(o)), i = t + r + 1, o = ""), r && (t += r, r = 0);
  }
  return e.join("") + n.slice(i);
}
function Pe(n, e, t, i) {
  const r = i ? i - 1 : Number.POSITIVE_INFINITY;
  let s = 0;
  return o;
  function o(l) {
    return Se(l) ? (n.enter(t), a(l)) : e(l);
  }
  function a(l) {
    return Se(l) && s++ < r ? (n.consume(l), a) : (n.exit(t), e(l));
  }
}
const kw = {
  tokenize: Sw
};
function Sw(n) {
  const e = n.attempt(this.parser.constructs.contentInitial, i, r);
  let t;
  return e;
  function i(a) {
    if (a === null) {
      n.consume(a);
      return;
    }
    return n.enter("lineEnding"), n.consume(a), n.exit("lineEnding"), Pe(n, e, "linePrefix");
  }
  function r(a) {
    return n.enter("paragraph"), s(a);
  }
  function s(a) {
    const l = n.enter("chunkText", {
      contentType: "text",
      previous: t
    });
    return t && (t.next = l), t = l, o(a);
  }
  function o(a) {
    if (a === null) {
      n.exit("chunkText"), n.exit("paragraph"), n.consume(a);
      return;
    }
    return ue(a) ? (n.consume(a), n.exit("chunkText"), s) : (n.consume(a), o);
  }
}
const ww = {
  tokenize: vw
}, rd = {
  tokenize: Ew
};
function vw(n) {
  const e = this, t = [];
  let i = 0, r, s, o;
  return a;
  function a(S) {
    if (i < t.length) {
      const _ = t[i];
      return e.containerState = _[1], n.attempt(_[0].continuation, l, c)(S);
    }
    return c(S);
  }
  function l(S) {
    if (i++, e.containerState._closeFlow) {
      e.containerState._closeFlow = void 0, r && y();
      const _ = e.events.length;
      let v = _, x;
      for (; v--; )
        if (e.events[v][0] === "exit" && e.events[v][1].type === "chunkFlow") {
          x = e.events[v][1].end;
          break;
        }
      g(i);
      let C = _;
      for (; C < e.events.length; )
        e.events[C][1].end = {
          ...x
        }, C++;
      return en(e.events, v + 1, 0, e.events.slice(_)), e.events.length = C, c(S);
    }
    return a(S);
  }
  function c(S) {
    if (i === t.length) {
      if (!r)
        return f(S);
      if (r.currentConstruct && r.currentConstruct.concrete)
        return p(S);
      e.interrupt = !!(r.currentConstruct && !r._gfmTableDynamicInterruptHack);
    }
    return e.containerState = {}, n.check(rd, u, h)(S);
  }
  function u(S) {
    return r && y(), g(i), f(S);
  }
  function h(S) {
    return e.parser.lazy[e.now().line] = i !== t.length, o = e.now().offset, p(S);
  }
  function f(S) {
    return e.containerState = {}, n.attempt(rd, d, p)(S);
  }
  function d(S) {
    return i++, t.push([e.currentConstruct, e.containerState]), f(S);
  }
  function p(S) {
    if (S === null) {
      r && y(), g(0), n.consume(S);
      return;
    }
    return r = r || e.parser.flow(e.now()), n.enter("chunkFlow", {
      _tokenizer: r,
      contentType: "flow",
      previous: s
    }), m(S);
  }
  function m(S) {
    if (S === null) {
      O(n.exit("chunkFlow"), !0), g(0), n.consume(S);
      return;
    }
    return ue(S) ? (n.consume(S), O(n.exit("chunkFlow")), i = 0, e.interrupt = void 0, a) : (n.consume(S), m);
  }
  function O(S, _) {
    const v = e.sliceStream(S);
    if (_ && v.push(null), S.previous = s, s && (s.next = S), s = S, r.defineSkip(S.start), r.write(v), e.parser.lazy[S.start.line]) {
      let x = r.events.length;
      for (; x--; )
        if (
          // The token starts before the line ending…
          r.events[x][1].start.offset < o && // …and either is not ended yet…
          (!r.events[x][1].end || // …or ends after it.
          r.events[x][1].end.offset > o)
        )
          return;
      const C = e.events.length;
      let T = C, A, Q;
      for (; T--; )
        if (e.events[T][0] === "exit" && e.events[T][1].type === "chunkFlow") {
          if (A) {
            Q = e.events[T][1].end;
            break;
          }
          A = !0;
        }
      for (g(i), x = C; x < e.events.length; )
        e.events[x][1].end = {
          ...Q
        }, x++;
      en(e.events, T + 1, 0, e.events.slice(C)), e.events.length = x;
    }
  }
  function g(S) {
    let _ = t.length;
    for (; _-- > S; ) {
      const v = t[_];
      e.containerState = v[1], v[0].exit.call(e, n);
    }
    t.length = S;
  }
  function y() {
    r.write([null]), s = void 0, r = void 0, e.containerState._closeFlow = void 0;
  }
}
function Ew(n, e, t) {
  return Pe(n, n.attempt(this.parser.constructs.document, e, t), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}
function pr(n) {
  if (n === null || Ze(n) || Li(n))
    return 1;
  if (tl(n))
    return 2;
}
function nl(n, e, t) {
  const i = [];
  let r = -1;
  for (; ++r < n.length; ) {
    const s = n[r].resolveAll;
    s && !i.includes(s) && (e = s(e, t), i.push(s));
  }
  return e;
}
const Zc = {
  name: "attention",
  resolveAll: _w,
  tokenize: Qw
};
function _w(n, e) {
  let t = -1, i, r, s, o, a, l, c, u;
  for (; ++t < n.length; )
    if (n[t][0] === "enter" && n[t][1].type === "attentionSequence" && n[t][1]._close) {
      for (i = t; i--; )
        if (n[i][0] === "exit" && n[i][1].type === "attentionSequence" && n[i][1]._open && // If the markers are the same:
        e.sliceSerialize(n[i][1]).charCodeAt(0) === e.sliceSerialize(n[t][1]).charCodeAt(0)) {
          if ((n[i][1]._close || n[t][1]._open) && (n[t][1].end.offset - n[t][1].start.offset) % 3 && !((n[i][1].end.offset - n[i][1].start.offset + n[t][1].end.offset - n[t][1].start.offset) % 3))
            continue;
          l = n[i][1].end.offset - n[i][1].start.offset > 1 && n[t][1].end.offset - n[t][1].start.offset > 1 ? 2 : 1;
          const h = {
            ...n[i][1].end
          }, f = {
            ...n[t][1].start
          };
          sd(h, -l), sd(f, l), o = {
            type: l > 1 ? "strongSequence" : "emphasisSequence",
            start: h,
            end: {
              ...n[i][1].end
            }
          }, a = {
            type: l > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...n[t][1].start
            },
            end: f
          }, s = {
            type: l > 1 ? "strongText" : "emphasisText",
            start: {
              ...n[i][1].end
            },
            end: {
              ...n[t][1].start
            }
          }, r = {
            type: l > 1 ? "strong" : "emphasis",
            start: {
              ...o.start
            },
            end: {
              ...a.end
            }
          }, n[i][1].end = {
            ...o.start
          }, n[t][1].start = {
            ...a.end
          }, c = [], n[i][1].end.offset - n[i][1].start.offset && (c = rn(c, [["enter", n[i][1], e], ["exit", n[i][1], e]])), c = rn(c, [["enter", r, e], ["enter", o, e], ["exit", o, e], ["enter", s, e]]), c = rn(c, nl(e.parser.constructs.insideSpan.null, n.slice(i + 1, t), e)), c = rn(c, [["exit", s, e], ["enter", a, e], ["exit", a, e], ["exit", r, e]]), n[t][1].end.offset - n[t][1].start.offset ? (u = 2, c = rn(c, [["enter", n[t][1], e], ["exit", n[t][1], e]])) : u = 0, en(n, i - 1, t - i + 3, c), t = i + c.length - u - 2;
          break;
        }
    }
  for (t = -1; ++t < n.length; )
    n[t][1].type === "attentionSequence" && (n[t][1].type = "data");
  return n;
}
function Qw(n, e) {
  const t = this.parser.constructs.attentionMarkers.null, i = this.previous, r = pr(i);
  let s;
  return o;
  function o(l) {
    return s = l, n.enter("attentionSequence"), a(l);
  }
  function a(l) {
    if (l === s)
      return n.consume(l), a;
    const c = n.exit("attentionSequence"), u = pr(l), h = !u || u === 2 && r || t.includes(l), f = !r || r === 2 && u || t.includes(i);
    return c._open = !!(s === 42 ? h : h && (r || !f)), c._close = !!(s === 42 ? f : f && (u || !h)), e(l);
  }
}
function sd(n, e) {
  n.column += e, n.offset += e, n._bufferIndex += e;
}
const Cw = {
  name: "autolink",
  tokenize: Tw
};
function Tw(n, e, t) {
  let i = 0;
  return r;
  function r(d) {
    return n.enter("autolink"), n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.enter("autolinkProtocol"), s;
  }
  function s(d) {
    return Pt(d) ? (n.consume(d), o) : d === 64 ? t(d) : c(d);
  }
  function o(d) {
    return d === 43 || d === 45 || d === 46 || vt(d) ? (i = 1, a(d)) : c(d);
  }
  function a(d) {
    return d === 58 ? (n.consume(d), i = 0, l) : (d === 43 || d === 45 || d === 46 || vt(d)) && i++ < 32 ? (n.consume(d), a) : (i = 0, c(d));
  }
  function l(d) {
    return d === 62 ? (n.exit("autolinkProtocol"), n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.exit("autolink"), e) : d === null || d === 32 || d === 60 || ba(d) ? t(d) : (n.consume(d), l);
  }
  function c(d) {
    return d === 64 ? (n.consume(d), u) : bw(d) ? (n.consume(d), c) : t(d);
  }
  function u(d) {
    return vt(d) ? h(d) : t(d);
  }
  function h(d) {
    return d === 46 ? (n.consume(d), i = 0, u) : d === 62 ? (n.exit("autolinkProtocol").type = "autolinkEmail", n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.exit("autolink"), e) : f(d);
  }
  function f(d) {
    if ((d === 45 || vt(d)) && i++ < 63) {
      const p = d === 45 ? f : h;
      return n.consume(d), p;
    }
    return t(d);
  }
}
const js = {
  partial: !0,
  tokenize: Pw
};
function Pw(n, e, t) {
  return i;
  function i(s) {
    return Se(s) ? Pe(n, r, "linePrefix")(s) : r(s);
  }
  function r(s) {
    return s === null || ue(s) ? e(s) : t(s);
  }
}
const iO = {
  continuation: {
    tokenize: $w
  },
  exit: Rw,
  name: "blockQuote",
  tokenize: Aw
};
function Aw(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    if (o === 62) {
      const a = i.containerState;
      return a.open || (n.enter("blockQuote", {
        _container: !0
      }), a.open = !0), n.enter("blockQuotePrefix"), n.enter("blockQuoteMarker"), n.consume(o), n.exit("blockQuoteMarker"), s;
    }
    return t(o);
  }
  function s(o) {
    return Se(o) ? (n.enter("blockQuotePrefixWhitespace"), n.consume(o), n.exit("blockQuotePrefixWhitespace"), n.exit("blockQuotePrefix"), e) : (n.exit("blockQuotePrefix"), e(o));
  }
}
function $w(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return Se(o) ? Pe(n, s, "linePrefix", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(o) : s(o);
  }
  function s(o) {
    return n.attempt(iO, e, t)(o);
  }
}
function Rw(n) {
  n.exit("blockQuote");
}
const rO = {
  name: "characterEscape",
  tokenize: Mw
};
function Mw(n, e, t) {
  return i;
  function i(s) {
    return n.enter("characterEscape"), n.enter("escapeMarker"), n.consume(s), n.exit("escapeMarker"), r;
  }
  function r(s) {
    return xw(s) ? (n.enter("characterEscapeValue"), n.consume(s), n.exit("characterEscapeValue"), n.exit("characterEscape"), e) : t(s);
  }
}
const sO = {
  name: "characterReference",
  tokenize: Nw
};
function Nw(n, e, t) {
  const i = this;
  let r = 0, s, o;
  return a;
  function a(h) {
    return n.enter("characterReference"), n.enter("characterReferenceMarker"), n.consume(h), n.exit("characterReferenceMarker"), l;
  }
  function l(h) {
    return h === 35 ? (n.enter("characterReferenceMarkerNumeric"), n.consume(h), n.exit("characterReferenceMarkerNumeric"), c) : (n.enter("characterReferenceValue"), s = 31, o = vt, u(h));
  }
  function c(h) {
    return h === 88 || h === 120 ? (n.enter("characterReferenceMarkerHexadecimal"), n.consume(h), n.exit("characterReferenceMarkerHexadecimal"), n.enter("characterReferenceValue"), s = 6, o = yw, u) : (n.enter("characterReferenceValue"), s = 7, o = zc, u(h));
  }
  function u(h) {
    if (h === 59 && r) {
      const f = n.exit("characterReferenceValue");
      return o === vt && !yh(i.sliceSerialize(f)) ? t(h) : (n.enter("characterReferenceMarker"), n.consume(h), n.exit("characterReferenceMarker"), n.exit("characterReference"), e);
    }
    return o(h) && r++ < s ? (n.consume(h), u) : t(h);
  }
}
const od = {
  partial: !0,
  tokenize: Lw
}, ad = {
  concrete: !0,
  name: "codeFenced",
  tokenize: Iw
};
function Iw(n, e, t) {
  const i = this, r = {
    partial: !0,
    tokenize: v
  };
  let s = 0, o = 0, a;
  return l;
  function l(x) {
    return c(x);
  }
  function c(x) {
    const C = i.events[i.events.length - 1];
    return s = C && C[1].type === "linePrefix" ? C[2].sliceSerialize(C[1], !0).length : 0, a = x, n.enter("codeFenced"), n.enter("codeFencedFence"), n.enter("codeFencedFenceSequence"), u(x);
  }
  function u(x) {
    return x === a ? (o++, n.consume(x), u) : o < 3 ? t(x) : (n.exit("codeFencedFenceSequence"), Se(x) ? Pe(n, h, "whitespace")(x) : h(x));
  }
  function h(x) {
    return x === null || ue(x) ? (n.exit("codeFencedFence"), i.interrupt ? e(x) : n.check(od, m, _)(x)) : (n.enter("codeFencedFenceInfo"), n.enter("chunkString", {
      contentType: "string"
    }), f(x));
  }
  function f(x) {
    return x === null || ue(x) ? (n.exit("chunkString"), n.exit("codeFencedFenceInfo"), h(x)) : Se(x) ? (n.exit("chunkString"), n.exit("codeFencedFenceInfo"), Pe(n, d, "whitespace")(x)) : x === 96 && x === a ? t(x) : (n.consume(x), f);
  }
  function d(x) {
    return x === null || ue(x) ? h(x) : (n.enter("codeFencedFenceMeta"), n.enter("chunkString", {
      contentType: "string"
    }), p(x));
  }
  function p(x) {
    return x === null || ue(x) ? (n.exit("chunkString"), n.exit("codeFencedFenceMeta"), h(x)) : x === 96 && x === a ? t(x) : (n.consume(x), p);
  }
  function m(x) {
    return n.attempt(r, _, O)(x);
  }
  function O(x) {
    return n.enter("lineEnding"), n.consume(x), n.exit("lineEnding"), g;
  }
  function g(x) {
    return s > 0 && Se(x) ? Pe(n, y, "linePrefix", s + 1)(x) : y(x);
  }
  function y(x) {
    return x === null || ue(x) ? n.check(od, m, _)(x) : (n.enter("codeFlowValue"), S(x));
  }
  function S(x) {
    return x === null || ue(x) ? (n.exit("codeFlowValue"), y(x)) : (n.consume(x), S);
  }
  function _(x) {
    return n.exit("codeFenced"), e(x);
  }
  function v(x, C, T) {
    let A = 0;
    return Q;
    function Q($) {
      return x.enter("lineEnding"), x.consume($), x.exit("lineEnding"), M;
    }
    function M($) {
      return x.enter("codeFencedFence"), Se($) ? Pe(x, R, "linePrefix", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)($) : R($);
    }
    function R($) {
      return $ === a ? (x.enter("codeFencedFenceSequence"), L($)) : T($);
    }
    function L($) {
      return $ === a ? (A++, x.consume($), L) : A >= o ? (x.exit("codeFencedFenceSequence"), Se($) ? Pe(x, P, "whitespace")($) : P($)) : T($);
    }
    function P($) {
      return $ === null || ue($) ? (x.exit("codeFencedFence"), C($)) : T($);
    }
  }
}
function Lw(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return o === null ? t(o) : (n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), s);
  }
  function s(o) {
    return i.parser.lazy[i.now().line] ? t(o) : e(o);
  }
}
const Cl = {
  name: "codeIndented",
  tokenize: Bw
}, Dw = {
  partial: !0,
  tokenize: zw
};
function Bw(n, e, t) {
  const i = this;
  return r;
  function r(c) {
    return n.enter("codeIndented"), Pe(n, s, "linePrefix", 5)(c);
  }
  function s(c) {
    const u = i.events[i.events.length - 1];
    return u && u[1].type === "linePrefix" && u[2].sliceSerialize(u[1], !0).length >= 4 ? o(c) : t(c);
  }
  function o(c) {
    return c === null ? l(c) : ue(c) ? n.attempt(Dw, o, l)(c) : (n.enter("codeFlowValue"), a(c));
  }
  function a(c) {
    return c === null || ue(c) ? (n.exit("codeFlowValue"), o(c)) : (n.consume(c), a);
  }
  function l(c) {
    return n.exit("codeIndented"), e(c);
  }
}
function zw(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return i.parser.lazy[i.now().line] ? t(o) : ue(o) ? (n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), r) : Pe(n, s, "linePrefix", 5)(o);
  }
  function s(o) {
    const a = i.events[i.events.length - 1];
    return a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], !0).length >= 4 ? e(o) : ue(o) ? r(o) : t(o);
  }
}
const Zw = {
  name: "codeText",
  previous: qw,
  resolve: Xw,
  tokenize: Vw
};
function Xw(n) {
  let e = n.length - 4, t = 3, i, r;
  if ((n[t][1].type === "lineEnding" || n[t][1].type === "space") && (n[e][1].type === "lineEnding" || n[e][1].type === "space")) {
    for (i = t; ++i < e; )
      if (n[i][1].type === "codeTextData") {
        n[t][1].type = "codeTextPadding", n[e][1].type = "codeTextPadding", t += 2, e -= 2;
        break;
      }
  }
  for (i = t - 1, e++; ++i <= e; )
    r === void 0 ? i !== e && n[i][1].type !== "lineEnding" && (r = i) : (i === e || n[i][1].type === "lineEnding") && (n[r][1].type = "codeTextData", i !== r + 2 && (n[r][1].end = n[i - 1][1].end, n.splice(r + 2, i - r - 2), e -= i - r - 2, i = r + 2), r = void 0);
  return n;
}
function qw(n) {
  return n !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function Vw(n, e, t) {
  let i = 0, r, s;
  return o;
  function o(h) {
    return n.enter("codeText"), n.enter("codeTextSequence"), a(h);
  }
  function a(h) {
    return h === 96 ? (n.consume(h), i++, a) : (n.exit("codeTextSequence"), l(h));
  }
  function l(h) {
    return h === null ? t(h) : h === 32 ? (n.enter("space"), n.consume(h), n.exit("space"), l) : h === 96 ? (s = n.enter("codeTextSequence"), r = 0, u(h)) : ue(h) ? (n.enter("lineEnding"), n.consume(h), n.exit("lineEnding"), l) : (n.enter("codeTextData"), c(h));
  }
  function c(h) {
    return h === null || h === 32 || h === 96 || ue(h) ? (n.exit("codeTextData"), l(h)) : (n.consume(h), c);
  }
  function u(h) {
    return h === 96 ? (n.consume(h), r++, u) : r === i ? (n.exit("codeTextSequence"), n.exit("codeText"), e(h)) : (s.type = "codeTextData", c(h));
  }
}
class Yw {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(e) {
    this.left = e ? [...e] : [], this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(e) {
    if (e < 0 || e >= this.left.length + this.right.length)
      throw new RangeError("Cannot access index `" + e + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
    return e < this.left.length ? this.left[e] : this.right[this.right.length - e + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    return this.setCursor(0), this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(e, t) {
    const i = t ?? Number.POSITIVE_INFINITY;
    return i < this.left.length ? this.left.slice(e, i) : e > this.left.length ? this.right.slice(this.right.length - i + this.left.length, this.right.length - e + this.left.length).reverse() : this.left.slice(e).concat(this.right.slice(this.right.length - i + this.left.length).reverse());
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(e, t, i) {
    const r = t || 0;
    this.setCursor(Math.trunc(e));
    const s = this.right.splice(this.right.length - r, Number.POSITIVE_INFINITY);
    return i && Wr(this.left, i), s.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    return this.setCursor(Number.POSITIVE_INFINITY), this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(e) {
    this.setCursor(Number.POSITIVE_INFINITY), this.left.push(e);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(e) {
    this.setCursor(Number.POSITIVE_INFINITY), Wr(this.left, e);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(e) {
    this.setCursor(0), this.right.push(e);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(e) {
    this.setCursor(0), Wr(this.right, e.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(e) {
    if (!(e === this.left.length || e > this.left.length && this.right.length === 0 || e < 0 && this.left.length === 0))
      if (e < this.left.length) {
        const t = this.left.splice(e, Number.POSITIVE_INFINITY);
        Wr(this.right, t.reverse());
      } else {
        const t = this.right.splice(this.left.length + this.right.length - e, Number.POSITIVE_INFINITY);
        Wr(this.left, t.reverse());
      }
  }
}
function Wr(n, e) {
  let t = 0;
  if (e.length < 1e4)
    n.push(...e);
  else
    for (; t < e.length; )
      n.push(...e.slice(t, t + 1e4)), t += 1e4;
}
function oO(n) {
  const e = {};
  let t = -1, i, r, s, o, a, l, c;
  const u = new Yw(n);
  for (; ++t < u.length; ) {
    for (; t in e; )
      t = e[t];
    if (i = u.get(t), t && i[1].type === "chunkFlow" && u.get(t - 1)[1].type === "listItemPrefix" && (l = i[1]._tokenizer.events, s = 0, s < l.length && l[s][1].type === "lineEndingBlank" && (s += 2), s < l.length && l[s][1].type === "content"))
      for (; ++s < l.length && l[s][1].type !== "content"; )
        l[s][1].type === "chunkText" && (l[s][1]._isInFirstContentOfListItem = !0, s++);
    if (i[0] === "enter")
      i[1].contentType && (Object.assign(e, Fw(u, t)), t = e[t], c = !0);
    else if (i[1]._container) {
      for (s = t, r = void 0; s--; )
        if (o = u.get(s), o[1].type === "lineEnding" || o[1].type === "lineEndingBlank")
          o[0] === "enter" && (r && (u.get(r)[1].type = "lineEndingBlank"), o[1].type = "lineEnding", r = s);
        else if (!(o[1].type === "linePrefix" || o[1].type === "listItemIndent")) break;
      r && (i[1].end = {
        ...u.get(r)[1].start
      }, a = u.slice(r, t), a.unshift(i), u.splice(r, t - r + 1, a));
    }
  }
  return en(n, 0, Number.POSITIVE_INFINITY, u.slice(0)), !c;
}
function Fw(n, e) {
  const t = n.get(e)[1], i = n.get(e)[2];
  let r = e - 1;
  const s = [];
  let o = t._tokenizer;
  o || (o = i.parser[t.contentType](t.start), t._contentTypeTextTrailing && (o._contentTypeTextTrailing = !0));
  const a = o.events, l = [], c = {};
  let u, h, f = -1, d = t, p = 0, m = 0;
  const O = [m];
  for (; d; ) {
    for (; n.get(++r)[1] !== d; )
      ;
    s.push(r), d._tokenizer || (u = i.sliceStream(d), d.next || u.push(null), h && o.defineSkip(d.start), d._isInFirstContentOfListItem && (o._gfmTasklistFirstContentOfListItem = !0), o.write(u), d._isInFirstContentOfListItem && (o._gfmTasklistFirstContentOfListItem = void 0)), h = d, d = d.next;
  }
  for (d = t; ++f < a.length; )
    // Find a void token that includes a break.
    a[f][0] === "exit" && a[f - 1][0] === "enter" && a[f][1].type === a[f - 1][1].type && a[f][1].start.line !== a[f][1].end.line && (m = f + 1, O.push(m), d._tokenizer = void 0, d.previous = void 0, d = d.next);
  for (o.events = [], d ? (d._tokenizer = void 0, d.previous = void 0) : O.pop(), f = O.length; f--; ) {
    const g = a.slice(O[f], O[f + 1]), y = s.pop();
    l.push([y, y + g.length - 1]), n.splice(y, 2, g);
  }
  for (l.reverse(), f = -1; ++f < l.length; )
    c[p + l[f][0]] = p + l[f][1], p += l[f][1] - l[f][0] - 1;
  return c;
}
const Uw = {
  resolve: Ww,
  tokenize: jw
}, Gw = {
  partial: !0,
  tokenize: Hw
};
function Ww(n) {
  return oO(n), n;
}
function jw(n, e) {
  let t;
  return i;
  function i(a) {
    return n.enter("content"), t = n.enter("chunkContent", {
      contentType: "content"
    }), r(a);
  }
  function r(a) {
    return a === null ? s(a) : ue(a) ? n.check(Gw, o, s)(a) : (n.consume(a), r);
  }
  function s(a) {
    return n.exit("chunkContent"), n.exit("content"), e(a);
  }
  function o(a) {
    return n.consume(a), n.exit("chunkContent"), t.next = n.enter("chunkContent", {
      contentType: "content",
      previous: t
    }), t = t.next, r;
  }
}
function Hw(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return n.exit("chunkContent"), n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), Pe(n, s, "linePrefix");
  }
  function s(o) {
    if (o === null || ue(o))
      return t(o);
    const a = i.events[i.events.length - 1];
    return !i.parser.constructs.disable.null.includes("codeIndented") && a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], !0).length >= 4 ? e(o) : n.interrupt(i.parser.constructs.flow, t, e)(o);
  }
}
function aO(n, e, t, i, r, s, o, a, l) {
  const c = l || Number.POSITIVE_INFINITY;
  let u = 0;
  return h;
  function h(g) {
    return g === 60 ? (n.enter(i), n.enter(r), n.enter(s), n.consume(g), n.exit(s), f) : g === null || g === 32 || g === 41 || ba(g) ? t(g) : (n.enter(i), n.enter(o), n.enter(a), n.enter("chunkString", {
      contentType: "string"
    }), m(g));
  }
  function f(g) {
    return g === 62 ? (n.enter(s), n.consume(g), n.exit(s), n.exit(r), n.exit(i), e) : (n.enter(a), n.enter("chunkString", {
      contentType: "string"
    }), d(g));
  }
  function d(g) {
    return g === 62 ? (n.exit("chunkString"), n.exit(a), f(g)) : g === null || g === 60 || ue(g) ? t(g) : (n.consume(g), g === 92 ? p : d);
  }
  function p(g) {
    return g === 60 || g === 62 || g === 92 ? (n.consume(g), d) : d(g);
  }
  function m(g) {
    return !u && (g === null || g === 41 || Ze(g)) ? (n.exit("chunkString"), n.exit(a), n.exit(o), n.exit(i), e(g)) : u < c && g === 40 ? (n.consume(g), u++, m) : g === 41 ? (n.consume(g), u--, m) : g === null || g === 32 || g === 40 || ba(g) ? t(g) : (n.consume(g), g === 92 ? O : m);
  }
  function O(g) {
    return g === 40 || g === 41 || g === 92 ? (n.consume(g), m) : m(g);
  }
}
function lO(n, e, t, i, r, s) {
  const o = this;
  let a = 0, l;
  return c;
  function c(d) {
    return n.enter(i), n.enter(r), n.consume(d), n.exit(r), n.enter(s), u;
  }
  function u(d) {
    return a > 999 || d === null || d === 91 || d === 93 && !l || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    d === 94 && !a && "_hiddenFootnoteSupport" in o.parser.constructs ? t(d) : d === 93 ? (n.exit(s), n.enter(r), n.consume(d), n.exit(r), n.exit(i), e) : ue(d) ? (n.enter("lineEnding"), n.consume(d), n.exit("lineEnding"), u) : (n.enter("chunkString", {
      contentType: "string"
    }), h(d));
  }
  function h(d) {
    return d === null || d === 91 || d === 93 || ue(d) || a++ > 999 ? (n.exit("chunkString"), u(d)) : (n.consume(d), l || (l = !Se(d)), d === 92 ? f : h);
  }
  function f(d) {
    return d === 91 || d === 92 || d === 93 ? (n.consume(d), a++, h) : h(d);
  }
}
function cO(n, e, t, i, r, s) {
  let o;
  return a;
  function a(f) {
    return f === 34 || f === 39 || f === 40 ? (n.enter(i), n.enter(r), n.consume(f), n.exit(r), o = f === 40 ? 41 : f, l) : t(f);
  }
  function l(f) {
    return f === o ? (n.enter(r), n.consume(f), n.exit(r), n.exit(i), e) : (n.enter(s), c(f));
  }
  function c(f) {
    return f === o ? (n.exit(s), l(o)) : f === null ? t(f) : ue(f) ? (n.enter("lineEnding"), n.consume(f), n.exit("lineEnding"), Pe(n, c, "linePrefix")) : (n.enter("chunkString", {
      contentType: "string"
    }), u(f));
  }
  function u(f) {
    return f === o || f === null || ue(f) ? (n.exit("chunkString"), c(f)) : (n.consume(f), f === 92 ? h : u);
  }
  function h(f) {
    return f === o || f === 92 ? (n.consume(f), u) : u(f);
  }
}
function ps(n, e) {
  let t;
  return i;
  function i(r) {
    return ue(r) ? (n.enter("lineEnding"), n.consume(r), n.exit("lineEnding"), t = !0, i) : Se(r) ? Pe(n, i, t ? "linePrefix" : "lineSuffix")(r) : e(r);
  }
}
const Kw = {
  name: "definition",
  tokenize: e1
}, Jw = {
  partial: !0,
  tokenize: t1
};
function e1(n, e, t) {
  const i = this;
  let r;
  return s;
  function s(d) {
    return n.enter("definition"), o(d);
  }
  function o(d) {
    return lO.call(
      i,
      n,
      a,
      // Note: we don’t need to reset the way `markdown-rs` does.
      t,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(d);
  }
  function a(d) {
    return r = mn(i.sliceSerialize(i.events[i.events.length - 1][1]).slice(1, -1)), d === 58 ? (n.enter("definitionMarker"), n.consume(d), n.exit("definitionMarker"), l) : t(d);
  }
  function l(d) {
    return Ze(d) ? ps(n, c)(d) : c(d);
  }
  function c(d) {
    return aO(
      n,
      u,
      // Note: we don’t need to reset the way `markdown-rs` does.
      t,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(d);
  }
  function u(d) {
    return n.attempt(Jw, h, h)(d);
  }
  function h(d) {
    return Se(d) ? Pe(n, f, "whitespace")(d) : f(d);
  }
  function f(d) {
    return d === null || ue(d) ? (n.exit("definition"), i.parser.defined.push(r), e(d)) : t(d);
  }
}
function t1(n, e, t) {
  return i;
  function i(a) {
    return Ze(a) ? ps(n, r)(a) : t(a);
  }
  function r(a) {
    return cO(n, s, t, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(a);
  }
  function s(a) {
    return Se(a) ? Pe(n, o, "whitespace")(a) : o(a);
  }
  function o(a) {
    return a === null || ue(a) ? e(a) : t(a);
  }
}
const n1 = {
  name: "hardBreakEscape",
  tokenize: i1
};
function i1(n, e, t) {
  return i;
  function i(s) {
    return n.enter("hardBreakEscape"), n.consume(s), r;
  }
  function r(s) {
    return ue(s) ? (n.exit("hardBreakEscape"), e(s)) : t(s);
  }
}
const r1 = {
  name: "headingAtx",
  resolve: s1,
  tokenize: o1
};
function s1(n, e) {
  let t = n.length - 2, i = 3, r, s;
  return n[i][1].type === "whitespace" && (i += 2), t - 2 > i && n[t][1].type === "whitespace" && (t -= 2), n[t][1].type === "atxHeadingSequence" && (i === t - 1 || t - 4 > i && n[t - 2][1].type === "whitespace") && (t -= i + 1 === t ? 2 : 4), t > i && (r = {
    type: "atxHeadingText",
    start: n[i][1].start,
    end: n[t][1].end
  }, s = {
    type: "chunkText",
    start: n[i][1].start,
    end: n[t][1].end,
    contentType: "text"
  }, en(n, i, t - i + 1, [["enter", r, e], ["enter", s, e], ["exit", s, e], ["exit", r, e]])), n;
}
function o1(n, e, t) {
  let i = 0;
  return r;
  function r(u) {
    return n.enter("atxHeading"), s(u);
  }
  function s(u) {
    return n.enter("atxHeadingSequence"), o(u);
  }
  function o(u) {
    return u === 35 && i++ < 6 ? (n.consume(u), o) : u === null || Ze(u) ? (n.exit("atxHeadingSequence"), a(u)) : t(u);
  }
  function a(u) {
    return u === 35 ? (n.enter("atxHeadingSequence"), l(u)) : u === null || ue(u) ? (n.exit("atxHeading"), e(u)) : Se(u) ? Pe(n, a, "whitespace")(u) : (n.enter("atxHeadingText"), c(u));
  }
  function l(u) {
    return u === 35 ? (n.consume(u), l) : (n.exit("atxHeadingSequence"), a(u));
  }
  function c(u) {
    return u === null || u === 35 || Ze(u) ? (n.exit("atxHeadingText"), a(u)) : (n.consume(u), c);
  }
}
const a1 = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], ld = ["pre", "script", "style", "textarea"], l1 = {
  concrete: !0,
  name: "htmlFlow",
  resolveTo: h1,
  tokenize: f1
}, c1 = {
  partial: !0,
  tokenize: p1
}, u1 = {
  partial: !0,
  tokenize: d1
};
function h1(n) {
  let e = n.length;
  for (; e-- && !(n[e][0] === "enter" && n[e][1].type === "htmlFlow"); )
    ;
  return e > 1 && n[e - 2][1].type === "linePrefix" && (n[e][1].start = n[e - 2][1].start, n[e + 1][1].start = n[e - 2][1].start, n.splice(e - 2, 2)), n;
}
function f1(n, e, t) {
  const i = this;
  let r, s, o, a, l;
  return c;
  function c(w) {
    return u(w);
  }
  function u(w) {
    return n.enter("htmlFlow"), n.enter("htmlFlowData"), n.consume(w), h;
  }
  function h(w) {
    return w === 33 ? (n.consume(w), f) : w === 47 ? (n.consume(w), s = !0, m) : w === 63 ? (n.consume(w), r = 3, i.interrupt ? e : b) : Pt(w) ? (n.consume(w), o = String.fromCharCode(w), O) : t(w);
  }
  function f(w) {
    return w === 45 ? (n.consume(w), r = 2, d) : w === 91 ? (n.consume(w), r = 5, a = 0, p) : Pt(w) ? (n.consume(w), r = 4, i.interrupt ? e : b) : t(w);
  }
  function d(w) {
    return w === 45 ? (n.consume(w), i.interrupt ? e : b) : t(w);
  }
  function p(w) {
    const he = "CDATA[";
    return w === he.charCodeAt(a++) ? (n.consume(w), a === he.length ? i.interrupt ? e : R : p) : t(w);
  }
  function m(w) {
    return Pt(w) ? (n.consume(w), o = String.fromCharCode(w), O) : t(w);
  }
  function O(w) {
    if (w === null || w === 47 || w === 62 || Ze(w)) {
      const he = w === 47, ve = o.toLowerCase();
      return !he && !s && ld.includes(ve) ? (r = 1, i.interrupt ? e(w) : R(w)) : a1.includes(o.toLowerCase()) ? (r = 6, he ? (n.consume(w), g) : i.interrupt ? e(w) : R(w)) : (r = 7, i.interrupt && !i.parser.lazy[i.now().line] ? t(w) : s ? y(w) : S(w));
    }
    return w === 45 || vt(w) ? (n.consume(w), o += String.fromCharCode(w), O) : t(w);
  }
  function g(w) {
    return w === 62 ? (n.consume(w), i.interrupt ? e : R) : t(w);
  }
  function y(w) {
    return Se(w) ? (n.consume(w), y) : Q(w);
  }
  function S(w) {
    return w === 47 ? (n.consume(w), Q) : w === 58 || w === 95 || Pt(w) ? (n.consume(w), _) : Se(w) ? (n.consume(w), S) : Q(w);
  }
  function _(w) {
    return w === 45 || w === 46 || w === 58 || w === 95 || vt(w) ? (n.consume(w), _) : v(w);
  }
  function v(w) {
    return w === 61 ? (n.consume(w), x) : Se(w) ? (n.consume(w), v) : S(w);
  }
  function x(w) {
    return w === null || w === 60 || w === 61 || w === 62 || w === 96 ? t(w) : w === 34 || w === 39 ? (n.consume(w), l = w, C) : Se(w) ? (n.consume(w), x) : T(w);
  }
  function C(w) {
    return w === l ? (n.consume(w), l = null, A) : w === null || ue(w) ? t(w) : (n.consume(w), C);
  }
  function T(w) {
    return w === null || w === 34 || w === 39 || w === 47 || w === 60 || w === 61 || w === 62 || w === 96 || Ze(w) ? v(w) : (n.consume(w), T);
  }
  function A(w) {
    return w === 47 || w === 62 || Se(w) ? S(w) : t(w);
  }
  function Q(w) {
    return w === 62 ? (n.consume(w), M) : t(w);
  }
  function M(w) {
    return w === null || ue(w) ? R(w) : Se(w) ? (n.consume(w), M) : t(w);
  }
  function R(w) {
    return w === 45 && r === 2 ? (n.consume(w), Y) : w === 60 && r === 1 ? (n.consume(w), ie) : w === 62 && r === 4 ? (n.consume(w), Z) : w === 63 && r === 3 ? (n.consume(w), b) : w === 93 && r === 5 ? (n.consume(w), ee) : ue(w) && (r === 6 || r === 7) ? (n.exit("htmlFlowData"), n.check(c1, j, L)(w)) : w === null || ue(w) ? (n.exit("htmlFlowData"), L(w)) : (n.consume(w), R);
  }
  function L(w) {
    return n.check(u1, P, j)(w);
  }
  function P(w) {
    return n.enter("lineEnding"), n.consume(w), n.exit("lineEnding"), $;
  }
  function $(w) {
    return w === null || ue(w) ? L(w) : (n.enter("htmlFlowData"), R(w));
  }
  function Y(w) {
    return w === 45 ? (n.consume(w), b) : R(w);
  }
  function ie(w) {
    return w === 47 ? (n.consume(w), o = "", D) : R(w);
  }
  function D(w) {
    if (w === 62) {
      const he = o.toLowerCase();
      return ld.includes(he) ? (n.consume(w), Z) : R(w);
    }
    return Pt(w) && o.length < 8 ? (n.consume(w), o += String.fromCharCode(w), D) : R(w);
  }
  function ee(w) {
    return w === 93 ? (n.consume(w), b) : R(w);
  }
  function b(w) {
    return w === 62 ? (n.consume(w), Z) : w === 45 && r === 2 ? (n.consume(w), b) : R(w);
  }
  function Z(w) {
    return w === null || ue(w) ? (n.exit("htmlFlowData"), j(w)) : (n.consume(w), Z);
  }
  function j(w) {
    return n.exit("htmlFlow"), e(w);
  }
}
function d1(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return ue(o) ? (n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), s) : t(o);
  }
  function s(o) {
    return i.parser.lazy[i.now().line] ? t(o) : e(o);
  }
}
function p1(n, e, t) {
  return i;
  function i(r) {
    return n.enter("lineEnding"), n.consume(r), n.exit("lineEnding"), n.attempt(js, e, t);
  }
}
const m1 = {
  name: "htmlText",
  tokenize: g1
};
function g1(n, e, t) {
  const i = this;
  let r, s, o;
  return a;
  function a(b) {
    return n.enter("htmlText"), n.enter("htmlTextData"), n.consume(b), l;
  }
  function l(b) {
    return b === 33 ? (n.consume(b), c) : b === 47 ? (n.consume(b), v) : b === 63 ? (n.consume(b), S) : Pt(b) ? (n.consume(b), T) : t(b);
  }
  function c(b) {
    return b === 45 ? (n.consume(b), u) : b === 91 ? (n.consume(b), s = 0, p) : Pt(b) ? (n.consume(b), y) : t(b);
  }
  function u(b) {
    return b === 45 ? (n.consume(b), d) : t(b);
  }
  function h(b) {
    return b === null ? t(b) : b === 45 ? (n.consume(b), f) : ue(b) ? (o = h, ie(b)) : (n.consume(b), h);
  }
  function f(b) {
    return b === 45 ? (n.consume(b), d) : h(b);
  }
  function d(b) {
    return b === 62 ? Y(b) : b === 45 ? f(b) : h(b);
  }
  function p(b) {
    const Z = "CDATA[";
    return b === Z.charCodeAt(s++) ? (n.consume(b), s === Z.length ? m : p) : t(b);
  }
  function m(b) {
    return b === null ? t(b) : b === 93 ? (n.consume(b), O) : ue(b) ? (o = m, ie(b)) : (n.consume(b), m);
  }
  function O(b) {
    return b === 93 ? (n.consume(b), g) : m(b);
  }
  function g(b) {
    return b === 62 ? Y(b) : b === 93 ? (n.consume(b), g) : m(b);
  }
  function y(b) {
    return b === null || b === 62 ? Y(b) : ue(b) ? (o = y, ie(b)) : (n.consume(b), y);
  }
  function S(b) {
    return b === null ? t(b) : b === 63 ? (n.consume(b), _) : ue(b) ? (o = S, ie(b)) : (n.consume(b), S);
  }
  function _(b) {
    return b === 62 ? Y(b) : S(b);
  }
  function v(b) {
    return Pt(b) ? (n.consume(b), x) : t(b);
  }
  function x(b) {
    return b === 45 || vt(b) ? (n.consume(b), x) : C(b);
  }
  function C(b) {
    return ue(b) ? (o = C, ie(b)) : Se(b) ? (n.consume(b), C) : Y(b);
  }
  function T(b) {
    return b === 45 || vt(b) ? (n.consume(b), T) : b === 47 || b === 62 || Ze(b) ? A(b) : t(b);
  }
  function A(b) {
    return b === 47 ? (n.consume(b), Y) : b === 58 || b === 95 || Pt(b) ? (n.consume(b), Q) : ue(b) ? (o = A, ie(b)) : Se(b) ? (n.consume(b), A) : Y(b);
  }
  function Q(b) {
    return b === 45 || b === 46 || b === 58 || b === 95 || vt(b) ? (n.consume(b), Q) : M(b);
  }
  function M(b) {
    return b === 61 ? (n.consume(b), R) : ue(b) ? (o = M, ie(b)) : Se(b) ? (n.consume(b), M) : A(b);
  }
  function R(b) {
    return b === null || b === 60 || b === 61 || b === 62 || b === 96 ? t(b) : b === 34 || b === 39 ? (n.consume(b), r = b, L) : ue(b) ? (o = R, ie(b)) : Se(b) ? (n.consume(b), R) : (n.consume(b), P);
  }
  function L(b) {
    return b === r ? (n.consume(b), r = void 0, $) : b === null ? t(b) : ue(b) ? (o = L, ie(b)) : (n.consume(b), L);
  }
  function P(b) {
    return b === null || b === 34 || b === 39 || b === 60 || b === 61 || b === 96 ? t(b) : b === 47 || b === 62 || Ze(b) ? A(b) : (n.consume(b), P);
  }
  function $(b) {
    return b === 47 || b === 62 || Ze(b) ? A(b) : t(b);
  }
  function Y(b) {
    return b === 62 ? (n.consume(b), n.exit("htmlTextData"), n.exit("htmlText"), e) : t(b);
  }
  function ie(b) {
    return n.exit("htmlTextData"), n.enter("lineEnding"), n.consume(b), n.exit("lineEnding"), D;
  }
  function D(b) {
    return Se(b) ? Pe(n, ee, "linePrefix", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(b) : ee(b);
  }
  function ee(b) {
    return n.enter("htmlTextData"), o(b);
  }
}
const xh = {
  name: "labelEnd",
  resolveAll: x1,
  resolveTo: k1,
  tokenize: S1
}, O1 = {
  tokenize: w1
}, b1 = {
  tokenize: v1
}, y1 = {
  tokenize: E1
};
function x1(n) {
  let e = -1;
  const t = [];
  for (; ++e < n.length; ) {
    const i = n[e][1];
    if (t.push(n[e]), i.type === "labelImage" || i.type === "labelLink" || i.type === "labelEnd") {
      const r = i.type === "labelImage" ? 4 : 2;
      i.type = "data", e += r;
    }
  }
  return n.length !== t.length && en(n, 0, n.length, t), n;
}
function k1(n, e) {
  let t = n.length, i = 0, r, s, o, a;
  for (; t--; )
    if (r = n[t][1], s) {
      if (r.type === "link" || r.type === "labelLink" && r._inactive)
        break;
      n[t][0] === "enter" && r.type === "labelLink" && (r._inactive = !0);
    } else if (o) {
      if (n[t][0] === "enter" && (r.type === "labelImage" || r.type === "labelLink") && !r._balanced && (s = t, r.type !== "labelLink")) {
        i = 2;
        break;
      }
    } else r.type === "labelEnd" && (o = t);
  const l = {
    type: n[s][1].type === "labelLink" ? "link" : "image",
    start: {
      ...n[s][1].start
    },
    end: {
      ...n[n.length - 1][1].end
    }
  }, c = {
    type: "label",
    start: {
      ...n[s][1].start
    },
    end: {
      ...n[o][1].end
    }
  }, u = {
    type: "labelText",
    start: {
      ...n[s + i + 2][1].end
    },
    end: {
      ...n[o - 2][1].start
    }
  };
  return a = [["enter", l, e], ["enter", c, e]], a = rn(a, n.slice(s + 1, s + i + 3)), a = rn(a, [["enter", u, e]]), a = rn(a, nl(e.parser.constructs.insideSpan.null, n.slice(s + i + 4, o - 3), e)), a = rn(a, [["exit", u, e], n[o - 2], n[o - 1], ["exit", c, e]]), a = rn(a, n.slice(o + 1)), a = rn(a, [["exit", l, e]]), en(n, s, n.length, a), n;
}
function S1(n, e, t) {
  const i = this;
  let r = i.events.length, s, o;
  for (; r--; )
    if ((i.events[r][1].type === "labelImage" || i.events[r][1].type === "labelLink") && !i.events[r][1]._balanced) {
      s = i.events[r][1];
      break;
    }
  return a;
  function a(f) {
    return s ? s._inactive ? h(f) : (o = i.parser.defined.includes(mn(i.sliceSerialize({
      start: s.end,
      end: i.now()
    }))), n.enter("labelEnd"), n.enter("labelMarker"), n.consume(f), n.exit("labelMarker"), n.exit("labelEnd"), l) : t(f);
  }
  function l(f) {
    return f === 40 ? n.attempt(O1, u, o ? u : h)(f) : f === 91 ? n.attempt(b1, u, o ? c : h)(f) : o ? u(f) : h(f);
  }
  function c(f) {
    return n.attempt(y1, u, h)(f);
  }
  function u(f) {
    return e(f);
  }
  function h(f) {
    return s._balanced = !0, t(f);
  }
}
function w1(n, e, t) {
  return i;
  function i(h) {
    return n.enter("resource"), n.enter("resourceMarker"), n.consume(h), n.exit("resourceMarker"), r;
  }
  function r(h) {
    return Ze(h) ? ps(n, s)(h) : s(h);
  }
  function s(h) {
    return h === 41 ? u(h) : aO(n, o, a, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(h);
  }
  function o(h) {
    return Ze(h) ? ps(n, l)(h) : u(h);
  }
  function a(h) {
    return t(h);
  }
  function l(h) {
    return h === 34 || h === 39 || h === 40 ? cO(n, c, t, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(h) : u(h);
  }
  function c(h) {
    return Ze(h) ? ps(n, u)(h) : u(h);
  }
  function u(h) {
    return h === 41 ? (n.enter("resourceMarker"), n.consume(h), n.exit("resourceMarker"), n.exit("resource"), e) : t(h);
  }
}
function v1(n, e, t) {
  const i = this;
  return r;
  function r(a) {
    return lO.call(i, n, s, o, "reference", "referenceMarker", "referenceString")(a);
  }
  function s(a) {
    return i.parser.defined.includes(mn(i.sliceSerialize(i.events[i.events.length - 1][1]).slice(1, -1))) ? e(a) : t(a);
  }
  function o(a) {
    return t(a);
  }
}
function E1(n, e, t) {
  return i;
  function i(s) {
    return n.enter("reference"), n.enter("referenceMarker"), n.consume(s), n.exit("referenceMarker"), r;
  }
  function r(s) {
    return s === 93 ? (n.enter("referenceMarker"), n.consume(s), n.exit("referenceMarker"), n.exit("reference"), e) : t(s);
  }
}
const _1 = {
  name: "labelStartImage",
  resolveAll: xh.resolveAll,
  tokenize: Q1
};
function Q1(n, e, t) {
  const i = this;
  return r;
  function r(a) {
    return n.enter("labelImage"), n.enter("labelImageMarker"), n.consume(a), n.exit("labelImageMarker"), s;
  }
  function s(a) {
    return a === 91 ? (n.enter("labelMarker"), n.consume(a), n.exit("labelMarker"), n.exit("labelImage"), o) : t(a);
  }
  function o(a) {
    return a === 94 && "_hiddenFootnoteSupport" in i.parser.constructs ? t(a) : e(a);
  }
}
const C1 = {
  name: "labelStartLink",
  resolveAll: xh.resolveAll,
  tokenize: T1
};
function T1(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return n.enter("labelLink"), n.enter("labelMarker"), n.consume(o), n.exit("labelMarker"), n.exit("labelLink"), s;
  }
  function s(o) {
    return o === 94 && "_hiddenFootnoteSupport" in i.parser.constructs ? t(o) : e(o);
  }
}
const Tl = {
  name: "lineEnding",
  tokenize: P1
};
function P1(n, e) {
  return t;
  function t(i) {
    return n.enter("lineEnding"), n.consume(i), n.exit("lineEnding"), Pe(n, e, "linePrefix");
  }
}
const ta = {
  name: "thematicBreak",
  tokenize: A1
};
function A1(n, e, t) {
  let i = 0, r;
  return s;
  function s(c) {
    return n.enter("thematicBreak"), o(c);
  }
  function o(c) {
    return r = c, a(c);
  }
  function a(c) {
    return c === r ? (n.enter("thematicBreakSequence"), l(c)) : i >= 3 && (c === null || ue(c)) ? (n.exit("thematicBreak"), e(c)) : t(c);
  }
  function l(c) {
    return c === r ? (n.consume(c), i++, l) : (n.exit("thematicBreakSequence"), Se(c) ? Pe(n, a, "whitespace")(c) : a(c));
  }
}
const Mt = {
  continuation: {
    tokenize: N1
  },
  exit: L1,
  name: "list",
  tokenize: M1
}, $1 = {
  partial: !0,
  tokenize: D1
}, R1 = {
  partial: !0,
  tokenize: I1
};
function M1(n, e, t) {
  const i = this, r = i.events[i.events.length - 1];
  let s = r && r[1].type === "linePrefix" ? r[2].sliceSerialize(r[1], !0).length : 0, o = 0;
  return a;
  function a(d) {
    const p = i.containerState.type || (d === 42 || d === 43 || d === 45 ? "listUnordered" : "listOrdered");
    if (p === "listUnordered" ? !i.containerState.marker || d === i.containerState.marker : zc(d)) {
      if (i.containerState.type || (i.containerState.type = p, n.enter(p, {
        _container: !0
      })), p === "listUnordered")
        return n.enter("listItemPrefix"), d === 42 || d === 45 ? n.check(ta, t, c)(d) : c(d);
      if (!i.interrupt || d === 49)
        return n.enter("listItemPrefix"), n.enter("listItemValue"), l(d);
    }
    return t(d);
  }
  function l(d) {
    return zc(d) && ++o < 10 ? (n.consume(d), l) : (!i.interrupt || o < 2) && (i.containerState.marker ? d === i.containerState.marker : d === 41 || d === 46) ? (n.exit("listItemValue"), c(d)) : t(d);
  }
  function c(d) {
    return n.enter("listItemMarker"), n.consume(d), n.exit("listItemMarker"), i.containerState.marker = i.containerState.marker || d, n.check(
      js,
      // Can’t be empty when interrupting.
      i.interrupt ? t : u,
      n.attempt($1, f, h)
    );
  }
  function u(d) {
    return i.containerState.initialBlankLine = !0, s++, f(d);
  }
  function h(d) {
    return Se(d) ? (n.enter("listItemPrefixWhitespace"), n.consume(d), n.exit("listItemPrefixWhitespace"), f) : t(d);
  }
  function f(d) {
    return i.containerState.size = s + i.sliceSerialize(n.exit("listItemPrefix"), !0).length, e(d);
  }
}
function N1(n, e, t) {
  const i = this;
  return i.containerState._closeFlow = void 0, n.check(js, r, s);
  function r(a) {
    return i.containerState.furtherBlankLines = i.containerState.furtherBlankLines || i.containerState.initialBlankLine, Pe(n, e, "listItemIndent", i.containerState.size + 1)(a);
  }
  function s(a) {
    return i.containerState.furtherBlankLines || !Se(a) ? (i.containerState.furtherBlankLines = void 0, i.containerState.initialBlankLine = void 0, o(a)) : (i.containerState.furtherBlankLines = void 0, i.containerState.initialBlankLine = void 0, n.attempt(R1, e, o)(a));
  }
  function o(a) {
    return i.containerState._closeFlow = !0, i.interrupt = void 0, Pe(n, n.attempt(Mt, e, t), "linePrefix", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(a);
  }
}
function I1(n, e, t) {
  const i = this;
  return Pe(n, r, "listItemIndent", i.containerState.size + 1);
  function r(s) {
    const o = i.events[i.events.length - 1];
    return o && o[1].type === "listItemIndent" && o[2].sliceSerialize(o[1], !0).length === i.containerState.size ? e(s) : t(s);
  }
}
function L1(n) {
  n.exit(this.containerState.type);
}
function D1(n, e, t) {
  const i = this;
  return Pe(n, r, "listItemPrefixWhitespace", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 5);
  function r(s) {
    const o = i.events[i.events.length - 1];
    return !Se(s) && o && o[1].type === "listItemPrefixWhitespace" ? e(s) : t(s);
  }
}
const cd = {
  name: "setextUnderline",
  resolveTo: B1,
  tokenize: z1
};
function B1(n, e) {
  let t = n.length, i, r, s;
  for (; t--; )
    if (n[t][0] === "enter") {
      if (n[t][1].type === "content") {
        i = t;
        break;
      }
      n[t][1].type === "paragraph" && (r = t);
    } else
      n[t][1].type === "content" && n.splice(t, 1), !s && n[t][1].type === "definition" && (s = t);
  const o = {
    type: "setextHeading",
    start: {
      ...n[i][1].start
    },
    end: {
      ...n[n.length - 1][1].end
    }
  };
  return n[r][1].type = "setextHeadingText", s ? (n.splice(r, 0, ["enter", o, e]), n.splice(s + 1, 0, ["exit", n[i][1], e]), n[i][1].end = {
    ...n[s][1].end
  }) : n[i][1] = o, n.push(["exit", o, e]), n;
}
function z1(n, e, t) {
  const i = this;
  let r;
  return s;
  function s(c) {
    let u = i.events.length, h;
    for (; u--; )
      if (i.events[u][1].type !== "lineEnding" && i.events[u][1].type !== "linePrefix" && i.events[u][1].type !== "content") {
        h = i.events[u][1].type === "paragraph";
        break;
      }
    return !i.parser.lazy[i.now().line] && (i.interrupt || h) ? (n.enter("setextHeadingLine"), r = c, o(c)) : t(c);
  }
  function o(c) {
    return n.enter("setextHeadingLineSequence"), a(c);
  }
  function a(c) {
    return c === r ? (n.consume(c), a) : (n.exit("setextHeadingLineSequence"), Se(c) ? Pe(n, l, "lineSuffix")(c) : l(c));
  }
  function l(c) {
    return c === null || ue(c) ? (n.exit("setextHeadingLine"), e(c)) : t(c);
  }
}
const Z1 = {
  tokenize: X1
};
function X1(n) {
  const e = this, t = n.attempt(
    // Try to parse a blank line.
    js,
    i,
    // Try to parse initial flow (essentially, only code).
    n.attempt(this.parser.constructs.flowInitial, r, Pe(n, n.attempt(this.parser.constructs.flow, r, n.attempt(Uw, r)), "linePrefix"))
  );
  return t;
  function i(s) {
    if (s === null) {
      n.consume(s);
      return;
    }
    return n.enter("lineEndingBlank"), n.consume(s), n.exit("lineEndingBlank"), e.currentConstruct = void 0, t;
  }
  function r(s) {
    if (s === null) {
      n.consume(s);
      return;
    }
    return n.enter("lineEnding"), n.consume(s), n.exit("lineEnding"), e.currentConstruct = void 0, t;
  }
}
const q1 = {
  resolveAll: hO()
}, V1 = uO("string"), Y1 = uO("text");
function uO(n) {
  return {
    resolveAll: hO(n === "text" ? F1 : void 0),
    tokenize: e
  };
  function e(t) {
    const i = this, r = this.parser.constructs[n], s = t.attempt(r, o, a);
    return o;
    function o(u) {
      return c(u) ? s(u) : a(u);
    }
    function a(u) {
      if (u === null) {
        t.consume(u);
        return;
      }
      return t.enter("data"), t.consume(u), l;
    }
    function l(u) {
      return c(u) ? (t.exit("data"), s(u)) : (t.consume(u), l);
    }
    function c(u) {
      if (u === null)
        return !0;
      const h = r[u];
      let f = -1;
      if (h)
        for (; ++f < h.length; ) {
          const d = h[f];
          if (!d.previous || d.previous.call(i, i.previous))
            return !0;
        }
      return !1;
    }
  }
}
function hO(n) {
  return e;
  function e(t, i) {
    let r = -1, s;
    for (; ++r <= t.length; )
      s === void 0 ? t[r] && t[r][1].type === "data" && (s = r, r++) : (!t[r] || t[r][1].type !== "data") && (r !== s + 2 && (t[s][1].end = t[r - 1][1].end, t.splice(s + 2, r - s - 2), r = s + 2), s = void 0);
    return n ? n(t, i) : t;
  }
}
function F1(n, e) {
  let t = 0;
  for (; ++t <= n.length; )
    if ((t === n.length || n[t][1].type === "lineEnding") && n[t - 1][1].type === "data") {
      const i = n[t - 1][1], r = e.sliceStream(i);
      let s = r.length, o = -1, a = 0, l;
      for (; s--; ) {
        const c = r[s];
        if (typeof c == "string") {
          for (o = c.length; c.charCodeAt(o - 1) === 32; )
            a++, o--;
          if (o) break;
          o = -1;
        } else if (c === -2)
          l = !0, a++;
        else if (c !== -1) {
          s++;
          break;
        }
      }
      if (e._contentTypeTextTrailing && t === n.length && (a = 0), a) {
        const c = {
          type: t === n.length || l || a < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: s ? o : i.start._bufferIndex + o,
            _index: i.start._index + s,
            line: i.end.line,
            column: i.end.column - a,
            offset: i.end.offset - a
          },
          end: {
            ...i.end
          }
        };
        i.end = {
          ...c.start
        }, i.start.offset === i.end.offset ? Object.assign(i, c) : (n.splice(t, 0, ["enter", c, e], ["exit", c, e]), t += 2);
      }
      t++;
    }
  return n;
}
const U1 = {
  42: Mt,
  43: Mt,
  45: Mt,
  48: Mt,
  49: Mt,
  50: Mt,
  51: Mt,
  52: Mt,
  53: Mt,
  54: Mt,
  55: Mt,
  56: Mt,
  57: Mt,
  62: iO
}, G1 = {
  91: Kw
}, W1 = {
  [-2]: Cl,
  [-1]: Cl,
  32: Cl
}, j1 = {
  35: r1,
  42: ta,
  45: [cd, ta],
  60: l1,
  61: cd,
  95: ta,
  96: ad,
  126: ad
}, H1 = {
  38: sO,
  92: rO
}, K1 = {
  [-5]: Tl,
  [-4]: Tl,
  [-3]: Tl,
  33: _1,
  38: sO,
  42: Zc,
  60: [Cw, m1],
  91: C1,
  92: [n1, rO],
  93: xh,
  95: Zc,
  96: Zw
}, J1 = {
  null: [Zc, q1]
}, ev = {
  null: [42, 95]
}, tv = {
  null: []
}, nv = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  attentionMarkers: ev,
  contentInitial: G1,
  disable: tv,
  document: U1,
  flow: j1,
  flowInitial: W1,
  insideSpan: J1,
  string: H1,
  text: K1
}, Symbol.toStringTag, { value: "Module" }));
function iv(n, e, t) {
  let i = {
    _bufferIndex: -1,
    _index: 0,
    line: t && t.line || 1,
    column: t && t.column || 1,
    offset: t && t.offset || 0
  };
  const r = {}, s = [];
  let o = [], a = [];
  const l = {
    attempt: C(v),
    check: C(x),
    consume: y,
    enter: S,
    exit: _,
    interrupt: C(x, {
      interrupt: !0
    })
  }, c = {
    code: null,
    containerState: {},
    defineSkip: m,
    events: [],
    now: p,
    parser: n,
    previous: null,
    sliceSerialize: f,
    sliceStream: d,
    write: h
  };
  let u = e.tokenize.call(c, l);
  return e.resolveAll && s.push(e), c;
  function h(M) {
    return o = rn(o, M), O(), o[o.length - 1] !== null ? [] : (T(e, 0), c.events = nl(s, c.events, c), c.events);
  }
  function f(M, R) {
    return sv(d(M), R);
  }
  function d(M) {
    return rv(o, M);
  }
  function p() {
    const {
      _bufferIndex: M,
      _index: R,
      line: L,
      column: P,
      offset: $
    } = i;
    return {
      _bufferIndex: M,
      _index: R,
      line: L,
      column: P,
      offset: $
    };
  }
  function m(M) {
    r[M.line] = M.column, Q();
  }
  function O() {
    let M;
    for (; i._index < o.length; ) {
      const R = o[i._index];
      if (typeof R == "string")
        for (M = i._index, i._bufferIndex < 0 && (i._bufferIndex = 0); i._index === M && i._bufferIndex < R.length; )
          g(R.charCodeAt(i._bufferIndex));
      else
        g(R);
    }
  }
  function g(M) {
    u = u(M);
  }
  function y(M) {
    ue(M) ? (i.line++, i.column = 1, i.offset += M === -3 ? 2 : 1, Q()) : M !== -1 && (i.column++, i.offset++), i._bufferIndex < 0 ? i._index++ : (i._bufferIndex++, i._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
    // strings.
    /** @type {string} */
    o[i._index].length && (i._bufferIndex = -1, i._index++)), c.previous = M;
  }
  function S(M, R) {
    const L = R || {};
    return L.type = M, L.start = p(), c.events.push(["enter", L, c]), a.push(L), L;
  }
  function _(M) {
    const R = a.pop();
    return R.end = p(), c.events.push(["exit", R, c]), R;
  }
  function v(M, R) {
    T(M, R.from);
  }
  function x(M, R) {
    R.restore();
  }
  function C(M, R) {
    return L;
    function L(P, $, Y) {
      let ie, D, ee, b;
      return Array.isArray(P) ? (
        /* c8 ignore next 1 */
        j(P)
      ) : "tokenize" in P ? (
        // Looks like a construct.
        j([
          /** @type {Construct} */
          P
        ])
      ) : Z(P);
      function Z(Ee) {
        return _e;
        function _e(Ae) {
          const Ke = Ae !== null && Ee[Ae], je = Ae !== null && Ee.null, Rt = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(Ke) ? Ke : Ke ? [Ke] : [],
            ...Array.isArray(je) ? je : je ? [je] : []
          ];
          return j(Rt)(Ae);
        }
      }
      function j(Ee) {
        return ie = Ee, D = 0, Ee.length === 0 ? Y : w(Ee[D]);
      }
      function w(Ee) {
        return _e;
        function _e(Ae) {
          return b = A(), ee = Ee, Ee.partial || (c.currentConstruct = Ee), Ee.name && c.parser.constructs.disable.null.includes(Ee.name) ? ve() : Ee.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            R ? Object.assign(Object.create(c), R) : c,
            l,
            he,
            ve
          )(Ae);
        }
      }
      function he(Ee) {
        return M(ee, b), $;
      }
      function ve(Ee) {
        return b.restore(), ++D < ie.length ? w(ie[D]) : Y;
      }
    }
  }
  function T(M, R) {
    M.resolveAll && !s.includes(M) && s.push(M), M.resolve && en(c.events, R, c.events.length - R, M.resolve(c.events.slice(R), c)), M.resolveTo && (c.events = M.resolveTo(c.events, c));
  }
  function A() {
    const M = p(), R = c.previous, L = c.currentConstruct, P = c.events.length, $ = Array.from(a);
    return {
      from: P,
      restore: Y
    };
    function Y() {
      i = M, c.previous = R, c.currentConstruct = L, c.events.length = P, a = $, Q();
    }
  }
  function Q() {
    i.line in r && i.column < 2 && (i.column = r[i.line], i.offset += r[i.line] - 1);
  }
}
function rv(n, e) {
  const t = e.start._index, i = e.start._bufferIndex, r = e.end._index, s = e.end._bufferIndex;
  let o;
  if (t === r)
    o = [n[t].slice(i, s)];
  else {
    if (o = n.slice(t, r), i > -1) {
      const a = o[0];
      typeof a == "string" ? o[0] = a.slice(i) : o.shift();
    }
    s > 0 && o.push(n[r].slice(0, s));
  }
  return o;
}
function sv(n, e) {
  let t = -1;
  const i = [];
  let r;
  for (; ++t < n.length; ) {
    const s = n[t];
    let o;
    if (typeof s == "string")
      o = s;
    else switch (s) {
      case -5: {
        o = "\r";
        break;
      }
      case -4: {
        o = `
`;
        break;
      }
      case -3: {
        o = `\r
`;
        break;
      }
      case -2: {
        o = e ? " " : "	";
        break;
      }
      case -1: {
        if (!e && r) continue;
        o = " ";
        break;
      }
      default:
        o = String.fromCharCode(s);
    }
    r = s === -2, i.push(o);
  }
  return i.join("");
}
function ov(n) {
  const i = {
    constructs: (
      /** @type {FullNormalizedExtension} */
      tO([nv, ...(n || {}).extensions || []])
    ),
    content: r(kw),
    defined: [],
    document: r(ww),
    flow: r(Z1),
    lazy: {},
    string: r(V1),
    text: r(Y1)
  };
  return i;
  function r(s) {
    return o;
    function o(a) {
      return iv(i, s, a);
    }
  }
}
function av(n) {
  for (; !oO(n); )
    ;
  return n;
}
const ud = /[\0\t\n\r]/g;
function lv() {
  let n = 1, e = "", t = !0, i;
  return r;
  function r(s, o, a) {
    const l = [];
    let c, u, h, f, d;
    for (s = e + (typeof s == "string" ? s.toString() : new TextDecoder(o || void 0).decode(s)), h = 0, e = "", t && (s.charCodeAt(0) === 65279 && h++, t = void 0); h < s.length; ) {
      if (ud.lastIndex = h, c = ud.exec(s), f = c && c.index !== void 0 ? c.index : s.length, d = s.charCodeAt(f), !c) {
        e = s.slice(h);
        break;
      }
      if (d === 10 && h === f && i)
        l.push(-3), i = void 0;
      else
        switch (i && (l.push(-5), i = void 0), h < f && (l.push(s.slice(h, f)), n += f - h), d) {
          case 0: {
            l.push(65533), n++;
            break;
          }
          case 9: {
            for (u = Math.ceil(n / 4) * 4, l.push(-2); n++ < u; ) l.push(-1);
            break;
          }
          case 10: {
            l.push(-4), n = 1;
            break;
          }
          default:
            i = !0, n = 1;
        }
      h = f + 1;
    }
    return a && (i && l.push(-5), e && l.push(e), l.push(null)), l;
  }
}
const cv = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function uv(n) {
  return n.replace(cv, hv);
}
function hv(n, e, t) {
  if (e)
    return e;
  if (t.charCodeAt(0) === 35) {
    const r = t.charCodeAt(1), s = r === 120 || r === 88;
    return nO(t.slice(s ? 2 : 1), s ? 16 : 10);
  }
  return yh(t) || n;
}
const fO = {}.hasOwnProperty;
function fv(n, e, t) {
  return typeof e != "string" && (t = e, e = void 0), dv(t)(av(ov(t).document().write(lv()(n, e, !0))));
}
function dv(n) {
  const e = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: s(Fi),
      autolinkProtocol: A,
      autolinkEmail: A,
      atxHeading: s(Yi),
      blockQuote: s(je),
      characterEscape: A,
      characterReference: A,
      codeFenced: s(Rt),
      codeFencedFenceInfo: o,
      codeFencedFenceMeta: o,
      codeIndented: s(Rt, o),
      codeText: s(xn, o),
      codeTextData: A,
      data: A,
      codeFlowValue: A,
      definition: s(Zr),
      definitionDestinationString: o,
      definitionLabelString: o,
      definitionTitleString: o,
      emphasis: s(Xr),
      hardBreakEscape: s(Re),
      hardBreakTrailing: s(Re),
      htmlFlow: s(qn, o),
      htmlFlowData: A,
      htmlText: s(qn, o),
      htmlTextData: A,
      image: s(Vn),
      label: o,
      link: s(Fi),
      listItem: s(Ol),
      listItemValue: f,
      listOrdered: s(qr, h),
      listUnordered: s(qr),
      paragraph: s(bl),
      reference: w,
      referenceString: o,
      resourceDestinationString: o,
      resourceTitleString: o,
      setextHeading: s(Yi),
      strong: s(uo),
      thematicBreak: s(ho)
    },
    exit: {
      atxHeading: l(),
      atxHeadingSequence: v,
      autolink: l(),
      autolinkEmail: Ke,
      autolinkProtocol: Ae,
      blockQuote: l(),
      characterEscapeValue: Q,
      characterReferenceMarkerHexadecimal: ve,
      characterReferenceMarkerNumeric: ve,
      characterReferenceValue: Ee,
      characterReference: _e,
      codeFenced: l(O),
      codeFencedFence: m,
      codeFencedFenceInfo: d,
      codeFencedFenceMeta: p,
      codeFlowValue: Q,
      codeIndented: l(g),
      codeText: l($),
      codeTextData: Q,
      data: Q,
      definition: l(),
      definitionDestinationString: _,
      definitionLabelString: y,
      definitionTitleString: S,
      emphasis: l(),
      hardBreakEscape: l(R),
      hardBreakTrailing: l(R),
      htmlFlow: l(L),
      htmlFlowData: Q,
      htmlText: l(P),
      htmlTextData: Q,
      image: l(ie),
      label: ee,
      labelText: D,
      lineEnding: M,
      link: l(Y),
      listItem: l(),
      listOrdered: l(),
      listUnordered: l(),
      paragraph: l(),
      referenceString: he,
      resourceDestinationString: b,
      resourceTitleString: Z,
      resource: j,
      setextHeading: l(T),
      setextHeadingLineSequence: C,
      setextHeadingText: x,
      strong: l(),
      thematicBreak: l()
    }
  };
  dO(e, (n || {}).mdastExtensions || []);
  const t = {};
  return i;
  function i(N) {
    let V = {
      type: "root",
      children: []
    };
    const fe = {
      stack: [V],
      tokenStack: [],
      config: e,
      enter: a,
      exit: c,
      buffer: o,
      resume: u,
      data: t
    }, ke = [];
    let Ne = -1;
    for (; ++Ne < N.length; )
      if (N[Ne][1].type === "listOrdered" || N[Ne][1].type === "listUnordered")
        if (N[Ne][0] === "enter")
          ke.push(Ne);
        else {
          const qt = ke.pop();
          Ne = r(N, qt, Ne);
        }
    for (Ne = -1; ++Ne < N.length; ) {
      const qt = e[N[Ne][0]];
      fO.call(qt, N[Ne][1].type) && qt[N[Ne][1].type].call(Object.assign({
        sliceSerialize: N[Ne][2].sliceSerialize
      }, fe), N[Ne][1]);
    }
    if (fe.tokenStack.length > 0) {
      const qt = fe.tokenStack[fe.tokenStack.length - 1];
      (qt[1] || hd).call(fe, void 0, qt[0]);
    }
    for (V.position = {
      start: ci(N.length > 0 ? N[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: ci(N.length > 0 ? N[N.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    }, Ne = -1; ++Ne < e.transforms.length; )
      V = e.transforms[Ne](V) || V;
    return V;
  }
  function r(N, V, fe) {
    let ke = V - 1, Ne = -1, qt = !1, Fn, dn, si, Ei;
    for (; ++ke <= fe; ) {
      const Ct = N[ke];
      switch (Ct[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          Ct[0] === "enter" ? Ne++ : Ne--, Ei = void 0;
          break;
        }
        case "lineEndingBlank": {
          Ct[0] === "enter" && (Fn && !Ei && !Ne && !si && (si = ke), Ei = void 0);
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace":
          break;
        default:
          Ei = void 0;
      }
      if (!Ne && Ct[0] === "enter" && Ct[1].type === "listItemPrefix" || Ne === -1 && Ct[0] === "exit" && (Ct[1].type === "listUnordered" || Ct[1].type === "listOrdered")) {
        if (Fn) {
          let oi = ke;
          for (dn = void 0; oi--; ) {
            const Vt = N[oi];
            if (Vt[1].type === "lineEnding" || Vt[1].type === "lineEndingBlank") {
              if (Vt[0] === "exit") continue;
              dn && (N[dn][1].type = "lineEndingBlank", qt = !0), Vt[1].type = "lineEnding", dn = oi;
            } else if (!(Vt[1].type === "linePrefix" || Vt[1].type === "blockQuotePrefix" || Vt[1].type === "blockQuotePrefixWhitespace" || Vt[1].type === "blockQuoteMarker" || Vt[1].type === "listItemIndent")) break;
          }
          si && (!dn || si < dn) && (Fn._spread = !0), Fn.end = Object.assign({}, dn ? N[dn][1].start : Ct[1].end), N.splice(dn || ke, 0, ["exit", Fn, Ct[2]]), ke++, fe++;
        }
        if (Ct[1].type === "listItemPrefix") {
          const oi = {
            type: "listItem",
            _spread: !1,
            start: Object.assign({}, Ct[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          Fn = oi, N.splice(ke, 0, ["enter", oi, Ct[2]]), ke++, fe++, si = void 0, Ei = !0;
        }
      }
    }
    return N[V][1]._spread = qt, fe;
  }
  function s(N, V) {
    return fe;
    function fe(ke) {
      a.call(this, N(ke), ke), V && V.call(this, ke);
    }
  }
  function o() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function a(N, V, fe) {
    this.stack[this.stack.length - 1].children.push(N), this.stack.push(N), this.tokenStack.push([V, fe || void 0]), N.position = {
      start: ci(V.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function l(N) {
    return V;
    function V(fe) {
      N && N.call(this, fe), c.call(this, fe);
    }
  }
  function c(N, V) {
    const fe = this.stack.pop(), ke = this.tokenStack.pop();
    if (ke)
      ke[0].type !== N.type && (V ? V.call(this, N, ke[0]) : (ke[1] || hd).call(this, N, ke[0]));
    else throw new Error("Cannot close `" + N.type + "` (" + ds({
      start: N.start,
      end: N.end
    }) + "): it’s not open");
    fe.position.end = ci(N.end);
  }
  function u() {
    return bh(this.stack.pop());
  }
  function h() {
    this.data.expectingFirstListItemValue = !0;
  }
  function f(N) {
    if (this.data.expectingFirstListItemValue) {
      const V = this.stack[this.stack.length - 2];
      V.start = Number.parseInt(this.sliceSerialize(N), 10), this.data.expectingFirstListItemValue = void 0;
    }
  }
  function d() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.lang = N;
  }
  function p() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.meta = N;
  }
  function m() {
    this.data.flowCodeInside || (this.buffer(), this.data.flowCodeInside = !0);
  }
  function O() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.value = N.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), this.data.flowCodeInside = void 0;
  }
  function g() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.value = N.replace(/(\r?\n|\r)$/g, "");
  }
  function y(N) {
    const V = this.resume(), fe = this.stack[this.stack.length - 1];
    fe.label = V, fe.identifier = mn(this.sliceSerialize(N)).toLowerCase();
  }
  function S() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.title = N;
  }
  function _() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.url = N;
  }
  function v(N) {
    const V = this.stack[this.stack.length - 1];
    if (!V.depth) {
      const fe = this.sliceSerialize(N).length;
      V.depth = fe;
    }
  }
  function x() {
    this.data.setextHeadingSlurpLineEnding = !0;
  }
  function C(N) {
    const V = this.stack[this.stack.length - 1];
    V.depth = this.sliceSerialize(N).codePointAt(0) === 61 ? 1 : 2;
  }
  function T() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function A(N) {
    const fe = this.stack[this.stack.length - 1].children;
    let ke = fe[fe.length - 1];
    (!ke || ke.type !== "text") && (ke = Yn(), ke.position = {
      start: ci(N.start),
      // @ts-expect-error: we’ll add `end` later.
      end: void 0
    }, fe.push(ke)), this.stack.push(ke);
  }
  function Q(N) {
    const V = this.stack.pop();
    V.value += this.sliceSerialize(N), V.position.end = ci(N.end);
  }
  function M(N) {
    const V = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const fe = V.children[V.children.length - 1];
      fe.position.end = ci(N.end), this.data.atHardBreak = void 0;
      return;
    }
    !this.data.setextHeadingSlurpLineEnding && e.canContainEols.includes(V.type) && (A.call(this, N), Q.call(this, N));
  }
  function R() {
    this.data.atHardBreak = !0;
  }
  function L() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.value = N;
  }
  function P() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.value = N;
  }
  function $() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.value = N;
  }
  function Y() {
    const N = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const V = this.data.referenceType || "shortcut";
      N.type += "Reference", N.referenceType = V, delete N.url, delete N.title;
    } else
      delete N.identifier, delete N.label;
    this.data.referenceType = void 0;
  }
  function ie() {
    const N = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const V = this.data.referenceType || "shortcut";
      N.type += "Reference", N.referenceType = V, delete N.url, delete N.title;
    } else
      delete N.identifier, delete N.label;
    this.data.referenceType = void 0;
  }
  function D(N) {
    const V = this.sliceSerialize(N), fe = this.stack[this.stack.length - 2];
    fe.label = uv(V), fe.identifier = mn(V).toLowerCase();
  }
  function ee() {
    const N = this.stack[this.stack.length - 1], V = this.resume(), fe = this.stack[this.stack.length - 1];
    if (this.data.inReference = !0, fe.type === "link") {
      const ke = N.children;
      fe.children = ke;
    } else
      fe.alt = V;
  }
  function b() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.url = N;
  }
  function Z() {
    const N = this.resume(), V = this.stack[this.stack.length - 1];
    V.title = N;
  }
  function j() {
    this.data.inReference = void 0;
  }
  function w() {
    this.data.referenceType = "collapsed";
  }
  function he(N) {
    const V = this.resume(), fe = this.stack[this.stack.length - 1];
    fe.label = V, fe.identifier = mn(this.sliceSerialize(N)).toLowerCase(), this.data.referenceType = "full";
  }
  function ve(N) {
    this.data.characterReferenceType = N.type;
  }
  function Ee(N) {
    const V = this.sliceSerialize(N), fe = this.data.characterReferenceType;
    let ke;
    fe ? (ke = nO(V, fe === "characterReferenceMarkerNumeric" ? 10 : 16), this.data.characterReferenceType = void 0) : ke = yh(V);
    const Ne = this.stack[this.stack.length - 1];
    Ne.value += ke;
  }
  function _e(N) {
    const V = this.stack.pop();
    V.position.end = ci(N.end);
  }
  function Ae(N) {
    Q.call(this, N);
    const V = this.stack[this.stack.length - 1];
    V.url = this.sliceSerialize(N);
  }
  function Ke(N) {
    Q.call(this, N);
    const V = this.stack[this.stack.length - 1];
    V.url = "mailto:" + this.sliceSerialize(N);
  }
  function je() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function Rt() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function xn() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function Zr() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function Xr() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function Yi() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function Re() {
    return {
      type: "break"
    };
  }
  function qn() {
    return {
      type: "html",
      value: ""
    };
  }
  function Vn() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function Fi() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function qr(N) {
    return {
      type: "list",
      ordered: N.type === "listOrdered",
      start: null,
      spread: N._spread,
      children: []
    };
  }
  function Ol(N) {
    return {
      type: "listItem",
      spread: N._spread,
      checked: null,
      children: []
    };
  }
  function bl() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function uo() {
    return {
      type: "strong",
      children: []
    };
  }
  function Yn() {
    return {
      type: "text",
      value: ""
    };
  }
  function ho() {
    return {
      type: "thematicBreak"
    };
  }
}
function ci(n) {
  return {
    line: n.line,
    column: n.column,
    offset: n.offset
  };
}
function dO(n, e) {
  let t = -1;
  for (; ++t < e.length; ) {
    const i = e[t];
    Array.isArray(i) ? dO(n, i) : pv(n, i);
  }
}
function pv(n, e) {
  let t;
  for (t in e)
    if (fO.call(e, t))
      switch (t) {
        case "canContainEols": {
          const i = e[t];
          i && n[t].push(...i);
          break;
        }
        case "transforms": {
          const i = e[t];
          i && n[t].push(...i);
          break;
        }
        case "enter":
        case "exit": {
          const i = e[t];
          i && Object.assign(n[t], i);
          break;
        }
      }
}
function hd(n, e) {
  throw n ? new Error("Cannot close `" + n.type + "` (" + ds({
    start: n.start,
    end: n.end
  }) + "): a different token (`" + e.type + "`, " + ds({
    start: e.start,
    end: e.end
  }) + ") is open") : new Error("Cannot close document, a token (`" + e.type + "`, " + ds({
    start: e.start,
    end: e.end
  }) + ") is still open");
}
function mv(n) {
  const e = this;
  e.parser = t;
  function t(i) {
    return fv(i, {
      ...e.data("settings"),
      ...n,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: e.data("micromarkExtensions") || [],
      mdastExtensions: e.data("fromMarkdownExtensions") || []
    });
  }
}
function gv(n, e) {
  const t = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: n.wrap(n.all(e), !0)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Ov(n, e) {
  const t = { type: "element", tagName: "br", properties: {}, children: [] };
  return n.patch(e, t), [n.applyData(e, t), { type: "text", value: `
` }];
}
function bv(n, e) {
  const t = e.value ? e.value + `
` : "", i = {};
  e.lang && (i.className = ["language-" + e.lang]);
  let r = {
    type: "element",
    tagName: "code",
    properties: i,
    children: [{ type: "text", value: t }]
  };
  return e.meta && (r.data = { meta: e.meta }), n.patch(e, r), r = n.applyData(e, r), r = { type: "element", tagName: "pre", properties: {}, children: [r] }, n.patch(e, r), r;
}
function yv(n, e) {
  const t = {
    type: "element",
    tagName: "del",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function xv(n, e) {
  const t = {
    type: "element",
    tagName: "em",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function kv(n, e) {
  const t = typeof n.options.clobberPrefix == "string" ? n.options.clobberPrefix : "user-content-", i = String(e.identifier).toUpperCase(), r = Tr(i.toLowerCase()), s = n.footnoteOrder.indexOf(i);
  let o, a = n.footnoteCounts.get(i);
  a === void 0 ? (a = 0, n.footnoteOrder.push(i), o = n.footnoteOrder.length) : o = s + 1, a += 1, n.footnoteCounts.set(i, a);
  const l = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + t + "fn-" + r,
      id: t + "fnref-" + r + (a > 1 ? "-" + a : ""),
      dataFootnoteRef: !0,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(o) }]
  };
  n.patch(e, l);
  const c = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [l]
  };
  return n.patch(e, c), n.applyData(e, c);
}
function Sv(n, e) {
  const t = {
    type: "element",
    tagName: "h" + e.depth,
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function wv(n, e) {
  if (n.options.allowDangerousHtml) {
    const t = { type: "raw", value: e.value };
    return n.patch(e, t), n.applyData(e, t);
  }
}
function pO(n, e) {
  const t = e.referenceType;
  let i = "]";
  if (t === "collapsed" ? i += "[]" : t === "full" && (i += "[" + (e.label || e.identifier) + "]"), e.type === "imageReference")
    return [{ type: "text", value: "![" + e.alt + i }];
  const r = n.all(e), s = r[0];
  s && s.type === "text" ? s.value = "[" + s.value : r.unshift({ type: "text", value: "[" });
  const o = r[r.length - 1];
  return o && o.type === "text" ? o.value += i : r.push({ type: "text", value: i }), r;
}
function vv(n, e) {
  const t = String(e.identifier).toUpperCase(), i = n.definitionById.get(t);
  if (!i)
    return pO(n, e);
  const r = { src: Tr(i.url || ""), alt: e.alt };
  i.title !== null && i.title !== void 0 && (r.title = i.title);
  const s = { type: "element", tagName: "img", properties: r, children: [] };
  return n.patch(e, s), n.applyData(e, s);
}
function Ev(n, e) {
  const t = { src: Tr(e.url) };
  e.alt !== null && e.alt !== void 0 && (t.alt = e.alt), e.title !== null && e.title !== void 0 && (t.title = e.title);
  const i = { type: "element", tagName: "img", properties: t, children: [] };
  return n.patch(e, i), n.applyData(e, i);
}
function _v(n, e) {
  const t = { type: "text", value: e.value.replace(/\r?\n|\r/g, " ") };
  n.patch(e, t);
  const i = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [t]
  };
  return n.patch(e, i), n.applyData(e, i);
}
function Qv(n, e) {
  const t = String(e.identifier).toUpperCase(), i = n.definitionById.get(t);
  if (!i)
    return pO(n, e);
  const r = { href: Tr(i.url || "") };
  i.title !== null && i.title !== void 0 && (r.title = i.title);
  const s = {
    type: "element",
    tagName: "a",
    properties: r,
    children: n.all(e)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function Cv(n, e) {
  const t = { href: Tr(e.url) };
  e.title !== null && e.title !== void 0 && (t.title = e.title);
  const i = {
    type: "element",
    tagName: "a",
    properties: t,
    children: n.all(e)
  };
  return n.patch(e, i), n.applyData(e, i);
}
function Tv(n, e, t) {
  const i = n.all(e), r = t ? Pv(t) : mO(e), s = {}, o = [];
  if (typeof e.checked == "boolean") {
    const u = i[0];
    let h;
    u && u.type === "element" && u.tagName === "p" ? h = u : (h = { type: "element", tagName: "p", properties: {}, children: [] }, i.unshift(h)), h.children.length > 0 && h.children.unshift({ type: "text", value: " " }), h.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: e.checked, disabled: !0 },
      children: []
    }), s.className = ["task-list-item"];
  }
  let a = -1;
  for (; ++a < i.length; ) {
    const u = i[a];
    (r || a !== 0 || u.type !== "element" || u.tagName !== "p") && o.push({ type: "text", value: `
` }), u.type === "element" && u.tagName === "p" && !r ? o.push(...u.children) : o.push(u);
  }
  const l = i[i.length - 1];
  l && (r || l.type !== "element" || l.tagName !== "p") && o.push({ type: "text", value: `
` });
  const c = { type: "element", tagName: "li", properties: s, children: o };
  return n.patch(e, c), n.applyData(e, c);
}
function Pv(n) {
  let e = !1;
  if (n.type === "list") {
    e = n.spread || !1;
    const t = n.children;
    let i = -1;
    for (; !e && ++i < t.length; )
      e = mO(t[i]);
  }
  return e;
}
function mO(n) {
  const e = n.spread;
  return e ?? n.children.length > 1;
}
function Av(n, e) {
  const t = {}, i = n.all(e);
  let r = -1;
  for (typeof e.start == "number" && e.start !== 1 && (t.start = e.start); ++r < i.length; ) {
    const o = i[r];
    if (o.type === "element" && o.tagName === "li" && o.properties && Array.isArray(o.properties.className) && o.properties.className.includes("task-list-item")) {
      t.className = ["contains-task-list"];
      break;
    }
  }
  const s = {
    type: "element",
    tagName: e.ordered ? "ol" : "ul",
    properties: t,
    children: n.wrap(i, !0)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function $v(n, e) {
  const t = {
    type: "element",
    tagName: "p",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Rv(n, e) {
  const t = { type: "root", children: n.wrap(n.all(e)) };
  return n.patch(e, t), n.applyData(e, t);
}
function Mv(n, e) {
  const t = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Nv(n, e) {
  const t = n.all(e), i = t.shift(), r = [];
  if (i) {
    const o = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: n.wrap([i], !0)
    };
    n.patch(e.children[0], o), r.push(o);
  }
  if (t.length > 0) {
    const o = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: n.wrap(t, !0)
    }, a = ph(e.children[1]), l = Gg(e.children[e.children.length - 1]);
    a && l && (o.position = { start: a, end: l }), r.push(o);
  }
  const s = {
    type: "element",
    tagName: "table",
    properties: {},
    children: n.wrap(r, !0)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function Iv(n, e, t) {
  const i = t ? t.children : void 0, s = (i ? i.indexOf(e) : 1) === 0 ? "th" : "td", o = t && t.type === "table" ? t.align : void 0, a = o ? o.length : e.children.length;
  let l = -1;
  const c = [];
  for (; ++l < a; ) {
    const h = e.children[l], f = {}, d = o ? o[l] : void 0;
    d && (f.align = d);
    let p = { type: "element", tagName: s, properties: f, children: [] };
    h && (p.children = n.all(h), n.patch(h, p), p = n.applyData(h, p)), c.push(p);
  }
  const u = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: n.wrap(c, !0)
  };
  return n.patch(e, u), n.applyData(e, u);
}
function Lv(n, e) {
  const t = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
const fd = 9, dd = 32;
function Dv(n) {
  const e = String(n), t = /\r?\n|\r/g;
  let i = t.exec(e), r = 0;
  const s = [];
  for (; i; )
    s.push(
      pd(e.slice(r, i.index), r > 0, !0),
      i[0]
    ), r = i.index + i[0].length, i = t.exec(e);
  return s.push(pd(e.slice(r), r > 0, !1)), s.join("");
}
function pd(n, e, t) {
  let i = 0, r = n.length;
  if (e) {
    let s = n.codePointAt(i);
    for (; s === fd || s === dd; )
      i++, s = n.codePointAt(i);
  }
  if (t) {
    let s = n.codePointAt(r - 1);
    for (; s === fd || s === dd; )
      r--, s = n.codePointAt(r - 1);
  }
  return r > i ? n.slice(i, r) : "";
}
function Bv(n, e) {
  const t = { type: "text", value: Dv(String(e.value)) };
  return n.patch(e, t), n.applyData(e, t);
}
function zv(n, e) {
  const t = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  return n.patch(e, t), n.applyData(e, t);
}
const Zv = {
  blockquote: gv,
  break: Ov,
  code: bv,
  delete: yv,
  emphasis: xv,
  footnoteReference: kv,
  heading: Sv,
  html: wv,
  imageReference: vv,
  image: Ev,
  inlineCode: _v,
  linkReference: Qv,
  link: Cv,
  listItem: Tv,
  list: Av,
  paragraph: $v,
  // @ts-expect-error: root is different, but hard to type.
  root: Rv,
  strong: Mv,
  table: Nv,
  tableCell: Lv,
  tableRow: Iv,
  text: Bv,
  thematicBreak: zv,
  toml: yo,
  yaml: yo,
  definition: yo,
  footnoteDefinition: yo
};
function yo() {
}
const gO = -1, il = 0, ms = 1, ya = 2, kh = 3, Sh = 4, wh = 5, vh = 6, OO = 7, bO = 8, md = typeof self == "object" ? self : globalThis, Xv = (n, e) => {
  const t = (r, s) => (n.set(s, r), r), i = (r) => {
    if (n.has(r))
      return n.get(r);
    const [s, o] = e[r];
    switch (s) {
      case il:
      case gO:
        return t(o, r);
      case ms: {
        const a = t([], r);
        for (const l of o)
          a.push(i(l));
        return a;
      }
      case ya: {
        const a = t({}, r);
        for (const [l, c] of o)
          a[i(l)] = i(c);
        return a;
      }
      case kh:
        return t(new Date(o), r);
      case Sh: {
        const { source: a, flags: l } = o;
        return t(new RegExp(a, l), r);
      }
      case wh: {
        const a = t(/* @__PURE__ */ new Map(), r);
        for (const [l, c] of o)
          a.set(i(l), i(c));
        return a;
      }
      case vh: {
        const a = t(/* @__PURE__ */ new Set(), r);
        for (const l of o)
          a.add(i(l));
        return a;
      }
      case OO: {
        const { name: a, message: l } = o;
        return t(new md[a](l), r);
      }
      case bO:
        return t(BigInt(o), r);
      case "BigInt":
        return t(Object(BigInt(o)), r);
      case "ArrayBuffer":
        return t(new Uint8Array(o).buffer, o);
      case "DataView": {
        const { buffer: a } = new Uint8Array(o);
        return t(new DataView(a), o);
      }
    }
    return t(new md[s](o), r);
  };
  return i;
}, gd = (n) => Xv(/* @__PURE__ */ new Map(), n)(0), Wi = "", { toString: qv } = {}, { keys: Vv } = Object, jr = (n) => {
  const e = typeof n;
  if (e !== "object" || !n)
    return [il, e];
  const t = qv.call(n).slice(8, -1);
  switch (t) {
    case "Array":
      return [ms, Wi];
    case "Object":
      return [ya, Wi];
    case "Date":
      return [kh, Wi];
    case "RegExp":
      return [Sh, Wi];
    case "Map":
      return [wh, Wi];
    case "Set":
      return [vh, Wi];
    case "DataView":
      return [ms, t];
  }
  return t.includes("Array") ? [ms, t] : t.includes("Error") ? [OO, t] : [ya, t];
}, xo = ([n, e]) => n === il && (e === "function" || e === "symbol"), Yv = (n, e, t, i) => {
  const r = (o, a) => {
    const l = i.push(o) - 1;
    return t.set(a, l), l;
  }, s = (o) => {
    if (t.has(o))
      return t.get(o);
    let [a, l] = jr(o);
    switch (a) {
      case il: {
        let u = o;
        switch (l) {
          case "bigint":
            a = bO, u = o.toString();
            break;
          case "function":
          case "symbol":
            if (n)
              throw new TypeError("unable to serialize " + l);
            u = null;
            break;
          case "undefined":
            return r([gO], o);
        }
        return r([a, u], o);
      }
      case ms: {
        if (l) {
          let f = o;
          return l === "DataView" ? f = new Uint8Array(o.buffer) : l === "ArrayBuffer" && (f = new Uint8Array(o)), r([l, [...f]], o);
        }
        const u = [], h = r([a, u], o);
        for (const f of o)
          u.push(s(f));
        return h;
      }
      case ya: {
        if (l)
          switch (l) {
            case "BigInt":
              return r([l, o.toString()], o);
            case "Boolean":
            case "Number":
            case "String":
              return r([l, o.valueOf()], o);
          }
        if (e && "toJSON" in o)
          return s(o.toJSON());
        const u = [], h = r([a, u], o);
        for (const f of Vv(o))
          (n || !xo(jr(o[f]))) && u.push([s(f), s(o[f])]);
        return h;
      }
      case kh:
        return r([a, o.toISOString()], o);
      case Sh: {
        const { source: u, flags: h } = o;
        return r([a, { source: u, flags: h }], o);
      }
      case wh: {
        const u = [], h = r([a, u], o);
        for (const [f, d] of o)
          (n || !(xo(jr(f)) || xo(jr(d)))) && u.push([s(f), s(d)]);
        return h;
      }
      case vh: {
        const u = [], h = r([a, u], o);
        for (const f of o)
          (n || !xo(jr(f))) && u.push(s(f));
        return h;
      }
    }
    const { message: c } = o;
    return r([a, { name: l, message: c }], o);
  };
  return s;
}, Od = (n, { json: e, lossy: t } = {}) => {
  const i = [];
  return Yv(!(e || t), !!e, /* @__PURE__ */ new Map(), i)(n), i;
}, xa = typeof structuredClone == "function" ? (
  /* c8 ignore start */
  (n, e) => e && ("json" in e || "lossy" in e) ? gd(Od(n, e)) : structuredClone(n)
) : (n, e) => gd(Od(n, e));
function Fv(n, e) {
  const t = [{ type: "text", value: "↩" }];
  return e > 1 && t.push({
    type: "element",
    tagName: "sup",
    properties: {},
    children: [{ type: "text", value: String(e) }]
  }), t;
}
function Uv(n, e) {
  return "Back to reference " + (n + 1) + (e > 1 ? "-" + e : "");
}
function Gv(n) {
  const e = typeof n.options.clobberPrefix == "string" ? n.options.clobberPrefix : "user-content-", t = n.options.footnoteBackContent || Fv, i = n.options.footnoteBackLabel || Uv, r = n.options.footnoteLabel || "Footnotes", s = n.options.footnoteLabelTagName || "h2", o = n.options.footnoteLabelProperties || {
    className: ["sr-only"]
  }, a = [];
  let l = -1;
  for (; ++l < n.footnoteOrder.length; ) {
    const c = n.footnoteById.get(
      n.footnoteOrder[l]
    );
    if (!c)
      continue;
    const u = n.all(c), h = String(c.identifier).toUpperCase(), f = Tr(h.toLowerCase());
    let d = 0;
    const p = [], m = n.footnoteCounts.get(h);
    for (; m !== void 0 && ++d <= m; ) {
      p.length > 0 && p.push({ type: "text", value: " " });
      let y = typeof t == "string" ? t : t(l, d);
      typeof y == "string" && (y = { type: "text", value: y }), p.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + e + "fnref-" + f + (d > 1 ? "-" + d : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof i == "string" ? i : i(l, d),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(y) ? y : [y]
      });
    }
    const O = u[u.length - 1];
    if (O && O.type === "element" && O.tagName === "p") {
      const y = O.children[O.children.length - 1];
      y && y.type === "text" ? y.value += " " : O.children.push({ type: "text", value: " " }), O.children.push(...p);
    } else
      u.push(...p);
    const g = {
      type: "element",
      tagName: "li",
      properties: { id: e + "fn-" + f },
      children: n.wrap(u, !0)
    };
    n.patch(c, g), a.push(g);
  }
  if (a.length !== 0)
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: !0, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: s,
          properties: {
            ...xa(o),
            id: "footnote-label"
          },
          children: [{ type: "text", value: r }]
        },
        { type: "text", value: `
` },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: n.wrap(a, !0)
        },
        { type: "text", value: `
` }
      ]
    };
}
const Hs = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(n) {
    if (n == null)
      return Kv;
    if (typeof n == "function")
      return rl(n);
    if (typeof n == "object")
      return Array.isArray(n) ? Wv(n) : jv(n);
    if (typeof n == "string")
      return Hv(n);
    throw new Error("Expected function, string, or object as test");
  }
);
function Wv(n) {
  const e = [];
  let t = -1;
  for (; ++t < n.length; )
    e[t] = Hs(n[t]);
  return rl(i);
  function i(...r) {
    let s = -1;
    for (; ++s < e.length; )
      if (e[s].apply(this, r)) return !0;
    return !1;
  }
}
function jv(n) {
  const e = (
    /** @type {Record<string, unknown>} */
    n
  );
  return rl(t);
  function t(i) {
    const r = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      i
    );
    let s;
    for (s in n)
      if (r[s] !== e[s]) return !1;
    return !0;
  }
}
function Hv(n) {
  return rl(e);
  function e(t) {
    return t && t.type === n;
  }
}
function rl(n) {
  return e;
  function e(t, i, r) {
    return !!(Jv(t) && n.call(
      this,
      t,
      typeof i == "number" ? i : void 0,
      r || void 0
    ));
  }
}
function Kv() {
  return !0;
}
function Jv(n) {
  return n !== null && typeof n == "object" && "type" in n;
}
const yO = [], eE = !0, Xc = !1, tE = "skip";
function xO(n, e, t, i) {
  let r;
  typeof e == "function" && typeof t != "function" ? (i = t, t = e) : r = e;
  const s = Hs(r), o = i ? -1 : 1;
  a(n, void 0, [])();
  function a(l, c, u) {
    const h = (
      /** @type {Record<string, unknown>} */
      l && typeof l == "object" ? l : {}
    );
    if (typeof h.type == "string") {
      const d = (
        // `hast`
        typeof h.tagName == "string" ? h.tagName : (
          // `xast`
          typeof h.name == "string" ? h.name : void 0
        )
      );
      Object.defineProperty(f, "name", {
        value: "node (" + (l.type + (d ? "<" + d + ">" : "")) + ")"
      });
    }
    return f;
    function f() {
      let d = yO, p, m, O;
      if ((!e || s(l, c, u[u.length - 1] || void 0)) && (d = nE(t(l, u)), d[0] === Xc))
        return d;
      if ("children" in l && l.children) {
        const g = (
          /** @type {UnistParent} */
          l
        );
        if (g.children && d[0] !== tE)
          for (m = (i ? g.children.length : -1) + o, O = u.concat(g); m > -1 && m < g.children.length; ) {
            const y = g.children[m];
            if (p = a(y, m, O)(), p[0] === Xc)
              return p;
            m = typeof p[1] == "number" ? p[1] : m + o;
          }
      }
      return d;
    }
  }
}
function nE(n) {
  return Array.isArray(n) ? n : typeof n == "number" ? [eE, n] : n == null ? yO : [n];
}
function Pr(n, e, t, i) {
  let r, s, o;
  typeof e == "function" && typeof t != "function" ? (s = void 0, o = e, r = t) : (s = e, o = t, r = i), xO(n, s, a, r);
  function a(l, c) {
    const u = c[c.length - 1], h = u ? u.children.indexOf(l) : void 0;
    return o(l, h, u);
  }
}
const qc = {}.hasOwnProperty, iE = {};
function rE(n, e) {
  const t = e || iE, i = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map(), o = { ...Zv, ...t.handlers }, a = {
    all: c,
    applyData: oE,
    definitionById: i,
    footnoteById: r,
    footnoteCounts: s,
    footnoteOrder: [],
    handlers: o,
    one: l,
    options: t,
    patch: sE,
    wrap: lE
  };
  return Pr(n, function(u) {
    if (u.type === "definition" || u.type === "footnoteDefinition") {
      const h = u.type === "definition" ? i : r, f = String(u.identifier).toUpperCase();
      h.has(f) || h.set(f, u);
    }
  }), a;
  function l(u, h) {
    const f = u.type, d = a.handlers[f];
    if (qc.call(a.handlers, f) && d)
      return d(a, u, h);
    if (a.options.passThrough && a.options.passThrough.includes(f)) {
      if ("children" in u) {
        const { children: m, ...O } = u, g = xa(O);
        return g.children = a.all(u), g;
      }
      return xa(u);
    }
    return (a.options.unknownHandler || aE)(a, u, h);
  }
  function c(u) {
    const h = [];
    if ("children" in u) {
      const f = u.children;
      let d = -1;
      for (; ++d < f.length; ) {
        const p = a.one(f[d], u);
        if (p) {
          if (d && f[d - 1].type === "break" && (!Array.isArray(p) && p.type === "text" && (p.value = bd(p.value)), !Array.isArray(p) && p.type === "element")) {
            const m = p.children[0];
            m && m.type === "text" && (m.value = bd(m.value));
          }
          Array.isArray(p) ? h.push(...p) : h.push(p);
        }
      }
    }
    return h;
  }
}
function sE(n, e) {
  n.position && (e.position = US(n));
}
function oE(n, e) {
  let t = e;
  if (n && n.data) {
    const i = n.data.hName, r = n.data.hChildren, s = n.data.hProperties;
    if (typeof i == "string")
      if (t.type === "element")
        t.tagName = i;
      else {
        const o = "children" in t ? t.children : [t];
        t = { type: "element", tagName: i, properties: {}, children: o };
      }
    t.type === "element" && s && Object.assign(t.properties, xa(s)), "children" in t && t.children && r !== null && r !== void 0 && (t.children = r);
  }
  return t;
}
function aE(n, e) {
  const t = e.data || {}, i = "value" in e && !(qc.call(t, "hProperties") || qc.call(t, "hChildren")) ? { type: "text", value: e.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, i), n.applyData(e, i);
}
function lE(n, e) {
  const t = [];
  let i = -1;
  for (e && t.push({ type: "text", value: `
` }); ++i < n.length; )
    i && t.push({ type: "text", value: `
` }), t.push(n[i]);
  return e && n.length > 0 && t.push({ type: "text", value: `
` }), t;
}
function bd(n) {
  let e = 0, t = n.charCodeAt(e);
  for (; t === 9 || t === 32; )
    e++, t = n.charCodeAt(e);
  return n.slice(e);
}
function yd(n, e) {
  const t = rE(n, e), i = t.one(n, void 0), r = Gv(t), s = Array.isArray(i) ? { type: "root", children: i } : i || { type: "root", children: [] };
  return r && s.children.push({ type: "text", value: `
` }, r), s;
}
function cE(n, e) {
  return n && "run" in n ? async function(t, i) {
    const r = (
      /** @type {HastRoot} */
      yd(t, { file: i, ...e })
    );
    await n.run(r, i);
  } : function(t, i) {
    return (
      /** @type {HastRoot} */
      yd(t, { file: i, ...n || e })
    );
  };
}
function xd(n) {
  if (n)
    throw n;
}
var Pl, kd;
function uE() {
  if (kd) return Pl;
  kd = 1;
  var n = Object.prototype.hasOwnProperty, e = Object.prototype.toString, t = Object.defineProperty, i = Object.getOwnPropertyDescriptor, r = function(c) {
    return typeof Array.isArray == "function" ? Array.isArray(c) : e.call(c) === "[object Array]";
  }, s = function(c) {
    if (!c || e.call(c) !== "[object Object]")
      return !1;
    var u = n.call(c, "constructor"), h = c.constructor && c.constructor.prototype && n.call(c.constructor.prototype, "isPrototypeOf");
    if (c.constructor && !u && !h)
      return !1;
    var f;
    for (f in c)
      ;
    return typeof f > "u" || n.call(c, f);
  }, o = function(c, u) {
    t && u.name === "__proto__" ? t(c, u.name, {
      enumerable: !0,
      configurable: !0,
      value: u.newValue,
      writable: !0
    }) : c[u.name] = u.newValue;
  }, a = function(c, u) {
    if (u === "__proto__")
      if (n.call(c, u)) {
        if (i)
          return i(c, u).value;
      } else return;
    return c[u];
  };
  return Pl = function l() {
    var c, u, h, f, d, p, m = arguments[0], O = 1, g = arguments.length, y = !1;
    for (typeof m == "boolean" && (y = m, m = arguments[1] || {}, O = 2), (m == null || typeof m != "object" && typeof m != "function") && (m = {}); O < g; ++O)
      if (c = arguments[O], c != null)
        for (u in c)
          h = a(m, u), f = a(c, u), m !== f && (y && f && (s(f) || (d = r(f))) ? (d ? (d = !1, p = h && r(h) ? h : []) : p = h && s(h) ? h : {}, o(m, { name: u, newValue: l(y, p, f) })) : typeof f < "u" && o(m, { name: u, newValue: f }));
    return m;
  }, Pl;
}
var hE = uE();
const Al = /* @__PURE__ */ hh(hE);
function Vc(n) {
  if (typeof n != "object" || n === null)
    return !1;
  const e = Object.getPrototypeOf(n);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in n) && !(Symbol.iterator in n);
}
function fE() {
  const n = [], e = { run: t, use: i };
  return e;
  function t(...r) {
    let s = -1;
    const o = r.pop();
    if (typeof o != "function")
      throw new TypeError("Expected function as last argument, not " + o);
    a(null, ...r);
    function a(l, ...c) {
      const u = n[++s];
      let h = -1;
      if (l) {
        o(l);
        return;
      }
      for (; ++h < r.length; )
        (c[h] === null || c[h] === void 0) && (c[h] = r[h]);
      r = c, u ? dE(u, a)(...c) : o(null, ...c);
    }
  }
  function i(r) {
    if (typeof r != "function")
      throw new TypeError(
        "Expected `middelware` to be a function, not " + r
      );
    return n.push(r), e;
  }
}
function dE(n, e) {
  let t;
  return i;
  function i(...o) {
    const a = n.length > o.length;
    let l;
    a && o.push(r);
    try {
      l = n.apply(this, o);
    } catch (c) {
      const u = (
        /** @type {Error} */
        c
      );
      if (a && t)
        throw u;
      return r(u);
    }
    a || (l && l.then && typeof l.then == "function" ? l.then(s, r) : l instanceof Error ? r(l) : s(l));
  }
  function r(o, ...a) {
    t || (t = !0, e(o, ...a));
  }
  function s(o) {
    r(null, o);
  }
}
const Cn = { basename: pE, dirname: mE, extname: gE, join: OE, sep: "/" };
function pE(n, e) {
  if (e !== void 0 && typeof e != "string")
    throw new TypeError('"ext" argument must be a string');
  Ks(n);
  let t = 0, i = -1, r = n.length, s;
  if (e === void 0 || e.length === 0 || e.length > n.length) {
    for (; r--; )
      if (n.codePointAt(r) === 47) {
        if (s) {
          t = r + 1;
          break;
        }
      } else i < 0 && (s = !0, i = r + 1);
    return i < 0 ? "" : n.slice(t, i);
  }
  if (e === n)
    return "";
  let o = -1, a = e.length - 1;
  for (; r--; )
    if (n.codePointAt(r) === 47) {
      if (s) {
        t = r + 1;
        break;
      }
    } else
      o < 0 && (s = !0, o = r + 1), a > -1 && (n.codePointAt(r) === e.codePointAt(a--) ? a < 0 && (i = r) : (a = -1, i = o));
  return t === i ? i = o : i < 0 && (i = n.length), n.slice(t, i);
}
function mE(n) {
  if (Ks(n), n.length === 0)
    return ".";
  let e = -1, t = n.length, i;
  for (; --t; )
    if (n.codePointAt(t) === 47) {
      if (i) {
        e = t;
        break;
      }
    } else i || (i = !0);
  return e < 0 ? n.codePointAt(0) === 47 ? "/" : "." : e === 1 && n.codePointAt(0) === 47 ? "//" : n.slice(0, e);
}
function gE(n) {
  Ks(n);
  let e = n.length, t = -1, i = 0, r = -1, s = 0, o;
  for (; e--; ) {
    const a = n.codePointAt(e);
    if (a === 47) {
      if (o) {
        i = e + 1;
        break;
      }
      continue;
    }
    t < 0 && (o = !0, t = e + 1), a === 46 ? r < 0 ? r = e : s !== 1 && (s = 1) : r > -1 && (s = -1);
  }
  return r < 0 || t < 0 || // We saw a non-dot character immediately before the dot.
  s === 0 || // The (right-most) trimmed path component is exactly `..`.
  s === 1 && r === t - 1 && r === i + 1 ? "" : n.slice(r, t);
}
function OE(...n) {
  let e = -1, t;
  for (; ++e < n.length; )
    Ks(n[e]), n[e] && (t = t === void 0 ? n[e] : t + "/" + n[e]);
  return t === void 0 ? "." : bE(t);
}
function bE(n) {
  Ks(n);
  const e = n.codePointAt(0) === 47;
  let t = yE(n, !e);
  return t.length === 0 && !e && (t = "."), t.length > 0 && n.codePointAt(n.length - 1) === 47 && (t += "/"), e ? "/" + t : t;
}
function yE(n, e) {
  let t = "", i = 0, r = -1, s = 0, o = -1, a, l;
  for (; ++o <= n.length; ) {
    if (o < n.length)
      a = n.codePointAt(o);
    else {
      if (a === 47)
        break;
      a = 47;
    }
    if (a === 47) {
      if (!(r === o - 1 || s === 1)) if (r !== o - 1 && s === 2) {
        if (t.length < 2 || i !== 2 || t.codePointAt(t.length - 1) !== 46 || t.codePointAt(t.length - 2) !== 46) {
          if (t.length > 2) {
            if (l = t.lastIndexOf("/"), l !== t.length - 1) {
              l < 0 ? (t = "", i = 0) : (t = t.slice(0, l), i = t.length - 1 - t.lastIndexOf("/")), r = o, s = 0;
              continue;
            }
          } else if (t.length > 0) {
            t = "", i = 0, r = o, s = 0;
            continue;
          }
        }
        e && (t = t.length > 0 ? t + "/.." : "..", i = 2);
      } else
        t.length > 0 ? t += "/" + n.slice(r + 1, o) : t = n.slice(r + 1, o), i = o - r - 1;
      r = o, s = 0;
    } else a === 46 && s > -1 ? s++ : s = -1;
  }
  return t;
}
function Ks(n) {
  if (typeof n != "string")
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(n)
    );
}
const xE = { cwd: kE };
function kE() {
  return "/";
}
function Yc(n) {
  return !!(n !== null && typeof n == "object" && "href" in n && n.href && "protocol" in n && n.protocol && // @ts-expect-error: indexing is fine.
  n.auth === void 0);
}
function SE(n) {
  if (typeof n == "string")
    n = new URL(n);
  else if (!Yc(n)) {
    const e = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + n + "`"
    );
    throw e.code = "ERR_INVALID_ARG_TYPE", e;
  }
  if (n.protocol !== "file:") {
    const e = new TypeError("The URL must be of scheme file");
    throw e.code = "ERR_INVALID_URL_SCHEME", e;
  }
  return wE(n);
}
function wE(n) {
  if (n.hostname !== "") {
    const i = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    throw i.code = "ERR_INVALID_FILE_URL_HOST", i;
  }
  const e = n.pathname;
  let t = -1;
  for (; ++t < e.length; )
    if (e.codePointAt(t) === 37 && e.codePointAt(t + 1) === 50) {
      const i = e.codePointAt(t + 2);
      if (i === 70 || i === 102) {
        const r = new TypeError(
          "File URL path must not include encoded / characters"
        );
        throw r.code = "ERR_INVALID_FILE_URL_PATH", r;
      }
    }
  return decodeURIComponent(e);
}
const $l = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
class kO {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(e) {
    let t;
    e ? Yc(e) ? t = { path: e } : typeof e == "string" || vE(e) ? t = { value: e } : t = e : t = {}, this.cwd = "cwd" in t ? "" : xE.cwd(), this.data = {}, this.history = [], this.messages = [], this.value, this.map, this.result, this.stored;
    let i = -1;
    for (; ++i < $l.length; ) {
      const s = $l[i];
      s in t && t[s] !== void 0 && t[s] !== null && (this[s] = s === "history" ? [...t[s]] : t[s]);
    }
    let r;
    for (r in t)
      $l.includes(r) || (this[r] = t[r]);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path == "string" ? Cn.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(e) {
    Ml(e, "basename"), Rl(e, "basename"), this.path = Cn.join(this.dirname || "", e);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path == "string" ? Cn.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(e) {
    Sd(this.basename, "dirname"), this.path = Cn.join(e || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path == "string" ? Cn.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(e) {
    if (Rl(e, "extname"), Sd(this.dirname, "extname"), e) {
      if (e.codePointAt(0) !== 46)
        throw new Error("`extname` must start with `.`");
      if (e.includes(".", 1))
        throw new Error("`extname` cannot contain multiple dots");
    }
    this.path = Cn.join(this.dirname, this.stem + (e || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(e) {
    Yc(e) && (e = SE(e)), Ml(e, "path"), this.path !== e && this.history.push(e);
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path == "string" ? Cn.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(e) {
    Ml(e, "stem"), Rl(e, "stem"), this.path = Cn.join(this.dirname || "", e + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(e, t, i) {
    const r = this.message(e, t, i);
    throw r.fatal = !0, r;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(e, t, i) {
    const r = this.message(e, t, i);
    return r.fatal = void 0, r;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(e, t, i) {
    const r = new _t(
      // @ts-expect-error: the overloads are fine.
      e,
      t,
      i
    );
    return this.path && (r.name = this.path + ":" + r.name, r.file = this.path), r.fatal = !1, this.messages.push(r), r;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(e) {
    return this.value === void 0 ? "" : typeof this.value == "string" ? this.value : new TextDecoder(e || void 0).decode(this.value);
  }
}
function Rl(n, e) {
  if (n && n.includes(Cn.sep))
    throw new Error(
      "`" + e + "` cannot be a path: did not expect `" + Cn.sep + "`"
    );
}
function Ml(n, e) {
  if (!n)
    throw new Error("`" + e + "` cannot be empty");
}
function Sd(n, e) {
  if (!n)
    throw new Error("Setting `" + e + "` requires `path` to be set too");
}
function vE(n) {
  return !!(n && typeof n == "object" && "byteLength" in n && "byteOffset" in n);
}
const EE = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(n) {
    const i = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      this.constructor.prototype
    ), r = i[n], s = function() {
      return r.apply(s, arguments);
    };
    return Object.setPrototypeOf(s, i), s;
  }
), _E = {}.hasOwnProperty;
class Eh extends EE {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy"), this.Compiler = void 0, this.Parser = void 0, this.attachers = [], this.compiler = void 0, this.freezeIndex = -1, this.frozen = void 0, this.namespace = {}, this.parser = void 0, this.transformers = fE();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const e = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new Eh()
    );
    let t = -1;
    for (; ++t < this.attachers.length; ) {
      const i = this.attachers[t];
      e.use(...i);
    }
    return e.data(Al(!0, {}, this.namespace)), e;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(e, t) {
    return typeof e == "string" ? arguments.length === 2 ? (Ll("data", this.frozen), this.namespace[e] = t, this) : _E.call(this.namespace, e) && this.namespace[e] || void 0 : e ? (Ll("data", this.frozen), this.namespace = e, this) : this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen)
      return this;
    const e = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    for (; ++this.freezeIndex < this.attachers.length; ) {
      const [t, ...i] = this.attachers[this.freezeIndex];
      if (i[0] === !1)
        continue;
      i[0] === !0 && (i[0] = void 0);
      const r = t.call(e, ...i);
      typeof r == "function" && this.transformers.use(r);
    }
    return this.frozen = !0, this.freezeIndex = Number.POSITIVE_INFINITY, this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(e) {
    this.freeze();
    const t = ko(e), i = this.parser || this.Parser;
    return Nl("parse", i), i(String(t), t);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(e, t) {
    const i = this;
    return this.freeze(), Nl("process", this.parser || this.Parser), Il("process", this.compiler || this.Compiler), t ? r(void 0, t) : new Promise(r);
    function r(s, o) {
      const a = ko(e), l = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        i.parse(a)
      );
      i.run(l, a, function(u, h, f) {
        if (u || !h || !f)
          return c(u);
        const d = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          h
        ), p = i.stringify(d, f);
        TE(p) ? f.value = p : f.result = p, c(
          u,
          /** @type {VFileWithOutput<CompileResult>} */
          f
        );
      });
      function c(u, h) {
        u || !h ? o(u) : s ? s(h) : t(void 0, h);
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(e) {
    let t = !1, i;
    return this.freeze(), Nl("processSync", this.parser || this.Parser), Il("processSync", this.compiler || this.Compiler), this.process(e, r), vd("processSync", "process", t), i;
    function r(s, o) {
      t = !0, xd(s), i = o;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(e, t, i) {
    wd(e), this.freeze();
    const r = this.transformers;
    return !i && typeof t == "function" && (i = t, t = void 0), i ? s(void 0, i) : new Promise(s);
    function s(o, a) {
      const l = ko(t);
      r.run(e, l, c);
      function c(u, h, f) {
        const d = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          h || e
        );
        u ? a(u) : o ? o(d) : i(void 0, d, f);
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(e, t) {
    let i = !1, r;
    return this.run(e, t, s), vd("runSync", "run", i), r;
    function s(o, a) {
      xd(o), r = a, i = !0;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(e, t) {
    this.freeze();
    const i = ko(t), r = this.compiler || this.Compiler;
    return Il("stringify", r), wd(e), r(e, i);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(e, ...t) {
    const i = this.attachers, r = this.namespace;
    if (Ll("use", this.frozen), e != null) if (typeof e == "function")
      l(e, t);
    else if (typeof e == "object")
      Array.isArray(e) ? a(e) : o(e);
    else
      throw new TypeError("Expected usable value, not `" + e + "`");
    return this;
    function s(c) {
      if (typeof c == "function")
        l(c, []);
      else if (typeof c == "object")
        if (Array.isArray(c)) {
          const [u, ...h] = (
            /** @type {PluginTuple<Array<unknown>>} */
            c
          );
          l(u, h);
        } else
          o(c);
      else
        throw new TypeError("Expected usable value, not `" + c + "`");
    }
    function o(c) {
      if (!("plugins" in c) && !("settings" in c))
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      a(c.plugins), c.settings && (r.settings = Al(!0, r.settings, c.settings));
    }
    function a(c) {
      let u = -1;
      if (c != null) if (Array.isArray(c))
        for (; ++u < c.length; ) {
          const h = c[u];
          s(h);
        }
      else
        throw new TypeError("Expected a list of plugins, not `" + c + "`");
    }
    function l(c, u) {
      let h = -1, f = -1;
      for (; ++h < i.length; )
        if (i[h][0] === c) {
          f = h;
          break;
        }
      if (f === -1)
        i.push([c, ...u]);
      else if (u.length > 0) {
        let [d, ...p] = u;
        const m = i[f][1];
        Vc(m) && Vc(d) && (d = Al(!0, m, d)), i[f] = [c, d, ...p];
      }
    }
  }
}
const QE = new Eh().freeze();
function Nl(n, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + n + "` without `parser`");
}
function Il(n, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + n + "` without `compiler`");
}
function Ll(n, e) {
  if (e)
    throw new Error(
      "Cannot call `" + n + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
}
function wd(n) {
  if (!Vc(n) || typeof n.type != "string")
    throw new TypeError("Expected node, got `" + n + "`");
}
function vd(n, e, t) {
  if (!t)
    throw new Error(
      "`" + n + "` finished async. Use `" + e + "` instead"
    );
}
function ko(n) {
  return CE(n) ? n : new kO(n);
}
function CE(n) {
  return !!(n && typeof n == "object" && "message" in n && "messages" in n);
}
function TE(n) {
  return typeof n == "string" || PE(n);
}
function PE(n) {
  return !!(n && typeof n == "object" && "byteLength" in n && "byteOffset" in n);
}
const AE = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md", Ed = [], _d = { allowDangerousHtml: !0 }, $E = /^(https?|ircs?|mailto|xmpp)$/i, RE = [
  { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
  { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
  {
    from: "allowNode",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowElement"
  },
  {
    from: "allowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowedElements"
  },
  { from: "className", id: "remove-classname" },
  {
    from: "disallowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "disallowedElements"
  },
  { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
  { from: "includeElementIndex", id: "#remove-includeelementindex" },
  {
    from: "includeNodeIndex",
    id: "change-includenodeindex-to-includeelementindex"
  },
  { from: "linkTarget", id: "remove-linktarget" },
  { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
  { from: "rawSourcePos", id: "#remove-rawsourcepos" },
  { from: "renderers", id: "change-renderers-to-components", to: "components" },
  { from: "source", id: "change-source-to-children", to: "children" },
  { from: "sourcePos", id: "#remove-sourcepos" },
  { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
  { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
];
function ME(n) {
  const e = NE(n), t = IE(n);
  return LE(e.runSync(e.parse(t), t), n);
}
function NE(n) {
  const e = n.rehypePlugins || Ed, t = n.remarkPlugins || Ed, i = n.remarkRehypeOptions ? { ...n.remarkRehypeOptions, ..._d } : _d;
  return QE().use(mv).use(t).use(cE, i).use(e);
}
function IE(n) {
  const e = n.children || "", t = new kO();
  return typeof e == "string" && (t.value = e), t;
}
function LE(n, e) {
  const t = e.allowedElements, i = e.allowElement, r = e.components, s = e.disallowedElements, o = e.skipHtml, a = e.unwrapDisallowed, l = e.urlTransform || DE;
  for (const u of RE)
    Object.hasOwn(e, u.from) && ("" + u.from + (u.to ? "use `" + u.to + "` instead" : "remove it") + AE + u.id, void 0);
  return Pr(n, c), KS(n, {
    Fragment: ce.Fragment,
    components: r,
    ignoreInvalidStyle: !0,
    jsx: ce.jsx,
    jsxs: ce.jsxs,
    passKeys: !0,
    passNode: !0
  });
  function c(u, h, f) {
    if (u.type === "raw" && f && typeof h == "number")
      return o ? f.children.splice(h, 1) : f.children[h] = { type: "text", value: u.value }, h;
    if (u.type === "element") {
      let d;
      for (d in Ql)
        if (Object.hasOwn(Ql, d) && Object.hasOwn(u.properties, d)) {
          const p = u.properties[d], m = Ql[d];
          (m === null || m.includes(u.tagName)) && (u.properties[d] = l(String(p || ""), d, u));
        }
    }
    if (u.type === "element") {
      let d = t ? !t.includes(u.tagName) : s ? s.includes(u.tagName) : !1;
      if (!d && i && typeof h == "number" && (d = !i(u, h, f)), d && f && typeof h == "number")
        return a && u.children ? f.children.splice(h, 1, ...u.children) : f.children.splice(h, 1), h;
    }
  }
}
function DE(n) {
  const e = n.indexOf(":"), t = n.indexOf("?"), i = n.indexOf("#"), r = n.indexOf("/");
  return (
    // If there is no protocol, it’s relative.
    e === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    r !== -1 && e > r || t !== -1 && e > t || i !== -1 && e > i || // It is a protocol, it should be allowed.
    $E.test(n.slice(0, e)) ? n : ""
  );
}
const BE = /\?\[([^\]]+)\]/;
function zE() {
  return (n) => {
    Pr(
      n,
      "text",
      (e, t, i) => {
        const r = e.value, s = BE.exec(r);
        if (!s || t === null || i === null) return;
        const o = s.index, a = o + s[0].length, l = [
          {
            type: "text",
            value: r.substring(0, o)
          },
          {
            type: "element",
            data: {
              hName: "custom-button",
              hProperties: { buttonText: s[1] }
            }
          },
          {
            type: "text",
            value: r.substring(a)
          }
        ];
        i.children.splice(t, 1, ...l);
      }
    );
  };
}
function Qd(n, e) {
  if (typeof n == "function")
    return n(e);
  n != null && (n.current = e);
}
function ZE(...n) {
  return (e) => {
    let t = !1;
    const i = n.map((r) => {
      const s = Qd(r, e);
      return !t && typeof s == "function" && (t = !0), s;
    });
    if (t)
      return () => {
        for (let r = 0; r < i.length; r++) {
          const s = i[r];
          typeof s == "function" ? s() : Qd(n[r], null);
        }
      };
  };
}
// @__NO_SIDE_EFFECTS__
function XE(n) {
  const e = /* @__PURE__ */ VE(n), t = It.forwardRef((i, r) => {
    const { children: s, ...o } = i, a = It.Children.toArray(s), l = a.find(FE);
    if (l) {
      const c = l.props.children, u = a.map((h) => h === l ? It.Children.count(c) > 1 ? It.Children.only(null) : It.isValidElement(c) ? c.props.children : null : h);
      return /* @__PURE__ */ ce.jsx(e, { ...o, ref: r, children: It.isValidElement(c) ? It.cloneElement(c, void 0, u) : null });
    }
    return /* @__PURE__ */ ce.jsx(e, { ...o, ref: r, children: s });
  });
  return t.displayName = `${n}.Slot`, t;
}
var qE = /* @__PURE__ */ XE("Slot");
// @__NO_SIDE_EFFECTS__
function VE(n) {
  const e = It.forwardRef((t, i) => {
    const { children: r, ...s } = t;
    if (It.isValidElement(r)) {
      const o = GE(r), a = UE(s, r.props);
      return r.type !== It.Fragment && (a.ref = i ? ZE(i, o) : o), It.cloneElement(r, a);
    }
    return It.Children.count(r) > 1 ? It.Children.only(null) : null;
  });
  return e.displayName = `${n}.SlotClone`, e;
}
var YE = Symbol("radix.slottable");
function FE(n) {
  return It.isValidElement(n) && typeof n.type == "function" && "__radixId" in n.type && n.type.__radixId === YE;
}
function UE(n, e) {
  const t = { ...e };
  for (const i in e) {
    const r = n[i], s = e[i];
    /^on[A-Z]/.test(i) ? r && s ? t[i] = (...a) => {
      const l = s(...a);
      return r(...a), l;
    } : r && (t[i] = r) : i === "style" ? t[i] = { ...r, ...s } : i === "className" && (t[i] = [r, s].filter(Boolean).join(" "));
  }
  return { ...n, ...t };
}
function GE(n) {
  let e = Object.getOwnPropertyDescriptor(n.props, "ref")?.get, t = e && "isReactWarning" in e && e.isReactWarning;
  return t ? n.ref : (e = Object.getOwnPropertyDescriptor(n, "ref")?.get, t = e && "isReactWarning" in e && e.isReactWarning, t ? n.props.ref : n.props.ref || n.ref);
}
function SO(n) {
  var e, t, i = "";
  if (typeof n == "string" || typeof n == "number") i += n;
  else if (typeof n == "object") if (Array.isArray(n)) {
    var r = n.length;
    for (e = 0; e < r; e++) n[e] && (t = SO(n[e])) && (i && (i += " "), i += t);
  } else for (t in n) n[t] && (i && (i += " "), i += t);
  return i;
}
function wO() {
  for (var n, e, t = 0, i = "", r = arguments.length; t < r; t++) (n = arguments[t]) && (e = SO(n)) && (i && (i += " "), i += e);
  return i;
}
const Cd = (n) => typeof n == "boolean" ? `${n}` : n === 0 ? "0" : n, Td = wO, WE = (n, e) => (t) => {
  var i;
  if (e?.variants == null) return Td(n, t?.class, t?.className);
  const { variants: r, defaultVariants: s } = e, o = Object.keys(r).map((c) => {
    const u = t?.[c], h = s?.[c];
    if (u === null) return null;
    const f = Cd(u) || Cd(h);
    return r[c][f];
  }), a = t && Object.entries(t).reduce((c, u) => {
    let [h, f] = u;
    return f === void 0 || (c[h] = f), c;
  }, {}), l = e == null || (i = e.compoundVariants) === null || i === void 0 ? void 0 : i.reduce((c, u) => {
    let { class: h, className: f, ...d } = u;
    return Object.entries(d).every((p) => {
      let [m, O] = p;
      return Array.isArray(O) ? O.includes({
        ...s,
        ...a
      }[m]) : {
        ...s,
        ...a
      }[m] === O;
    }) ? [
      ...c,
      h,
      f
    ] : c;
  }, []);
  return Td(n, o, l, t?.class, t?.className);
}, _h = "-", jE = (n) => {
  const e = KE(n), {
    conflictingClassGroups: t,
    conflictingClassGroupModifiers: i
  } = n;
  return {
    getClassGroupId: (o) => {
      const a = o.split(_h);
      return a[0] === "" && a.length !== 1 && a.shift(), vO(a, e) || HE(o);
    },
    getConflictingClassGroupIds: (o, a) => {
      const l = t[o] || [];
      return a && i[o] ? [...l, ...i[o]] : l;
    }
  };
}, vO = (n, e) => {
  if (n.length === 0)
    return e.classGroupId;
  const t = n[0], i = e.nextPart.get(t), r = i ? vO(n.slice(1), i) : void 0;
  if (r)
    return r;
  if (e.validators.length === 0)
    return;
  const s = n.join(_h);
  return e.validators.find(({
    validator: o
  }) => o(s))?.classGroupId;
}, Pd = /^\[(.+)\]$/, HE = (n) => {
  if (Pd.test(n)) {
    const e = Pd.exec(n)[1], t = e?.substring(0, e.indexOf(":"));
    if (t)
      return "arbitrary.." + t;
  }
}, KE = (n) => {
  const {
    theme: e,
    classGroups: t
  } = n, i = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  for (const r in t)
    Fc(t[r], i, r, e);
  return i;
}, Fc = (n, e, t, i) => {
  n.forEach((r) => {
    if (typeof r == "string") {
      const s = r === "" ? e : Ad(e, r);
      s.classGroupId = t;
      return;
    }
    if (typeof r == "function") {
      if (JE(r)) {
        Fc(r(i), e, t, i);
        return;
      }
      e.validators.push({
        validator: r,
        classGroupId: t
      });
      return;
    }
    Object.entries(r).forEach(([s, o]) => {
      Fc(o, Ad(e, s), t, i);
    });
  });
}, Ad = (n, e) => {
  let t = n;
  return e.split(_h).forEach((i) => {
    t.nextPart.has(i) || t.nextPart.set(i, {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    }), t = t.nextPart.get(i);
  }), t;
}, JE = (n) => n.isThemeGetter, e_ = (n) => {
  if (n < 1)
    return {
      get: () => {
      },
      set: () => {
      }
    };
  let e = 0, t = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map();
  const r = (s, o) => {
    t.set(s, o), e++, e > n && (e = 0, i = t, t = /* @__PURE__ */ new Map());
  };
  return {
    get(s) {
      let o = t.get(s);
      if (o !== void 0)
        return o;
      if ((o = i.get(s)) !== void 0)
        return r(s, o), o;
    },
    set(s, o) {
      t.has(s) ? t.set(s, o) : r(s, o);
    }
  };
}, Uc = "!", Gc = ":", t_ = Gc.length, n_ = (n) => {
  const {
    prefix: e,
    experimentalParseClassName: t
  } = n;
  let i = (r) => {
    const s = [];
    let o = 0, a = 0, l = 0, c;
    for (let p = 0; p < r.length; p++) {
      let m = r[p];
      if (o === 0 && a === 0) {
        if (m === Gc) {
          s.push(r.slice(l, p)), l = p + t_;
          continue;
        }
        if (m === "/") {
          c = p;
          continue;
        }
      }
      m === "[" ? o++ : m === "]" ? o-- : m === "(" ? a++ : m === ")" && a--;
    }
    const u = s.length === 0 ? r : r.substring(l), h = i_(u), f = h !== u, d = c && c > l ? c - l : void 0;
    return {
      modifiers: s,
      hasImportantModifier: f,
      baseClassName: h,
      maybePostfixModifierPosition: d
    };
  };
  if (e) {
    const r = e + Gc, s = i;
    i = (o) => o.startsWith(r) ? s(o.substring(r.length)) : {
      isExternal: !0,
      modifiers: [],
      hasImportantModifier: !1,
      baseClassName: o,
      maybePostfixModifierPosition: void 0
    };
  }
  if (t) {
    const r = i;
    i = (s) => t({
      className: s,
      parseClassName: r
    });
  }
  return i;
}, i_ = (n) => n.endsWith(Uc) ? n.substring(0, n.length - 1) : n.startsWith(Uc) ? n.substring(1) : n, r_ = (n) => {
  const e = Object.fromEntries(n.orderSensitiveModifiers.map((i) => [i, !0]));
  return (i) => {
    if (i.length <= 1)
      return i;
    const r = [];
    let s = [];
    return i.forEach((o) => {
      o[0] === "[" || e[o] ? (r.push(...s.sort(), o), s = []) : s.push(o);
    }), r.push(...s.sort()), r;
  };
}, s_ = (n) => ({
  cache: e_(n.cacheSize),
  parseClassName: n_(n),
  sortModifiers: r_(n),
  ...jE(n)
}), o_ = /\s+/, a_ = (n, e) => {
  const {
    parseClassName: t,
    getClassGroupId: i,
    getConflictingClassGroupIds: r,
    sortModifiers: s
  } = e, o = [], a = n.trim().split(o_);
  let l = "";
  for (let c = a.length - 1; c >= 0; c -= 1) {
    const u = a[c], {
      isExternal: h,
      modifiers: f,
      hasImportantModifier: d,
      baseClassName: p,
      maybePostfixModifierPosition: m
    } = t(u);
    if (h) {
      l = u + (l.length > 0 ? " " + l : l);
      continue;
    }
    let O = !!m, g = i(O ? p.substring(0, m) : p);
    if (!g) {
      if (!O) {
        l = u + (l.length > 0 ? " " + l : l);
        continue;
      }
      if (g = i(p), !g) {
        l = u + (l.length > 0 ? " " + l : l);
        continue;
      }
      O = !1;
    }
    const y = s(f).join(":"), S = d ? y + Uc : y, _ = S + g;
    if (o.includes(_))
      continue;
    o.push(_);
    const v = r(g, O);
    for (let x = 0; x < v.length; ++x) {
      const C = v[x];
      o.push(S + C);
    }
    l = u + (l.length > 0 ? " " + l : l);
  }
  return l;
};
function l_() {
  let n = 0, e, t, i = "";
  for (; n < arguments.length; )
    (e = arguments[n++]) && (t = EO(e)) && (i && (i += " "), i += t);
  return i;
}
const EO = (n) => {
  if (typeof n == "string")
    return n;
  let e, t = "";
  for (let i = 0; i < n.length; i++)
    n[i] && (e = EO(n[i])) && (t && (t += " "), t += e);
  return t;
};
function c_(n, ...e) {
  let t, i, r, s = o;
  function o(l) {
    const c = e.reduce((u, h) => h(u), n());
    return t = s_(c), i = t.cache.get, r = t.cache.set, s = a, a(l);
  }
  function a(l) {
    const c = i(l);
    if (c)
      return c;
    const u = a_(l, t);
    return r(l, u), u;
  }
  return function() {
    return s(l_.apply(null, arguments));
  };
}
const lt = (n) => {
  const e = (t) => t[n] || [];
  return e.isThemeGetter = !0, e;
}, _O = /^\[(?:(\w[\w-]*):)?(.+)\]$/i, QO = /^\((?:(\w[\w-]*):)?(.+)\)$/i, u_ = /^\d+\/\d+$/, h_ = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/, f_ = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/, d_ = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/, p_ = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/, m_ = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/, ji = (n) => u_.test(n), xe = (n) => !!n && !Number.isNaN(Number(n)), ui = (n) => !!n && Number.isInteger(Number(n)), Dl = (n) => n.endsWith("%") && xe(n.slice(0, -1)), Gn = (n) => h_.test(n), g_ = () => !0, O_ = (n) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  f_.test(n) && !d_.test(n)
), CO = () => !1, b_ = (n) => p_.test(n), y_ = (n) => m_.test(n), x_ = (n) => !te(n) && !ne(n), k_ = (n) => Ar(n, AO, CO), te = (n) => _O.test(n), Qi = (n) => Ar(n, $O, O_), Bl = (n) => Ar(n, __, xe), $d = (n) => Ar(n, TO, CO), S_ = (n) => Ar(n, PO, y_), So = (n) => Ar(n, RO, b_), ne = (n) => QO.test(n), Hr = (n) => $r(n, $O), w_ = (n) => $r(n, Q_), Rd = (n) => $r(n, TO), v_ = (n) => $r(n, AO), E_ = (n) => $r(n, PO), wo = (n) => $r(n, RO, !0), Ar = (n, e, t) => {
  const i = _O.exec(n);
  return i ? i[1] ? e(i[1]) : t(i[2]) : !1;
}, $r = (n, e, t = !1) => {
  const i = QO.exec(n);
  return i ? i[1] ? e(i[1]) : t : !1;
}, TO = (n) => n === "position" || n === "percentage", PO = (n) => n === "image" || n === "url", AO = (n) => n === "length" || n === "size" || n === "bg-size", $O = (n) => n === "length", __ = (n) => n === "number", Q_ = (n) => n === "family-name", RO = (n) => n === "shadow", C_ = () => {
  const n = lt("color"), e = lt("font"), t = lt("text"), i = lt("font-weight"), r = lt("tracking"), s = lt("leading"), o = lt("breakpoint"), a = lt("container"), l = lt("spacing"), c = lt("radius"), u = lt("shadow"), h = lt("inset-shadow"), f = lt("text-shadow"), d = lt("drop-shadow"), p = lt("blur"), m = lt("perspective"), O = lt("aspect"), g = lt("ease"), y = lt("animate"), S = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"], _ = () => [
    "center",
    "top",
    "bottom",
    "left",
    "right",
    "top-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-top",
    "top-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-top",
    "bottom-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-bottom",
    "bottom-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-bottom"
  ], v = () => [..._(), ne, te], x = () => ["auto", "hidden", "clip", "visible", "scroll"], C = () => ["auto", "contain", "none"], T = () => [ne, te, l], A = () => [ji, "full", "auto", ...T()], Q = () => [ui, "none", "subgrid", ne, te], M = () => ["auto", {
    span: ["full", ui, ne, te]
  }, ui, ne, te], R = () => [ui, "auto", ne, te], L = () => ["auto", "min", "max", "fr", ne, te], P = () => ["start", "end", "center", "between", "around", "evenly", "stretch", "baseline", "center-safe", "end-safe"], $ = () => ["start", "end", "center", "stretch", "center-safe", "end-safe"], Y = () => ["auto", ...T()], ie = () => [ji, "auto", "full", "dvw", "dvh", "lvw", "lvh", "svw", "svh", "min", "max", "fit", ...T()], D = () => [n, ne, te], ee = () => [..._(), Rd, $d, {
    position: [ne, te]
  }], b = () => ["no-repeat", {
    repeat: ["", "x", "y", "space", "round"]
  }], Z = () => ["auto", "cover", "contain", v_, k_, {
    size: [ne, te]
  }], j = () => [Dl, Hr, Qi], w = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    "full",
    c,
    ne,
    te
  ], he = () => ["", xe, Hr, Qi], ve = () => ["solid", "dashed", "dotted", "double"], Ee = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"], _e = () => [xe, Dl, Rd, $d], Ae = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    p,
    ne,
    te
  ], Ke = () => ["none", xe, ne, te], je = () => ["none", xe, ne, te], Rt = () => [xe, ne, te], xn = () => [ji, "full", ...T()];
  return {
    cacheSize: 500,
    theme: {
      animate: ["spin", "ping", "pulse", "bounce"],
      aspect: ["video"],
      blur: [Gn],
      breakpoint: [Gn],
      color: [g_],
      container: [Gn],
      "drop-shadow": [Gn],
      ease: ["in", "out", "in-out"],
      font: [x_],
      "font-weight": ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black"],
      "inset-shadow": [Gn],
      leading: ["none", "tight", "snug", "normal", "relaxed", "loose"],
      perspective: ["dramatic", "near", "normal", "midrange", "distant", "none"],
      radius: [Gn],
      shadow: [Gn],
      spacing: ["px", xe],
      text: [Gn],
      "text-shadow": [Gn],
      tracking: ["tighter", "tight", "normal", "wide", "wider", "widest"]
    },
    classGroups: {
      // --------------
      // --- Layout ---
      // --------------
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", ji, te, ne, O]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [xe, te, ne, a]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": S()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": S()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: v()
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: x()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": x()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": x()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: C()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": C()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": C()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: A()
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": A()
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": A()
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: A()
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: A()
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: A()
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: A()
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: A()
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: A()
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: [ui, "auto", ne, te]
      }],
      // ------------------------
      // --- Flexbox and Grid ---
      // ------------------------
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: [ji, "full", "auto", a, ...T()]
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["nowrap", "wrap", "wrap-reverse"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: [xe, ji, "auto", "initial", "none", te]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: ["", xe, ne, te]
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: ["", xe, ne, te]
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: [ui, "first", "last", "none", ne, te]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": Q()
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: M()
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": R()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": R()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": Q()
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: M()
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": R()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": R()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": L()
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": L()
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: T()
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": T()
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": T()
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: [...P(), "normal"]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": [...$(), "normal"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", ...$()]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...P()]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: [...$(), {
          baseline: ["", "last"]
        }]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", ...$(), {
          baseline: ["", "last"]
        }]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": P()
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": [...$(), "baseline"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", ...$()]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: T()
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: T()
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: T()
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: T()
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: T()
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: T()
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: T()
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: T()
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: T()
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: Y()
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: Y()
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: Y()
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: Y()
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: Y()
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: Y()
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: Y()
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: Y()
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: Y()
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x": [{
        "space-x": T()
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y": [{
        "space-y": T()
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y-reverse": ["space-y-reverse"],
      // --------------
      // --- Sizing ---
      // --------------
      /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */
      size: [{
        size: ie()
      }],
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: [a, "screen", ...ie()]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [
          a,
          "screen",
          /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          "none",
          ...ie()
        ]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [
          a,
          "screen",
          "none",
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          "prose",
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          {
            screen: [o]
          },
          ...ie()
        ]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: ["screen", "lh", ...ie()]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["screen", "lh", "none", ...ie()]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": ["screen", "lh", ...ie()]
      }],
      // ------------------
      // --- Typography ---
      // ------------------
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", t, Hr, Qi]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: [i, ne, Bl]
      }],
      /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */
      "font-stretch": [{
        "font-stretch": ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded", Dl, te]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [w_, te, e]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: [r, ne, te]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": [xe, "none", ne, Bl]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: [
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          s,
          ...T()
        ]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", ne, te]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["disc", "decimal", "none", ne, te]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: D()
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: D()
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...ve(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: [xe, "from-font", "auto", ne, Qi]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: D()
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": [xe, "auto", ne, te]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: T()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", ne, te]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */
      wrap: [{
        wrap: ["break-word", "anywhere", "normal"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", ne, te]
      }],
      // -------------------
      // --- Backgrounds ---
      // -------------------
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: ee()
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: b()
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: Z()
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          linear: [{
            to: ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
          }, ui, ne, te],
          radial: ["", ne, te],
          conic: [ui, ne, te]
        }, E_, S_]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: D()
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: j()
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: j()
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: j()
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: D()
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: D()
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: D()
      }],
      // ---------------
      // --- Borders ---
      // ---------------
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: w()
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": w()
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": w()
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": w()
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": w()
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": w()
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": w()
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": w()
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": w()
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": w()
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": w()
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": w()
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": w()
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": w()
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": w()
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: he()
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": he()
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": he()
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": he()
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": he()
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": he()
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": he()
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": he()
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": he()
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x": [{
        "divide-x": he()
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y": [{
        "divide-y": he()
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...ve(), "hidden", "none"]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */
      "divide-style": [{
        divide: [...ve(), "hidden", "none"]
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: D()
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": D()
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": D()
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": D()
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": D()
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": D()
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": D()
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": D()
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": D()
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: D()
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [...ve(), "none", "hidden"]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [xe, ne, te]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: ["", xe, Hr, Qi]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: D()
      }],
      // ---------------
      // --- Effects ---
      // ---------------
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: [
          // Deprecated since Tailwind CSS v4.0.0
          "",
          "none",
          u,
          wo,
          So
        ]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */
      "shadow-color": [{
        shadow: D()
      }],
      /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */
      "inset-shadow": [{
        "inset-shadow": ["none", h, wo, So]
      }],
      /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */
      "inset-shadow-color": [{
        "inset-shadow": D()
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */
      "ring-w": [{
        ring: he()
      }],
      /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */
      "ring-color": [{
        ring: D()
      }],
      /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-w": [{
        "ring-offset": [xe, Qi]
      }],
      /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-color": [{
        "ring-offset": D()
      }],
      /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */
      "inset-ring-w": [{
        "inset-ring": he()
      }],
      /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */
      "inset-ring-color": [{
        "inset-ring": D()
      }],
      /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */
      "text-shadow": [{
        "text-shadow": ["none", f, wo, So]
      }],
      /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */
      "text-shadow-color": [{
        "text-shadow": D()
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [xe, ne, te]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...Ee(), "plus-darker", "plus-lighter"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": Ee()
      }],
      /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */
      "mask-clip": [{
        "mask-clip": ["border", "padding", "content", "fill", "stroke", "view"]
      }, "mask-no-clip"],
      /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */
      "mask-composite": [{
        mask: ["add", "subtract", "intersect", "exclude"]
      }],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image-linear-pos": [{
        "mask-linear": [xe]
      }],
      "mask-image-linear-from-pos": [{
        "mask-linear-from": _e()
      }],
      "mask-image-linear-to-pos": [{
        "mask-linear-to": _e()
      }],
      "mask-image-linear-from-color": [{
        "mask-linear-from": D()
      }],
      "mask-image-linear-to-color": [{
        "mask-linear-to": D()
      }],
      "mask-image-t-from-pos": [{
        "mask-t-from": _e()
      }],
      "mask-image-t-to-pos": [{
        "mask-t-to": _e()
      }],
      "mask-image-t-from-color": [{
        "mask-t-from": D()
      }],
      "mask-image-t-to-color": [{
        "mask-t-to": D()
      }],
      "mask-image-r-from-pos": [{
        "mask-r-from": _e()
      }],
      "mask-image-r-to-pos": [{
        "mask-r-to": _e()
      }],
      "mask-image-r-from-color": [{
        "mask-r-from": D()
      }],
      "mask-image-r-to-color": [{
        "mask-r-to": D()
      }],
      "mask-image-b-from-pos": [{
        "mask-b-from": _e()
      }],
      "mask-image-b-to-pos": [{
        "mask-b-to": _e()
      }],
      "mask-image-b-from-color": [{
        "mask-b-from": D()
      }],
      "mask-image-b-to-color": [{
        "mask-b-to": D()
      }],
      "mask-image-l-from-pos": [{
        "mask-l-from": _e()
      }],
      "mask-image-l-to-pos": [{
        "mask-l-to": _e()
      }],
      "mask-image-l-from-color": [{
        "mask-l-from": D()
      }],
      "mask-image-l-to-color": [{
        "mask-l-to": D()
      }],
      "mask-image-x-from-pos": [{
        "mask-x-from": _e()
      }],
      "mask-image-x-to-pos": [{
        "mask-x-to": _e()
      }],
      "mask-image-x-from-color": [{
        "mask-x-from": D()
      }],
      "mask-image-x-to-color": [{
        "mask-x-to": D()
      }],
      "mask-image-y-from-pos": [{
        "mask-y-from": _e()
      }],
      "mask-image-y-to-pos": [{
        "mask-y-to": _e()
      }],
      "mask-image-y-from-color": [{
        "mask-y-from": D()
      }],
      "mask-image-y-to-color": [{
        "mask-y-to": D()
      }],
      "mask-image-radial": [{
        "mask-radial": [ne, te]
      }],
      "mask-image-radial-from-pos": [{
        "mask-radial-from": _e()
      }],
      "mask-image-radial-to-pos": [{
        "mask-radial-to": _e()
      }],
      "mask-image-radial-from-color": [{
        "mask-radial-from": D()
      }],
      "mask-image-radial-to-color": [{
        "mask-radial-to": D()
      }],
      "mask-image-radial-shape": [{
        "mask-radial": ["circle", "ellipse"]
      }],
      "mask-image-radial-size": [{
        "mask-radial": [{
          closest: ["side", "corner"],
          farthest: ["side", "corner"]
        }]
      }],
      "mask-image-radial-pos": [{
        "mask-radial-at": _()
      }],
      "mask-image-conic-pos": [{
        "mask-conic": [xe]
      }],
      "mask-image-conic-from-pos": [{
        "mask-conic-from": _e()
      }],
      "mask-image-conic-to-pos": [{
        "mask-conic-to": _e()
      }],
      "mask-image-conic-from-color": [{
        "mask-conic-from": D()
      }],
      "mask-image-conic-to-color": [{
        "mask-conic-to": D()
      }],
      /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */
      "mask-mode": [{
        mask: ["alpha", "luminance", "match"]
      }],
      /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */
      "mask-origin": [{
        "mask-origin": ["border", "padding", "content", "fill", "stroke", "view"]
      }],
      /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */
      "mask-position": [{
        mask: ee()
      }],
      /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */
      "mask-repeat": [{
        mask: b()
      }],
      /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */
      "mask-size": [{
        mask: Z()
      }],
      /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */
      "mask-type": [{
        "mask-type": ["alpha", "luminance"]
      }],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image": [{
        mask: ["none", ne, te]
      }],
      // ---------------
      // --- Filters ---
      // ---------------
      /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: [
          // Deprecated since Tailwind CSS v3.0.0
          "",
          "none",
          ne,
          te
        ]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: Ae()
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [xe, ne, te]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [xe, ne, te]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": [
          // Deprecated since Tailwind CSS v4.0.0
          "",
          "none",
          d,
          wo,
          So
        ]
      }],
      /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */
      "drop-shadow-color": [{
        "drop-shadow": D()
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: ["", xe, ne, te]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [xe, ne, te]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: ["", xe, ne, te]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [xe, ne, te]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: ["", xe, ne, te]
      }],
      /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": [
          // Deprecated since Tailwind CSS v3.0.0
          "",
          "none",
          ne,
          te
        ]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": Ae()
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [xe, ne, te]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [xe, ne, te]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": ["", xe, ne, te]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [xe, ne, te]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": ["", xe, ne, te]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [xe, ne, te]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [xe, ne, te]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": ["", xe, ne, te]
      }],
      // --------------
      // --- Tables ---
      // --------------
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": T()
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": T()
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": T()
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // ---------------------------------
      // --- Transitions and Animation ---
      // ---------------------------------
      /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["", "all", "colors", "opacity", "shadow", "transform", "none", ne, te]
      }],
      /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */
      "transition-behavior": [{
        transition: ["normal", "discrete"]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: [xe, "initial", ne, te]
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "initial", g, ne, te]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: [xe, ne, te]
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", y, ne, te]
      }],
      // ------------------
      // --- Transforms ---
      // ------------------
      /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */
      backface: [{
        backface: ["hidden", "visible"]
      }],
      /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */
      perspective: [{
        perspective: [m, ne, te]
      }],
      /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */
      "perspective-origin": [{
        "perspective-origin": v()
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: Ke()
      }],
      /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-x": [{
        "rotate-x": Ke()
      }],
      /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-y": [{
        "rotate-y": Ke()
      }],
      /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-z": [{
        "rotate-z": Ke()
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: je()
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": je()
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": je()
      }],
      /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-z": [{
        "scale-z": je()
      }],
      /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-3d": ["scale-3d"],
      /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */
      skew: [{
        skew: Rt()
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": Rt()
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": Rt()
      }],
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: [ne, te, "", "none", "gpu", "cpu"]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: v()
      }],
      /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */
      "transform-style": [{
        transform: ["3d", "flat"]
      }],
      /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */
      translate: [{
        translate: xn()
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": xn()
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": xn()
      }],
      /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-z": [{
        "translate-z": xn()
      }],
      /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-none": ["translate-none"],
      // ---------------------
      // --- Interactivity ---
      // ---------------------
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: D()
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: D()
      }],
      /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */
      "color-scheme": [{
        scheme: ["normal", "dark", "light", "light-dark", "only-dark", "only-light"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", ne, te]
      }],
      /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */
      "field-sizing": [{
        "field-sizing": ["fixed", "content"]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["auto", "none"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "", "y", "x"]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": T()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": T()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": T()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": T()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": T()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": T()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": T()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": T()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": T()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": T()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": T()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": T()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": T()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": T()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": T()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": T()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": T()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": T()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", ne, te]
      }],
      // -----------
      // --- SVG ---
      // -----------
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: ["none", ...D()]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [xe, Hr, Qi, Bl]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: ["none", ...D()]
      }],
      // ---------------------
      // --- Accessibility ---
      // ---------------------
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-x", "border-w-y", "border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-x", "border-color-y", "border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      translate: ["translate-x", "translate-y", "translate-none"],
      "translate-none": ["translate", "translate-x", "translate-y", "translate-z"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    },
    orderSensitiveModifiers: ["*", "**", "after", "backdrop", "before", "details-content", "file", "first-letter", "first-line", "marker", "placeholder", "selection"]
  };
}, T_ = /* @__PURE__ */ c_(C_);
function Rr(...n) {
  return T_(wO(n));
}
const P_ = WE(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive: "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline: "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
function ka({
  className: n,
  variant: e,
  size: t,
  asChild: i = !1,
  ...r
}) {
  const s = i ? qE : "button";
  return /* @__PURE__ */ ce.jsx(
    s,
    {
      "data-slot": "button",
      className: Rr(P_({ variant: e, size: t, className: n })),
      ...r
    }
  );
}
const A_ = ({
  node: n,
  readonly: e,
  defaultButtonText: t,
  onSend: i
}) => {
  const { buttonText: r, ...s } = n.properties || {}, o = () => {
    i?.({ buttonText: r || "" });
  };
  return /* @__PURE__ */ ce.jsx(
    ka,
    {
      variant: "outline",
      disabled: e,
      size: "sm",
      onClick: o,
      className: `cursor-pointer h-6 text-sm hover:bg-gray-200 ${t === r ? "bg-black text-white" : ""}`,
      ...s,
      children: r
    }
  );
}, na = "[|｜]", Md = new RegExp(na, "g"), $_ = [
  {
    // 格式1: ?[%{{variable}} button1 | button2 | ... placeholder] (按钮+占位符，优先级最高)
    regex: new RegExp(`\\?\\[\\%\\{\\{\\s*(\\w+)\\s*\\}\\}\\s*([^\\]\\|｜]+(?:\\s*${na}\\s*[^\\]\\|｜]+)*)\\s*${na}\\s*\\.\\.\\.\\s*([^\\]]+)\\]`),
    type: 0
    /* BUTTONS_WITH_PLACEHOLDER */
  },
  {
    // 格式4: ?[%{{variable}} ... placeholder] (只有占位符，提高优先级)
    regex: /\?\[\%\{\{\s*(\w+)\s*\}\}\s*\.\.\.\s*([^\]]+)\]/,
    type: 3
    /* PLACEHOLDER_ONLY */
  },
  {
    // 格式2: ?[%{{variable}} button1 | button2]
    regex: new RegExp(`\\?\\[\\%\\{\\{\\s*(\\w+)\\s*\\}\\}\\s*([^\\]\\|｜]+(?:\\s*${na}\\s*[^\\]\\|｜]+)+)\\s*\\]`),
    type: 1
    /* BUTTONS_ONLY */
  },
  {
    // 格式3: ?[%{{variable}} button]
    regex: /\?\[\%\{\{\s*(\w+)\s*\}\}\s*([^\|\]｜]+)\s*\]/,
    type: 2
    /* SINGLE_BUTTON */
  }
];
function R_(n, e) {
  const t = n[1].trim();
  switch (e) {
    case 0:
      return {
        variableName: t,
        buttonTexts: n[2].split(Md).map((r) => r.trim()).filter((r) => r.length > 0),
        placeholder: n[3].trim()
      };
    case 1:
      return {
        variableName: t,
        buttonTexts: n[2].split(Md).map((r) => r.trim()).filter((r) => r.length > 0),
        placeholder: void 0
      };
    case 2:
      const i = n[2].trim();
      return {
        variableName: t,
        buttonTexts: i ? [i] : [],
        placeholder: void 0
      };
    case 3:
      return {
        variableName: t,
        buttonTexts: [],
        placeholder: n[2].trim()
      };
    default:
      throw new Error(`Unsupported format type: ${e}`);
  }
}
function M_(n) {
  for (const e of $_) {
    e.regex.lastIndex = 0;
    const t = e.regex.exec(n);
    if (t)
      return { match: t, rule: e };
  }
  return null;
}
function N_(n, e, t, i) {
  return [
    {
      type: "text",
      value: n.substring(0, e)
    },
    {
      type: "element",
      data: {
        hName: "custom-variable",
        hProperties: i
      }
    },
    {
      type: "text",
      value: n.substring(t)
    }
  ];
}
function I_() {
  return (n) => {
    Pr(
      n,
      "text",
      (e, t, i) => {
        if (t === null || i === null) return;
        const r = e.value, s = M_(r);
        if (!s) return;
        const { match: o, rule: a } = s, l = o.index, c = l + o[0].length;
        try {
          const u = R_(o, a.type), h = N_(r, l, c, u);
          i.children.splice(t, 1, ...h);
        } catch (u) {
          console.warn("Failed to parse custom variable syntax:", u);
          return;
        }
      }
    );
  };
}
function L_({ className: n, type: e, ...t }) {
  return /* @__PURE__ */ ce.jsx(
    "input",
    {
      type: e,
      "data-slot": "input",
      className: Rr(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        n
      ),
      ...t
    }
  );
}
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const D_ = (n) => n.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(), B_ = (n) => n.replace(
  /^([A-Z])|[\s-_]+(\w)/g,
  (e, t, i) => i ? i.toUpperCase() : t.toLowerCase()
), Nd = (n) => {
  const e = B_(n);
  return e.charAt(0).toUpperCase() + e.slice(1);
}, MO = (...n) => n.filter((e, t, i) => !!e && e.trim() !== "" && i.indexOf(e) === t).join(" ").trim(), z_ = (n) => {
  for (const e in n)
    if (e.startsWith("aria-") || e === "role" || e === "title")
      return !0;
};
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
var Z_ = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const X_ = uh(
  ({
    color: n = "currentColor",
    size: e = 24,
    strokeWidth: t = 2,
    absoluteStrokeWidth: i,
    className: r = "",
    children: s,
    iconNode: o,
    ...a
  }, l) => Mc(
    "svg",
    {
      ref: l,
      ...Z_,
      width: e,
      height: e,
      stroke: n,
      strokeWidth: i ? Number(t) * 24 / Number(e) : t,
      className: MO("lucide", r),
      ...!s && !z_(a) && { "aria-hidden": "true" },
      ...a
    },
    [
      ...o.map(([c, u]) => Mc(c, u)),
      ...Array.isArray(s) ? s : [s]
    ]
  )
);
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Qh = (n, e) => {
  const t = uh(
    ({ className: i, ...r }, s) => Mc(X_, {
      ref: s,
      iconNode: e,
      className: MO(
        `lucide-${D_(Nd(n))}`,
        `lucide-${n}`,
        i
      ),
      ...r
    })
  );
  return t.displayName = Nd(n), t;
};
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const q_ = [["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]], V_ = Qh("chevron-down", q_);
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Y_ = [
  ["path", { d: "M12 2v4", key: "3427ic" }],
  ["path", { d: "m16.2 7.8 2.9-2.9", key: "r700ao" }],
  ["path", { d: "M18 12h4", key: "wj9ykh" }],
  ["path", { d: "m16.2 16.2 2.9 2.9", key: "1bxg5t" }],
  ["path", { d: "M12 18v4", key: "jadmvz" }],
  ["path", { d: "m4.9 19.1 2.9-2.9", key: "bwix9q" }],
  ["path", { d: "M2 12h4", key: "j09sii" }],
  ["path", { d: "m4.9 4.9 2.9 2.9", key: "giyufr" }]
], F_ = Qh("loader", Y_);
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const U_ = [
  [
    "path",
    {
      d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
      key: "1ffxy3"
    }
  ],
  ["path", { d: "m21.854 2.147-10.94 10.939", key: "12cjpa" }]
], G_ = Qh("send", U_), W_ = ({
  node: n,
  readonly: e,
  defaultButtonText: t,
  defaultInputText: i,
  onSend: r
}) => {
  const [s, o] = ch.useState(i || ""), a = (h) => {
    r?.({
      variableName: n.properties?.variableName || "",
      buttonText: h
    });
  }, l = (h) => {
    o(h.target.value);
  }, c = (h) => {
    h.key === "Enter" && u();
  }, u = () => {
    r?.({
      variableName: n.properties?.variableName || "",
      inputText: s
    });
  };
  return /* @__PURE__ */ ce.jsxs("span", { className: "custom-variable-container inline-flex items-center gap-2 flex-wrap", children: [
    n.properties?.buttonTexts?.map((h, f) => /* @__PURE__ */ ce.jsx(
      ka,
      {
        disabled: e,
        variant: "outline",
        type: "button",
        size: "sm",
        onClick: () => a(h),
        className: `cursor-pointer h-6 text-sm hover:bg-gray-200 ${t === h ? "bg-black text-white" : ""}`,
        children: h
      },
      f
    )),
    n.properties?.placeholder && /* @__PURE__ */ ce.jsxs("span", { className: "text-sm flex rounded-md border relative group", children: [
      /* @__PURE__ */ ce.jsx(
        L_,
        {
          type: "text",
          disabled: e,
          placeholder: n.properties?.placeholder,
          value: s,
          onChange: l,
          onKeyDown: c,
          className: "custom-variable-input w-40 h-6 text-sm border-0 shadow-none outline-none ring-0",
          style: {
            border: "none",
            outline: "none",
            boxShadow: "none"
          },
          title: n.properties.placeholder
        }
      ),
      n.properties.placeholder.length > 10 && /* @__PURE__ */ ce.jsx("div", { className: "absolute bottom-full left-0 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 whitespace-nowrap max-w-xs", children: n.properties.placeholder }),
      /* @__PURE__ */ ce.jsx(
        ka,
        {
          type: "button",
          variant: "ghost",
          size: "icon",
          onClick: u,
          disabled: e,
          className: "h-6 w-6 mr-1 hover:bg-gray-200",
          children: /* @__PURE__ */ ce.jsx(G_, { className: "h-4 w-4" })
        }
      )
    ] })
  ] });
};
function Id(n, e) {
  const t = String(n);
  if (typeof e != "string")
    throw new TypeError("Expected character");
  let i = 0, r = t.indexOf(e);
  for (; r !== -1; )
    i++, r = t.indexOf(e, r + e.length);
  return i;
}
function j_(n) {
  if (typeof n != "string")
    throw new TypeError("Expected a string");
  return n.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function NO(n, e, t) {
  const r = Hs((t || {}).ignore || []), s = H_(e);
  let o = -1;
  for (; ++o < s.length; )
    xO(n, "text", a);
  function a(c, u) {
    let h = -1, f;
    for (; ++h < u.length; ) {
      const d = u[h], p = f ? f.children : void 0;
      if (r(
        d,
        p ? p.indexOf(d) : void 0,
        f
      ))
        return;
      f = d;
    }
    if (f)
      return l(c, u);
  }
  function l(c, u) {
    const h = u[u.length - 1], f = s[o][0], d = s[o][1];
    let p = 0;
    const O = h.children.indexOf(c);
    let g = !1, y = [];
    f.lastIndex = 0;
    let S = f.exec(c.value);
    for (; S; ) {
      const _ = S.index, v = {
        index: S.index,
        input: S.input,
        stack: [...u, c]
      };
      let x = d(...S, v);
      if (typeof x == "string" && (x = x.length > 0 ? { type: "text", value: x } : void 0), x === !1 ? f.lastIndex = _ + 1 : (p !== _ && y.push({
        type: "text",
        value: c.value.slice(p, _)
      }), Array.isArray(x) ? y.push(...x) : x && y.push(x), p = _ + S[0].length, g = !0), !f.global)
        break;
      S = f.exec(c.value);
    }
    return g ? (p < c.value.length && y.push({ type: "text", value: c.value.slice(p) }), h.children.splice(O, 1, ...y)) : y = [c], O + y.length;
  }
}
function H_(n) {
  const e = [];
  if (!Array.isArray(n))
    throw new TypeError("Expected find and replace tuple or list of tuples");
  const t = !n[0] || Array.isArray(n[0]) ? n : [n];
  let i = -1;
  for (; ++i < t.length; ) {
    const r = t[i];
    e.push([K_(r[0]), J_(r[1])]);
  }
  return e;
}
function K_(n) {
  return typeof n == "string" ? new RegExp(j_(n), "g") : n;
}
function J_(n) {
  return typeof n == "function" ? n : function() {
    return n;
  };
}
const zl = "phrasing", Zl = ["autolink", "link", "image", "label"];
function eQ() {
  return {
    transforms: [aQ],
    enter: {
      literalAutolink: nQ,
      literalAutolinkEmail: Xl,
      literalAutolinkHttp: Xl,
      literalAutolinkWww: Xl
    },
    exit: {
      literalAutolink: oQ,
      literalAutolinkEmail: sQ,
      literalAutolinkHttp: iQ,
      literalAutolinkWww: rQ
    }
  };
}
function tQ() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct: zl,
        notInConstruct: Zl
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct: zl,
        notInConstruct: Zl
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct: zl,
        notInConstruct: Zl
      }
    ]
  };
}
function nQ(n) {
  this.enter({ type: "link", title: null, url: "", children: [] }, n);
}
function Xl(n) {
  this.config.enter.autolinkProtocol.call(this, n);
}
function iQ(n) {
  this.config.exit.autolinkProtocol.call(this, n);
}
function rQ(n) {
  this.config.exit.data.call(this, n);
  const e = this.stack[this.stack.length - 1];
  e.type, e.url = "http://" + this.sliceSerialize(n);
}
function sQ(n) {
  this.config.exit.autolinkEmail.call(this, n);
}
function oQ(n) {
  this.exit(n);
}
function aQ(n) {
  NO(
    n,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, lQ],
      [new RegExp("(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)", "gu"), cQ]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function lQ(n, e, t, i, r) {
  let s = "";
  if (!IO(r) || (/^w/i.test(e) && (t = e + t, e = "", s = "http://"), !uQ(t)))
    return !1;
  const o = hQ(t + i);
  if (!o[0]) return !1;
  const a = {
    type: "link",
    title: null,
    url: s + e + o[0],
    children: [{ type: "text", value: e + o[0] }]
  };
  return o[1] ? [a, { type: "text", value: o[1] }] : a;
}
function cQ(n, e, t, i) {
  return (
    // Not an expected previous character.
    !IO(i, !0) || // Label ends in not allowed character.
    /[-\d_]$/.test(t) ? !1 : {
      type: "link",
      title: null,
      url: "mailto:" + e + "@" + t,
      children: [{ type: "text", value: e + "@" + t }]
    }
  );
}
function uQ(n) {
  const e = n.split(".");
  return !(e.length < 2 || e[e.length - 1] && (/_/.test(e[e.length - 1]) || !/[a-zA-Z\d]/.test(e[e.length - 1])) || e[e.length - 2] && (/_/.test(e[e.length - 2]) || !/[a-zA-Z\d]/.test(e[e.length - 2])));
}
function hQ(n) {
  const e = /[!"&'),.:;<>?\]}]+$/.exec(n);
  if (!e)
    return [n, void 0];
  n = n.slice(0, e.index);
  let t = e[0], i = t.indexOf(")");
  const r = Id(n, "(");
  let s = Id(n, ")");
  for (; i !== -1 && r > s; )
    n += t.slice(0, i + 1), t = t.slice(i + 1), i = t.indexOf(")"), s++;
  return [n, t];
}
function IO(n, e) {
  const t = n.input.charCodeAt(n.index - 1);
  return (n.index === 0 || Li(t) || tl(t)) && // If it’s an email, the previous character should not be a slash.
  (!e || t !== 47);
}
LO.peek = xQ;
function fQ() {
  this.buffer();
}
function dQ(n) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, n);
}
function pQ() {
  this.buffer();
}
function mQ(n) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    n
  );
}
function gQ(n) {
  const e = this.resume(), t = this.stack[this.stack.length - 1];
  t.type, t.identifier = mn(
    this.sliceSerialize(n)
  ).toLowerCase(), t.label = e;
}
function OQ(n) {
  this.exit(n);
}
function bQ(n) {
  const e = this.resume(), t = this.stack[this.stack.length - 1];
  t.type, t.identifier = mn(
    this.sliceSerialize(n)
  ).toLowerCase(), t.label = e;
}
function yQ(n) {
  this.exit(n);
}
function xQ() {
  return "[";
}
function LO(n, e, t, i) {
  const r = t.createTracker(i);
  let s = r.move("[^");
  const o = t.enter("footnoteReference"), a = t.enter("reference");
  return s += r.move(
    t.safe(t.associationId(n), { after: "]", before: s })
  ), a(), o(), s += r.move("]"), s;
}
function kQ() {
  return {
    enter: {
      gfmFootnoteCallString: fQ,
      gfmFootnoteCall: dQ,
      gfmFootnoteDefinitionLabelString: pQ,
      gfmFootnoteDefinition: mQ
    },
    exit: {
      gfmFootnoteCallString: gQ,
      gfmFootnoteCall: OQ,
      gfmFootnoteDefinitionLabelString: bQ,
      gfmFootnoteDefinition: yQ
    }
  };
}
function SQ(n) {
  let e = !1;
  return n && n.firstLineBlank && (e = !0), {
    handlers: { footnoteDefinition: t, footnoteReference: LO },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function t(i, r, s, o) {
    const a = s.createTracker(o);
    let l = a.move("[^");
    const c = s.enter("footnoteDefinition"), u = s.enter("label");
    return l += a.move(
      s.safe(s.associationId(i), { before: l, after: "]" })
    ), u(), l += a.move("]:"), i.children && i.children.length > 0 && (a.shift(4), l += a.move(
      (e ? `
` : " ") + s.indentLines(
        s.containerFlow(i, a.current()),
        e ? DO : wQ
      )
    )), c(), l;
  }
}
function wQ(n, e, t) {
  return e === 0 ? n : DO(n, e, t);
}
function DO(n, e, t) {
  return (t ? "" : "    ") + n;
}
const vQ = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
BO.peek = TQ;
function EQ() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: QQ },
    exit: { strikethrough: CQ }
  };
}
function _Q() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: vQ
      }
    ],
    handlers: { delete: BO }
  };
}
function QQ(n) {
  this.enter({ type: "delete", children: [] }, n);
}
function CQ(n) {
  this.exit(n);
}
function BO(n, e, t, i) {
  const r = t.createTracker(i), s = t.enter("strikethrough");
  let o = r.move("~~");
  return o += t.containerPhrasing(n, {
    ...r.current(),
    before: o,
    after: "~"
  }), o += r.move("~~"), s(), o;
}
function TQ() {
  return "~";
}
function PQ(n) {
  return n.length;
}
function AQ(n, e) {
  const t = e || {}, i = (t.align || []).concat(), r = t.stringLength || PQ, s = [], o = [], a = [], l = [];
  let c = 0, u = -1;
  for (; ++u < n.length; ) {
    const m = [], O = [];
    let g = -1;
    for (n[u].length > c && (c = n[u].length); ++g < n[u].length; ) {
      const y = $Q(n[u][g]);
      if (t.alignDelimiters !== !1) {
        const S = r(y);
        O[g] = S, (l[g] === void 0 || S > l[g]) && (l[g] = S);
      }
      m.push(y);
    }
    o[u] = m, a[u] = O;
  }
  let h = -1;
  if (typeof i == "object" && "length" in i)
    for (; ++h < c; )
      s[h] = Ld(i[h]);
  else {
    const m = Ld(i);
    for (; ++h < c; )
      s[h] = m;
  }
  h = -1;
  const f = [], d = [];
  for (; ++h < c; ) {
    const m = s[h];
    let O = "", g = "";
    m === 99 ? (O = ":", g = ":") : m === 108 ? O = ":" : m === 114 && (g = ":");
    let y = t.alignDelimiters === !1 ? 1 : Math.max(
      1,
      l[h] - O.length - g.length
    );
    const S = O + "-".repeat(y) + g;
    t.alignDelimiters !== !1 && (y = O.length + y + g.length, y > l[h] && (l[h] = y), d[h] = y), f[h] = S;
  }
  o.splice(1, 0, f), a.splice(1, 0, d), u = -1;
  const p = [];
  for (; ++u < o.length; ) {
    const m = o[u], O = a[u];
    h = -1;
    const g = [];
    for (; ++h < c; ) {
      const y = m[h] || "";
      let S = "", _ = "";
      if (t.alignDelimiters !== !1) {
        const v = l[h] - (O[h] || 0), x = s[h];
        x === 114 ? S = " ".repeat(v) : x === 99 ? v % 2 ? (S = " ".repeat(v / 2 + 0.5), _ = " ".repeat(v / 2 - 0.5)) : (S = " ".repeat(v / 2), _ = S) : _ = " ".repeat(v);
      }
      t.delimiterStart !== !1 && !h && g.push("|"), t.padding !== !1 && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(t.alignDelimiters === !1 && y === "") && (t.delimiterStart !== !1 || h) && g.push(" "), t.alignDelimiters !== !1 && g.push(S), g.push(y), t.alignDelimiters !== !1 && g.push(_), t.padding !== !1 && g.push(" "), (t.delimiterEnd !== !1 || h !== c - 1) && g.push("|");
    }
    p.push(
      t.delimiterEnd === !1 ? g.join("").replace(/ +$/, "") : g.join("")
    );
  }
  return p.join(`
`);
}
function $Q(n) {
  return n == null ? "" : String(n);
}
function Ld(n) {
  const e = typeof n == "string" ? n.codePointAt(0) : 0;
  return e === 67 || e === 99 ? 99 : e === 76 || e === 108 ? 108 : e === 82 || e === 114 ? 114 : 0;
}
function RQ(n, e, t, i) {
  const r = t.enter("blockquote"), s = t.createTracker(i);
  s.move("> "), s.shift(2);
  const o = t.indentLines(
    t.containerFlow(n, s.current()),
    MQ
  );
  return r(), o;
}
function MQ(n, e, t) {
  return ">" + (t ? "" : " ") + n;
}
function NQ(n, e) {
  return Dd(n, e.inConstruct, !0) && !Dd(n, e.notInConstruct, !1);
}
function Dd(n, e, t) {
  if (typeof e == "string" && (e = [e]), !e || e.length === 0)
    return t;
  let i = -1;
  for (; ++i < e.length; )
    if (n.includes(e[i]))
      return !0;
  return !1;
}
function Bd(n, e, t, i) {
  let r = -1;
  for (; ++r < t.unsafe.length; )
    if (t.unsafe[r].character === `
` && NQ(t.stack, t.unsafe[r]))
      return /[ \t]/.test(i.before) ? "" : " ";
  return `\\
`;
}
function IQ(n, e) {
  const t = String(n);
  let i = t.indexOf(e), r = i, s = 0, o = 0;
  if (typeof e != "string")
    throw new TypeError("Expected substring");
  for (; i !== -1; )
    i === r ? ++s > o && (o = s) : s = 1, r = i + e.length, i = t.indexOf(e, r);
  return o;
}
function LQ(n, e) {
  return !!(e.options.fences === !1 && n.value && // If there’s no info…
  !n.lang && // And there’s a non-whitespace character…
  /[^ \r\n]/.test(n.value) && // And the value doesn’t start or end in a blank…
  !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(n.value));
}
function DQ(n) {
  const e = n.options.fence || "`";
  if (e !== "`" && e !== "~")
    throw new Error(
      "Cannot serialize code with `" + e + "` for `options.fence`, expected `` ` `` or `~`"
    );
  return e;
}
function BQ(n, e, t, i) {
  const r = DQ(t), s = n.value || "", o = r === "`" ? "GraveAccent" : "Tilde";
  if (LQ(n, t)) {
    const h = t.enter("codeIndented"), f = t.indentLines(s, zQ);
    return h(), f;
  }
  const a = t.createTracker(i), l = r.repeat(Math.max(IQ(s, r) + 1, 3)), c = t.enter("codeFenced");
  let u = a.move(l);
  if (n.lang) {
    const h = t.enter(`codeFencedLang${o}`);
    u += a.move(
      t.safe(n.lang, {
        before: u,
        after: " ",
        encode: ["`"],
        ...a.current()
      })
    ), h();
  }
  if (n.lang && n.meta) {
    const h = t.enter(`codeFencedMeta${o}`);
    u += a.move(" "), u += a.move(
      t.safe(n.meta, {
        before: u,
        after: `
`,
        encode: ["`"],
        ...a.current()
      })
    ), h();
  }
  return u += a.move(`
`), s && (u += a.move(s + `
`)), u += a.move(l), c(), u;
}
function zQ(n, e, t) {
  return (t ? "" : "    ") + n;
}
function Ch(n) {
  const e = n.options.quote || '"';
  if (e !== '"' && e !== "'")
    throw new Error(
      "Cannot serialize title with `" + e + "` for `options.quote`, expected `\"`, or `'`"
    );
  return e;
}
function ZQ(n, e, t, i) {
  const r = Ch(t), s = r === '"' ? "Quote" : "Apostrophe", o = t.enter("definition");
  let a = t.enter("label");
  const l = t.createTracker(i);
  let c = l.move("[");
  return c += l.move(
    t.safe(t.associationId(n), {
      before: c,
      after: "]",
      ...l.current()
    })
  ), c += l.move("]: "), a(), // If there’s no url, or…
  !n.url || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (a = t.enter("destinationLiteral"), c += l.move("<"), c += l.move(
    t.safe(n.url, { before: c, after: ">", ...l.current() })
  ), c += l.move(">")) : (a = t.enter("destinationRaw"), c += l.move(
    t.safe(n.url, {
      before: c,
      after: n.title ? " " : `
`,
      ...l.current()
    })
  )), a(), n.title && (a = t.enter(`title${s}`), c += l.move(" " + r), c += l.move(
    t.safe(n.title, {
      before: c,
      after: r,
      ...l.current()
    })
  ), c += l.move(r), a()), o(), c;
}
function XQ(n) {
  const e = n.options.emphasis || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize emphasis with `" + e + "` for `options.emphasis`, expected `*`, or `_`"
    );
  return e;
}
function Es(n) {
  return "&#x" + n.toString(16).toUpperCase() + ";";
}
function Sa(n, e, t) {
  const i = pr(n), r = pr(e);
  return i === void 0 ? r === void 0 ? (
    // Letter inside:
    // we have to encode *both* letters for `_` as it is looser.
    // it already forms for `*` (and GFMs `~`).
    t === "_" ? { inside: !0, outside: !0 } : { inside: !1, outside: !1 }
  ) : r === 1 ? (
    // Whitespace inside: encode both (letter, whitespace).
    { inside: !0, outside: !0 }
  ) : (
    // Punctuation inside: encode outer (letter)
    { inside: !1, outside: !0 }
  ) : i === 1 ? r === void 0 ? (
    // Letter inside: already forms.
    { inside: !1, outside: !1 }
  ) : r === 1 ? (
    // Whitespace inside: encode both (whitespace).
    { inside: !0, outside: !0 }
  ) : (
    // Punctuation inside: already forms.
    { inside: !1, outside: !1 }
  ) : r === void 0 ? (
    // Letter inside: already forms.
    { inside: !1, outside: !1 }
  ) : r === 1 ? (
    // Whitespace inside: encode inner (whitespace).
    { inside: !0, outside: !1 }
  ) : (
    // Punctuation inside: already forms.
    { inside: !1, outside: !1 }
  );
}
zO.peek = qQ;
function zO(n, e, t, i) {
  const r = XQ(t), s = t.enter("emphasis"), o = t.createTracker(i), a = o.move(r);
  let l = o.move(
    t.containerPhrasing(n, {
      after: r,
      before: a,
      ...o.current()
    })
  );
  const c = l.charCodeAt(0), u = Sa(
    i.before.charCodeAt(i.before.length - 1),
    c,
    r
  );
  u.inside && (l = Es(c) + l.slice(1));
  const h = l.charCodeAt(l.length - 1), f = Sa(i.after.charCodeAt(0), h, r);
  f.inside && (l = l.slice(0, -1) + Es(h));
  const d = o.move(r);
  return s(), t.attentionEncodeSurroundingInfo = {
    after: f.outside,
    before: u.outside
  }, a + l + d;
}
function qQ(n, e, t) {
  return t.options.emphasis || "*";
}
function VQ(n, e) {
  let t = !1;
  return Pr(n, function(i) {
    if ("value" in i && /\r?\n|\r/.test(i.value) || i.type === "break")
      return t = !0, Xc;
  }), !!((!n.depth || n.depth < 3) && bh(n) && (e.options.setext || t));
}
function YQ(n, e, t, i) {
  const r = Math.max(Math.min(6, n.depth || 1), 1), s = t.createTracker(i);
  if (VQ(n, t)) {
    const u = t.enter("headingSetext"), h = t.enter("phrasing"), f = t.containerPhrasing(n, {
      ...s.current(),
      before: `
`,
      after: `
`
    });
    return h(), u(), f + `
` + (r === 1 ? "=" : "-").repeat(
      // The whole size…
      f.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(f.lastIndexOf("\r"), f.lastIndexOf(`
`)) + 1)
    );
  }
  const o = "#".repeat(r), a = t.enter("headingAtx"), l = t.enter("phrasing");
  s.move(o + " ");
  let c = t.containerPhrasing(n, {
    before: "# ",
    after: `
`,
    ...s.current()
  });
  return /^[\t ]/.test(c) && (c = Es(c.charCodeAt(0)) + c.slice(1)), c = c ? o + " " + c : o, t.options.closeAtx && (c += " " + o), l(), a(), c;
}
ZO.peek = FQ;
function ZO(n) {
  return n.value || "";
}
function FQ() {
  return "<";
}
XO.peek = UQ;
function XO(n, e, t, i) {
  const r = Ch(t), s = r === '"' ? "Quote" : "Apostrophe", o = t.enter("image");
  let a = t.enter("label");
  const l = t.createTracker(i);
  let c = l.move("![");
  return c += l.move(
    t.safe(n.alt, { before: c, after: "]", ...l.current() })
  ), c += l.move("]("), a(), // If there’s no url but there is a title…
  !n.url && n.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (a = t.enter("destinationLiteral"), c += l.move("<"), c += l.move(
    t.safe(n.url, { before: c, after: ">", ...l.current() })
  ), c += l.move(">")) : (a = t.enter("destinationRaw"), c += l.move(
    t.safe(n.url, {
      before: c,
      after: n.title ? " " : ")",
      ...l.current()
    })
  )), a(), n.title && (a = t.enter(`title${s}`), c += l.move(" " + r), c += l.move(
    t.safe(n.title, {
      before: c,
      after: r,
      ...l.current()
    })
  ), c += l.move(r), a()), c += l.move(")"), o(), c;
}
function UQ() {
  return "!";
}
qO.peek = GQ;
function qO(n, e, t, i) {
  const r = n.referenceType, s = t.enter("imageReference");
  let o = t.enter("label");
  const a = t.createTracker(i);
  let l = a.move("![");
  const c = t.safe(n.alt, {
    before: l,
    after: "]",
    ...a.current()
  });
  l += a.move(c + "]["), o();
  const u = t.stack;
  t.stack = [], o = t.enter("reference");
  const h = t.safe(t.associationId(n), {
    before: l,
    after: "]",
    ...a.current()
  });
  return o(), t.stack = u, s(), r === "full" || !c || c !== h ? l += a.move(h + "]") : r === "shortcut" ? l = l.slice(0, -1) : l += a.move("]"), l;
}
function GQ() {
  return "!";
}
VO.peek = WQ;
function VO(n, e, t) {
  let i = n.value || "", r = "`", s = -1;
  for (; new RegExp("(^|[^`])" + r + "([^`]|$)").test(i); )
    r += "`";
  for (/[^ \r\n]/.test(i) && (/^[ \r\n]/.test(i) && /[ \r\n]$/.test(i) || /^`|`$/.test(i)) && (i = " " + i + " "); ++s < t.unsafe.length; ) {
    const o = t.unsafe[s], a = t.compilePattern(o);
    let l;
    if (o.atBreak)
      for (; l = a.exec(i); ) {
        let c = l.index;
        i.charCodeAt(c) === 10 && i.charCodeAt(c - 1) === 13 && c--, i = i.slice(0, c) + " " + i.slice(l.index + 1);
      }
  }
  return r + i + r;
}
function WQ() {
  return "`";
}
function YO(n, e) {
  const t = bh(n);
  return !!(!e.options.resourceLink && // If there’s a url…
  n.url && // And there’s a no title…
  !n.title && // And the content of `node` is a single text node…
  n.children && n.children.length === 1 && n.children[0].type === "text" && // And if the url is the same as the content…
  (t === n.url || "mailto:" + t === n.url) && // And that starts w/ a protocol…
  /^[a-z][a-z+.-]+:/i.test(n.url) && // And that doesn’t contain ASCII control codes (character escapes and
  // references don’t work), space, or angle brackets…
  !/[\0- <>\u007F]/.test(n.url));
}
FO.peek = jQ;
function FO(n, e, t, i) {
  const r = Ch(t), s = r === '"' ? "Quote" : "Apostrophe", o = t.createTracker(i);
  let a, l;
  if (YO(n, t)) {
    const u = t.stack;
    t.stack = [], a = t.enter("autolink");
    let h = o.move("<");
    return h += o.move(
      t.containerPhrasing(n, {
        before: h,
        after: ">",
        ...o.current()
      })
    ), h += o.move(">"), a(), t.stack = u, h;
  }
  a = t.enter("link"), l = t.enter("label");
  let c = o.move("[");
  return c += o.move(
    t.containerPhrasing(n, {
      before: c,
      after: "](",
      ...o.current()
    })
  ), c += o.move("]("), l(), // If there’s no url but there is a title…
  !n.url && n.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (l = t.enter("destinationLiteral"), c += o.move("<"), c += o.move(
    t.safe(n.url, { before: c, after: ">", ...o.current() })
  ), c += o.move(">")) : (l = t.enter("destinationRaw"), c += o.move(
    t.safe(n.url, {
      before: c,
      after: n.title ? " " : ")",
      ...o.current()
    })
  )), l(), n.title && (l = t.enter(`title${s}`), c += o.move(" " + r), c += o.move(
    t.safe(n.title, {
      before: c,
      after: r,
      ...o.current()
    })
  ), c += o.move(r), l()), c += o.move(")"), a(), c;
}
function jQ(n, e, t) {
  return YO(n, t) ? "<" : "[";
}
UO.peek = HQ;
function UO(n, e, t, i) {
  const r = n.referenceType, s = t.enter("linkReference");
  let o = t.enter("label");
  const a = t.createTracker(i);
  let l = a.move("[");
  const c = t.containerPhrasing(n, {
    before: l,
    after: "]",
    ...a.current()
  });
  l += a.move(c + "]["), o();
  const u = t.stack;
  t.stack = [], o = t.enter("reference");
  const h = t.safe(t.associationId(n), {
    before: l,
    after: "]",
    ...a.current()
  });
  return o(), t.stack = u, s(), r === "full" || !c || c !== h ? l += a.move(h + "]") : r === "shortcut" ? l = l.slice(0, -1) : l += a.move("]"), l;
}
function HQ() {
  return "[";
}
function Th(n) {
  const e = n.options.bullet || "*";
  if (e !== "*" && e !== "+" && e !== "-")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  return e;
}
function KQ(n) {
  const e = Th(n), t = n.options.bulletOther;
  if (!t)
    return e === "*" ? "-" : "*";
  if (t !== "*" && t !== "+" && t !== "-")
    throw new Error(
      "Cannot serialize items with `" + t + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  if (t === e)
    throw new Error(
      "Expected `bullet` (`" + e + "`) and `bulletOther` (`" + t + "`) to be different"
    );
  return t;
}
function JQ(n) {
  const e = n.options.bulletOrdered || ".";
  if (e !== "." && e !== ")")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  return e;
}
function GO(n) {
  const e = n.options.rule || "*";
  if (e !== "*" && e !== "-" && e !== "_")
    throw new Error(
      "Cannot serialize rules with `" + e + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  return e;
}
function eC(n, e, t, i) {
  const r = t.enter("list"), s = t.bulletCurrent;
  let o = n.ordered ? JQ(t) : Th(t);
  const a = n.ordered ? o === "." ? ")" : "." : KQ(t);
  let l = e && t.bulletLastUsed ? o === t.bulletLastUsed : !1;
  if (!n.ordered) {
    const u = n.children ? n.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (o === "*" || o === "-") && // Empty first list item:
      u && (!u.children || !u.children[0]) && // Directly in two other list items:
      t.stack[t.stack.length - 1] === "list" && t.stack[t.stack.length - 2] === "listItem" && t.stack[t.stack.length - 3] === "list" && t.stack[t.stack.length - 4] === "listItem" && // That are each the first child.
      t.indexStack[t.indexStack.length - 1] === 0 && t.indexStack[t.indexStack.length - 2] === 0 && t.indexStack[t.indexStack.length - 3] === 0 && (l = !0), GO(t) === o && u
    ) {
      let h = -1;
      for (; ++h < n.children.length; ) {
        const f = n.children[h];
        if (f && f.type === "listItem" && f.children && f.children[0] && f.children[0].type === "thematicBreak") {
          l = !0;
          break;
        }
      }
    }
  }
  l && (o = a), t.bulletCurrent = o;
  const c = t.containerFlow(n, i);
  return t.bulletLastUsed = o, t.bulletCurrent = s, r(), c;
}
function tC(n) {
  const e = n.options.listItemIndent || "one";
  if (e !== "tab" && e !== "one" && e !== "mixed")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  return e;
}
function nC(n, e, t, i) {
  const r = tC(t);
  let s = t.bulletCurrent || Th(t);
  e && e.type === "list" && e.ordered && (s = (typeof e.start == "number" && e.start > -1 ? e.start : 1) + (t.options.incrementListMarker === !1 ? 0 : e.children.indexOf(n)) + s);
  let o = s.length + 1;
  (r === "tab" || r === "mixed" && (e && e.type === "list" && e.spread || n.spread)) && (o = Math.ceil(o / 4) * 4);
  const a = t.createTracker(i);
  a.move(s + " ".repeat(o - s.length)), a.shift(o);
  const l = t.enter("listItem"), c = t.indentLines(
    t.containerFlow(n, a.current()),
    u
  );
  return l(), c;
  function u(h, f, d) {
    return f ? (d ? "" : " ".repeat(o)) + h : (d ? s : s + " ".repeat(o - s.length)) + h;
  }
}
function iC(n, e, t, i) {
  const r = t.enter("paragraph"), s = t.enter("phrasing"), o = t.containerPhrasing(n, i);
  return s(), r(), o;
}
const rC = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  Hs([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);
function sC(n, e, t, i) {
  return (n.children.some(function(o) {
    return rC(o);
  }) ? t.containerPhrasing : t.containerFlow).call(t, n, i);
}
function oC(n) {
  const e = n.options.strong || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize strong with `" + e + "` for `options.strong`, expected `*`, or `_`"
    );
  return e;
}
WO.peek = aC;
function WO(n, e, t, i) {
  const r = oC(t), s = t.enter("strong"), o = t.createTracker(i), a = o.move(r + r);
  let l = o.move(
    t.containerPhrasing(n, {
      after: r,
      before: a,
      ...o.current()
    })
  );
  const c = l.charCodeAt(0), u = Sa(
    i.before.charCodeAt(i.before.length - 1),
    c,
    r
  );
  u.inside && (l = Es(c) + l.slice(1));
  const h = l.charCodeAt(l.length - 1), f = Sa(i.after.charCodeAt(0), h, r);
  f.inside && (l = l.slice(0, -1) + Es(h));
  const d = o.move(r + r);
  return s(), t.attentionEncodeSurroundingInfo = {
    after: f.outside,
    before: u.outside
  }, a + l + d;
}
function aC(n, e, t) {
  return t.options.strong || "*";
}
function lC(n, e, t, i) {
  return t.safe(n.value, i);
}
function cC(n) {
  const e = n.options.ruleRepetition || 3;
  if (e < 3)
    throw new Error(
      "Cannot serialize rules with repetition `" + e + "` for `options.ruleRepetition`, expected `3` or more"
    );
  return e;
}
function uC(n, e, t) {
  const i = (GO(t) + (t.options.ruleSpaces ? " " : "")).repeat(cC(t));
  return t.options.ruleSpaces ? i.slice(0, -1) : i;
}
const jO = {
  blockquote: RQ,
  break: Bd,
  code: BQ,
  definition: ZQ,
  emphasis: zO,
  hardBreak: Bd,
  heading: YQ,
  html: ZO,
  image: XO,
  imageReference: qO,
  inlineCode: VO,
  link: FO,
  linkReference: UO,
  list: eC,
  listItem: nC,
  paragraph: iC,
  root: sC,
  strong: WO,
  text: lC,
  thematicBreak: uC
};
function hC() {
  return {
    enter: {
      table: fC,
      tableData: zd,
      tableHeader: zd,
      tableRow: pC
    },
    exit: {
      codeText: mC,
      table: dC,
      tableData: ql,
      tableHeader: ql,
      tableRow: ql
    }
  };
}
function fC(n) {
  const e = n._align;
  this.enter(
    {
      type: "table",
      align: e.map(function(t) {
        return t === "none" ? null : t;
      }),
      children: []
    },
    n
  ), this.data.inTable = !0;
}
function dC(n) {
  this.exit(n), this.data.inTable = void 0;
}
function pC(n) {
  this.enter({ type: "tableRow", children: [] }, n);
}
function ql(n) {
  this.exit(n);
}
function zd(n) {
  this.enter({ type: "tableCell", children: [] }, n);
}
function mC(n) {
  let e = this.resume();
  this.data.inTable && (e = e.replace(/\\([\\|])/g, gC));
  const t = this.stack[this.stack.length - 1];
  t.type, t.value = e, this.exit(n);
}
function gC(n, e) {
  return e === "|" ? e : n;
}
function OC(n) {
  const e = n || {}, t = e.tableCellPadding, i = e.tablePipeAlign, r = e.stringLength, s = t ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: `
`, inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: !0, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: !0, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: !0, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: f,
      table: o,
      tableCell: l,
      tableRow: a
    }
  };
  function o(d, p, m, O) {
    return c(u(d, m, O), d.align);
  }
  function a(d, p, m, O) {
    const g = h(d, m, O), y = c([g]);
    return y.slice(0, y.indexOf(`
`));
  }
  function l(d, p, m, O) {
    const g = m.enter("tableCell"), y = m.enter("phrasing"), S = m.containerPhrasing(d, {
      ...O,
      before: s,
      after: s
    });
    return y(), g(), S;
  }
  function c(d, p) {
    return AQ(d, {
      align: p,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters: i,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding: t,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength: r
    });
  }
  function u(d, p, m) {
    const O = d.children;
    let g = -1;
    const y = [], S = p.enter("table");
    for (; ++g < O.length; )
      y[g] = h(O[g], p, m);
    return S(), y;
  }
  function h(d, p, m) {
    const O = d.children;
    let g = -1;
    const y = [], S = p.enter("tableRow");
    for (; ++g < O.length; )
      y[g] = l(O[g], d, p, m);
    return S(), y;
  }
  function f(d, p, m) {
    let O = jO.inlineCode(d, p, m);
    return m.stack.includes("tableCell") && (O = O.replace(/\|/g, "\\$&")), O;
  }
}
function bC() {
  return {
    exit: {
      taskListCheckValueChecked: Zd,
      taskListCheckValueUnchecked: Zd,
      paragraph: xC
    }
  };
}
function yC() {
  return {
    unsafe: [{ atBreak: !0, character: "-", after: "[:|-]" }],
    handlers: { listItem: kC }
  };
}
function Zd(n) {
  const e = this.stack[this.stack.length - 2];
  e.type, e.checked = n.type === "taskListCheckValueChecked";
}
function xC(n) {
  const e = this.stack[this.stack.length - 2];
  if (e && e.type === "listItem" && typeof e.checked == "boolean") {
    const t = this.stack[this.stack.length - 1];
    t.type;
    const i = t.children[0];
    if (i && i.type === "text") {
      const r = e.children;
      let s = -1, o;
      for (; ++s < r.length; ) {
        const a = r[s];
        if (a.type === "paragraph") {
          o = a;
          break;
        }
      }
      o === t && (i.value = i.value.slice(1), i.value.length === 0 ? t.children.shift() : t.position && i.position && typeof i.position.start.offset == "number" && (i.position.start.column++, i.position.start.offset++, t.position.start = Object.assign({}, i.position.start)));
    }
  }
  this.exit(n);
}
function kC(n, e, t, i) {
  const r = n.children[0], s = typeof n.checked == "boolean" && r && r.type === "paragraph", o = "[" + (n.checked ? "x" : " ") + "] ", a = t.createTracker(i);
  s && a.move(o);
  let l = jO.listItem(n, e, t, {
    ...i,
    ...a.current()
  });
  return s && (l = l.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, c)), l;
  function c(u) {
    return u + o;
  }
}
function SC() {
  return [
    eQ(),
    kQ(),
    EQ(),
    hC(),
    bC()
  ];
}
function wC(n) {
  return {
    extensions: [
      tQ(),
      SQ(n),
      _Q(),
      OC(n),
      yC()
    ]
  };
}
const vC = {
  tokenize: PC,
  partial: !0
}, HO = {
  tokenize: AC,
  partial: !0
}, KO = {
  tokenize: $C,
  partial: !0
}, JO = {
  tokenize: RC,
  partial: !0
}, EC = {
  tokenize: MC,
  partial: !0
}, eb = {
  name: "wwwAutolink",
  tokenize: CC,
  previous: nb
}, tb = {
  name: "protocolAutolink",
  tokenize: TC,
  previous: ib
}, ii = {
  name: "emailAutolink",
  tokenize: QC,
  previous: rb
}, Dn = {};
function _C() {
  return {
    text: Dn
  };
}
let Ci = 48;
for (; Ci < 123; )
  Dn[Ci] = ii, Ci++, Ci === 58 ? Ci = 65 : Ci === 91 && (Ci = 97);
Dn[43] = ii;
Dn[45] = ii;
Dn[46] = ii;
Dn[95] = ii;
Dn[72] = [ii, tb];
Dn[104] = [ii, tb];
Dn[87] = [ii, eb];
Dn[119] = [ii, eb];
function QC(n, e, t) {
  const i = this;
  let r, s;
  return o;
  function o(h) {
    return !Wc(h) || !rb.call(i, i.previous) || Ph(i.events) ? t(h) : (n.enter("literalAutolink"), n.enter("literalAutolinkEmail"), a(h));
  }
  function a(h) {
    return Wc(h) ? (n.consume(h), a) : h === 64 ? (n.consume(h), l) : t(h);
  }
  function l(h) {
    return h === 46 ? n.check(EC, u, c)(h) : h === 45 || h === 95 || vt(h) ? (s = !0, n.consume(h), l) : u(h);
  }
  function c(h) {
    return n.consume(h), r = !0, l;
  }
  function u(h) {
    return s && r && Pt(i.previous) ? (n.exit("literalAutolinkEmail"), n.exit("literalAutolink"), e(h)) : t(h);
  }
}
function CC(n, e, t) {
  const i = this;
  return r;
  function r(o) {
    return o !== 87 && o !== 119 || !nb.call(i, i.previous) || Ph(i.events) ? t(o) : (n.enter("literalAutolink"), n.enter("literalAutolinkWww"), n.check(vC, n.attempt(HO, n.attempt(KO, s), t), t)(o));
  }
  function s(o) {
    return n.exit("literalAutolinkWww"), n.exit("literalAutolink"), e(o);
  }
}
function TC(n, e, t) {
  const i = this;
  let r = "", s = !1;
  return o;
  function o(h) {
    return (h === 72 || h === 104) && ib.call(i, i.previous) && !Ph(i.events) ? (n.enter("literalAutolink"), n.enter("literalAutolinkHttp"), r += String.fromCodePoint(h), n.consume(h), a) : t(h);
  }
  function a(h) {
    if (Pt(h) && r.length < 5)
      return r += String.fromCodePoint(h), n.consume(h), a;
    if (h === 58) {
      const f = r.toLowerCase();
      if (f === "http" || f === "https")
        return n.consume(h), l;
    }
    return t(h);
  }
  function l(h) {
    return h === 47 ? (n.consume(h), s ? c : (s = !0, l)) : t(h);
  }
  function c(h) {
    return h === null || ba(h) || Ze(h) || Li(h) || tl(h) ? t(h) : n.attempt(HO, n.attempt(KO, u), t)(h);
  }
  function u(h) {
    return n.exit("literalAutolinkHttp"), n.exit("literalAutolink"), e(h);
  }
}
function PC(n, e, t) {
  let i = 0;
  return r;
  function r(o) {
    return (o === 87 || o === 119) && i < 3 ? (i++, n.consume(o), r) : o === 46 && i === 3 ? (n.consume(o), s) : t(o);
  }
  function s(o) {
    return o === null ? t(o) : e(o);
  }
}
function AC(n, e, t) {
  let i, r, s;
  return o;
  function o(c) {
    return c === 46 || c === 95 ? n.check(JO, l, a)(c) : c === null || Ze(c) || Li(c) || c !== 45 && tl(c) ? l(c) : (s = !0, n.consume(c), o);
  }
  function a(c) {
    return c === 95 ? i = !0 : (r = i, i = void 0), n.consume(c), o;
  }
  function l(c) {
    return r || i || !s ? t(c) : e(c);
  }
}
function $C(n, e) {
  let t = 0, i = 0;
  return r;
  function r(o) {
    return o === 40 ? (t++, n.consume(o), r) : o === 41 && i < t ? s(o) : o === 33 || o === 34 || o === 38 || o === 39 || o === 41 || o === 42 || o === 44 || o === 46 || o === 58 || o === 59 || o === 60 || o === 63 || o === 93 || o === 95 || o === 126 ? n.check(JO, e, s)(o) : o === null || Ze(o) || Li(o) ? e(o) : (n.consume(o), r);
  }
  function s(o) {
    return o === 41 && i++, n.consume(o), r;
  }
}
function RC(n, e, t) {
  return i;
  function i(a) {
    return a === 33 || a === 34 || a === 39 || a === 41 || a === 42 || a === 44 || a === 46 || a === 58 || a === 59 || a === 63 || a === 95 || a === 126 ? (n.consume(a), i) : a === 38 ? (n.consume(a), s) : a === 93 ? (n.consume(a), r) : (
      // `<` is an end.
      a === 60 || // So is whitespace.
      a === null || Ze(a) || Li(a) ? e(a) : t(a)
    );
  }
  function r(a) {
    return a === null || a === 40 || a === 91 || Ze(a) || Li(a) ? e(a) : i(a);
  }
  function s(a) {
    return Pt(a) ? o(a) : t(a);
  }
  function o(a) {
    return a === 59 ? (n.consume(a), i) : Pt(a) ? (n.consume(a), o) : t(a);
  }
}
function MC(n, e, t) {
  return i;
  function i(s) {
    return n.consume(s), r;
  }
  function r(s) {
    return vt(s) ? t(s) : e(s);
  }
}
function nb(n) {
  return n === null || n === 40 || n === 42 || n === 95 || n === 91 || n === 93 || n === 126 || Ze(n);
}
function ib(n) {
  return !Pt(n);
}
function rb(n) {
  return !(n === 47 || Wc(n));
}
function Wc(n) {
  return n === 43 || n === 45 || n === 46 || n === 95 || vt(n);
}
function Ph(n) {
  let e = n.length, t = !1;
  for (; e--; ) {
    const i = n[e][1];
    if ((i.type === "labelLink" || i.type === "labelImage") && !i._balanced) {
      t = !0;
      break;
    }
    if (i._gfmAutolinkLiteralWalkedInto) {
      t = !1;
      break;
    }
  }
  return n.length > 0 && !t && (n[n.length - 1][1]._gfmAutolinkLiteralWalkedInto = !0), t;
}
const NC = {
  tokenize: qC,
  partial: !0
};
function IC() {
  return {
    document: {
      91: {
        name: "gfmFootnoteDefinition",
        tokenize: zC,
        continuation: {
          tokenize: ZC
        },
        exit: XC
      }
    },
    text: {
      91: {
        name: "gfmFootnoteCall",
        tokenize: BC
      },
      93: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: LC,
        resolveTo: DC
      }
    }
  };
}
function LC(n, e, t) {
  const i = this;
  let r = i.events.length;
  const s = i.parser.gfmFootnotes || (i.parser.gfmFootnotes = []);
  let o;
  for (; r--; ) {
    const l = i.events[r][1];
    if (l.type === "labelImage") {
      o = l;
      break;
    }
    if (l.type === "gfmFootnoteCall" || l.type === "labelLink" || l.type === "label" || l.type === "image" || l.type === "link")
      break;
  }
  return a;
  function a(l) {
    if (!o || !o._balanced)
      return t(l);
    const c = mn(i.sliceSerialize({
      start: o.end,
      end: i.now()
    }));
    return c.codePointAt(0) !== 94 || !s.includes(c.slice(1)) ? t(l) : (n.enter("gfmFootnoteCallLabelMarker"), n.consume(l), n.exit("gfmFootnoteCallLabelMarker"), e(l));
  }
}
function DC(n, e) {
  let t = n.length;
  for (; t--; )
    if (n[t][1].type === "labelImage" && n[t][0] === "enter") {
      n[t][1];
      break;
    }
  n[t + 1][1].type = "data", n[t + 3][1].type = "gfmFootnoteCallLabelMarker";
  const i = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, n[t + 3][1].start),
    end: Object.assign({}, n[n.length - 1][1].end)
  }, r = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, n[t + 3][1].end),
    end: Object.assign({}, n[t + 3][1].end)
  };
  r.end.column++, r.end.offset++, r.end._bufferIndex++;
  const s = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, r.end),
    end: Object.assign({}, n[n.length - 1][1].start)
  }, o = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, s.start),
    end: Object.assign({}, s.end)
  }, a = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    n[t + 1],
    n[t + 2],
    ["enter", i, e],
    // The `[`
    n[t + 3],
    n[t + 4],
    // The `^`.
    ["enter", r, e],
    ["exit", r, e],
    // Everything in between.
    ["enter", s, e],
    ["enter", o, e],
    ["exit", o, e],
    ["exit", s, e],
    // The ending (`]`, properly parsed and labelled).
    n[n.length - 2],
    n[n.length - 1],
    ["exit", i, e]
  ];
  return n.splice(t, n.length - t + 1, ...a), n;
}
function BC(n, e, t) {
  const i = this, r = i.parser.gfmFootnotes || (i.parser.gfmFootnotes = []);
  let s = 0, o;
  return a;
  function a(h) {
    return n.enter("gfmFootnoteCall"), n.enter("gfmFootnoteCallLabelMarker"), n.consume(h), n.exit("gfmFootnoteCallLabelMarker"), l;
  }
  function l(h) {
    return h !== 94 ? t(h) : (n.enter("gfmFootnoteCallMarker"), n.consume(h), n.exit("gfmFootnoteCallMarker"), n.enter("gfmFootnoteCallString"), n.enter("chunkString").contentType = "string", c);
  }
  function c(h) {
    if (
      // Too long.
      s > 999 || // Closing brace with nothing.
      h === 93 && !o || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      h === null || h === 91 || Ze(h)
    )
      return t(h);
    if (h === 93) {
      n.exit("chunkString");
      const f = n.exit("gfmFootnoteCallString");
      return r.includes(mn(i.sliceSerialize(f))) ? (n.enter("gfmFootnoteCallLabelMarker"), n.consume(h), n.exit("gfmFootnoteCallLabelMarker"), n.exit("gfmFootnoteCall"), e) : t(h);
    }
    return Ze(h) || (o = !0), s++, n.consume(h), h === 92 ? u : c;
  }
  function u(h) {
    return h === 91 || h === 92 || h === 93 ? (n.consume(h), s++, c) : c(h);
  }
}
function zC(n, e, t) {
  const i = this, r = i.parser.gfmFootnotes || (i.parser.gfmFootnotes = []);
  let s, o = 0, a;
  return l;
  function l(p) {
    return n.enter("gfmFootnoteDefinition")._container = !0, n.enter("gfmFootnoteDefinitionLabel"), n.enter("gfmFootnoteDefinitionLabelMarker"), n.consume(p), n.exit("gfmFootnoteDefinitionLabelMarker"), c;
  }
  function c(p) {
    return p === 94 ? (n.enter("gfmFootnoteDefinitionMarker"), n.consume(p), n.exit("gfmFootnoteDefinitionMarker"), n.enter("gfmFootnoteDefinitionLabelString"), n.enter("chunkString").contentType = "string", u) : t(p);
  }
  function u(p) {
    if (
      // Too long.
      o > 999 || // Closing brace with nothing.
      p === 93 && !a || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      p === null || p === 91 || Ze(p)
    )
      return t(p);
    if (p === 93) {
      n.exit("chunkString");
      const m = n.exit("gfmFootnoteDefinitionLabelString");
      return s = mn(i.sliceSerialize(m)), n.enter("gfmFootnoteDefinitionLabelMarker"), n.consume(p), n.exit("gfmFootnoteDefinitionLabelMarker"), n.exit("gfmFootnoteDefinitionLabel"), f;
    }
    return Ze(p) || (a = !0), o++, n.consume(p), p === 92 ? h : u;
  }
  function h(p) {
    return p === 91 || p === 92 || p === 93 ? (n.consume(p), o++, u) : u(p);
  }
  function f(p) {
    return p === 58 ? (n.enter("definitionMarker"), n.consume(p), n.exit("definitionMarker"), r.includes(s) || r.push(s), Pe(n, d, "gfmFootnoteDefinitionWhitespace")) : t(p);
  }
  function d(p) {
    return e(p);
  }
}
function ZC(n, e, t) {
  return n.check(js, e, n.attempt(NC, e, t));
}
function XC(n) {
  n.exit("gfmFootnoteDefinition");
}
function qC(n, e, t) {
  const i = this;
  return Pe(n, r, "gfmFootnoteDefinitionIndent", 5);
  function r(s) {
    const o = i.events[i.events.length - 1];
    return o && o[1].type === "gfmFootnoteDefinitionIndent" && o[2].sliceSerialize(o[1], !0).length === 4 ? e(s) : t(s);
  }
}
function VC(n) {
  let t = (n || {}).singleTilde;
  const i = {
    name: "strikethrough",
    tokenize: s,
    resolveAll: r
  };
  return t == null && (t = !0), {
    text: {
      126: i
    },
    insideSpan: {
      null: [i]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function r(o, a) {
    let l = -1;
    for (; ++l < o.length; )
      if (o[l][0] === "enter" && o[l][1].type === "strikethroughSequenceTemporary" && o[l][1]._close) {
        let c = l;
        for (; c--; )
          if (o[c][0] === "exit" && o[c][1].type === "strikethroughSequenceTemporary" && o[c][1]._open && // If the sizes are the same:
          o[l][1].end.offset - o[l][1].start.offset === o[c][1].end.offset - o[c][1].start.offset) {
            o[l][1].type = "strikethroughSequence", o[c][1].type = "strikethroughSequence";
            const u = {
              type: "strikethrough",
              start: Object.assign({}, o[c][1].start),
              end: Object.assign({}, o[l][1].end)
            }, h = {
              type: "strikethroughText",
              start: Object.assign({}, o[c][1].end),
              end: Object.assign({}, o[l][1].start)
            }, f = [["enter", u, a], ["enter", o[c][1], a], ["exit", o[c][1], a], ["enter", h, a]], d = a.parser.constructs.insideSpan.null;
            d && en(f, f.length, 0, nl(d, o.slice(c + 1, l), a)), en(f, f.length, 0, [["exit", h, a], ["enter", o[l][1], a], ["exit", o[l][1], a], ["exit", u, a]]), en(o, c - 1, l - c + 3, f), l = c + f.length - 2;
            break;
          }
      }
    for (l = -1; ++l < o.length; )
      o[l][1].type === "strikethroughSequenceTemporary" && (o[l][1].type = "data");
    return o;
  }
  function s(o, a, l) {
    const c = this.previous, u = this.events;
    let h = 0;
    return f;
    function f(p) {
      return c === 126 && u[u.length - 1][1].type !== "characterEscape" ? l(p) : (o.enter("strikethroughSequenceTemporary"), d(p));
    }
    function d(p) {
      const m = pr(c);
      if (p === 126)
        return h > 1 ? l(p) : (o.consume(p), h++, d);
      if (h < 2 && !t) return l(p);
      const O = o.exit("strikethroughSequenceTemporary"), g = pr(p);
      return O._open = !g || g === 2 && !!m, O._close = !m || m === 2 && !!g, a(p);
    }
  }
}
class YC {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(e, t, i) {
    FC(this, e, t, i);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(e) {
    if (this.map.sort(function(s, o) {
      return s[0] - o[0];
    }), this.map.length === 0)
      return;
    let t = this.map.length;
    const i = [];
    for (; t > 0; )
      t -= 1, i.push(e.slice(this.map[t][0] + this.map[t][1]), this.map[t][2]), e.length = this.map[t][0];
    i.push(e.slice()), e.length = 0;
    let r = i.pop();
    for (; r; ) {
      for (const s of r)
        e.push(s);
      r = i.pop();
    }
    this.map.length = 0;
  }
}
function FC(n, e, t, i) {
  let r = 0;
  if (!(t === 0 && i.length === 0)) {
    for (; r < n.map.length; ) {
      if (n.map[r][0] === e) {
        n.map[r][1] += t, n.map[r][2].push(...i);
        return;
      }
      r += 1;
    }
    n.map.push([e, t, i]);
  }
}
function UC(n, e) {
  let t = !1;
  const i = [];
  for (; e < n.length; ) {
    const r = n[e];
    if (t) {
      if (r[0] === "enter")
        r[1].type === "tableContent" && i.push(n[e + 1][1].type === "tableDelimiterMarker" ? "left" : "none");
      else if (r[1].type === "tableContent") {
        if (n[e - 1][1].type === "tableDelimiterMarker") {
          const s = i.length - 1;
          i[s] = i[s] === "left" ? "center" : "right";
        }
      } else if (r[1].type === "tableDelimiterRow")
        break;
    } else r[0] === "enter" && r[1].type === "tableDelimiterRow" && (t = !0);
    e += 1;
  }
  return i;
}
function GC() {
  return {
    flow: {
      null: {
        name: "table",
        tokenize: WC,
        resolveAll: jC
      }
    }
  };
}
function WC(n, e, t) {
  const i = this;
  let r = 0, s = 0, o;
  return a;
  function a(Q) {
    let M = i.events.length - 1;
    for (; M > -1; ) {
      const P = i.events[M][1].type;
      if (P === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      P === "linePrefix") M--;
      else break;
    }
    const R = M > -1 ? i.events[M][1].type : null, L = R === "tableHead" || R === "tableRow" ? x : l;
    return L === x && i.parser.lazy[i.now().line] ? t(Q) : L(Q);
  }
  function l(Q) {
    return n.enter("tableHead"), n.enter("tableRow"), c(Q);
  }
  function c(Q) {
    return Q === 124 || (o = !0, s += 1), u(Q);
  }
  function u(Q) {
    return Q === null ? t(Q) : ue(Q) ? s > 1 ? (s = 0, i.interrupt = !0, n.exit("tableRow"), n.enter("lineEnding"), n.consume(Q), n.exit("lineEnding"), d) : t(Q) : Se(Q) ? Pe(n, u, "whitespace")(Q) : (s += 1, o && (o = !1, r += 1), Q === 124 ? (n.enter("tableCellDivider"), n.consume(Q), n.exit("tableCellDivider"), o = !0, u) : (n.enter("data"), h(Q)));
  }
  function h(Q) {
    return Q === null || Q === 124 || Ze(Q) ? (n.exit("data"), u(Q)) : (n.consume(Q), Q === 92 ? f : h);
  }
  function f(Q) {
    return Q === 92 || Q === 124 ? (n.consume(Q), h) : h(Q);
  }
  function d(Q) {
    return i.interrupt = !1, i.parser.lazy[i.now().line] ? t(Q) : (n.enter("tableDelimiterRow"), o = !1, Se(Q) ? Pe(n, p, "linePrefix", i.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(Q) : p(Q));
  }
  function p(Q) {
    return Q === 45 || Q === 58 ? O(Q) : Q === 124 ? (o = !0, n.enter("tableCellDivider"), n.consume(Q), n.exit("tableCellDivider"), m) : v(Q);
  }
  function m(Q) {
    return Se(Q) ? Pe(n, O, "whitespace")(Q) : O(Q);
  }
  function O(Q) {
    return Q === 58 ? (s += 1, o = !0, n.enter("tableDelimiterMarker"), n.consume(Q), n.exit("tableDelimiterMarker"), g) : Q === 45 ? (s += 1, g(Q)) : Q === null || ue(Q) ? _(Q) : v(Q);
  }
  function g(Q) {
    return Q === 45 ? (n.enter("tableDelimiterFiller"), y(Q)) : v(Q);
  }
  function y(Q) {
    return Q === 45 ? (n.consume(Q), y) : Q === 58 ? (o = !0, n.exit("tableDelimiterFiller"), n.enter("tableDelimiterMarker"), n.consume(Q), n.exit("tableDelimiterMarker"), S) : (n.exit("tableDelimiterFiller"), S(Q));
  }
  function S(Q) {
    return Se(Q) ? Pe(n, _, "whitespace")(Q) : _(Q);
  }
  function _(Q) {
    return Q === 124 ? p(Q) : Q === null || ue(Q) ? !o || r !== s ? v(Q) : (n.exit("tableDelimiterRow"), n.exit("tableHead"), e(Q)) : v(Q);
  }
  function v(Q) {
    return t(Q);
  }
  function x(Q) {
    return n.enter("tableRow"), C(Q);
  }
  function C(Q) {
    return Q === 124 ? (n.enter("tableCellDivider"), n.consume(Q), n.exit("tableCellDivider"), C) : Q === null || ue(Q) ? (n.exit("tableRow"), e(Q)) : Se(Q) ? Pe(n, C, "whitespace")(Q) : (n.enter("data"), T(Q));
  }
  function T(Q) {
    return Q === null || Q === 124 || Ze(Q) ? (n.exit("data"), C(Q)) : (n.consume(Q), Q === 92 ? A : T);
  }
  function A(Q) {
    return Q === 92 || Q === 124 ? (n.consume(Q), T) : T(Q);
  }
}
function jC(n, e) {
  let t = -1, i = !0, r = 0, s = [0, 0, 0, 0], o = [0, 0, 0, 0], a = !1, l = 0, c, u, h;
  const f = new YC();
  for (; ++t < n.length; ) {
    const d = n[t], p = d[1];
    d[0] === "enter" ? p.type === "tableHead" ? (a = !1, l !== 0 && (Xd(f, e, l, c, u), u = void 0, l = 0), c = {
      type: "table",
      start: Object.assign({}, p.start),
      // Note: correct end is set later.
      end: Object.assign({}, p.end)
    }, f.add(t, 0, [["enter", c, e]])) : p.type === "tableRow" || p.type === "tableDelimiterRow" ? (i = !0, h = void 0, s = [0, 0, 0, 0], o = [0, t + 1, 0, 0], a && (a = !1, u = {
      type: "tableBody",
      start: Object.assign({}, p.start),
      // Note: correct end is set later.
      end: Object.assign({}, p.end)
    }, f.add(t, 0, [["enter", u, e]])), r = p.type === "tableDelimiterRow" ? 2 : u ? 3 : 1) : r && (p.type === "data" || p.type === "tableDelimiterMarker" || p.type === "tableDelimiterFiller") ? (i = !1, o[2] === 0 && (s[1] !== 0 && (o[0] = o[1], h = vo(f, e, s, r, void 0, h), s = [0, 0, 0, 0]), o[2] = t)) : p.type === "tableCellDivider" && (i ? i = !1 : (s[1] !== 0 && (o[0] = o[1], h = vo(f, e, s, r, void 0, h)), s = o, o = [s[1], t, 0, 0])) : p.type === "tableHead" ? (a = !0, l = t) : p.type === "tableRow" || p.type === "tableDelimiterRow" ? (l = t, s[1] !== 0 ? (o[0] = o[1], h = vo(f, e, s, r, t, h)) : o[1] !== 0 && (h = vo(f, e, o, r, t, h)), r = 0) : r && (p.type === "data" || p.type === "tableDelimiterMarker" || p.type === "tableDelimiterFiller") && (o[3] = t);
  }
  for (l !== 0 && Xd(f, e, l, c, u), f.consume(e.events), t = -1; ++t < e.events.length; ) {
    const d = e.events[t];
    d[0] === "enter" && d[1].type === "table" && (d[1]._align = UC(e.events, t));
  }
  return n;
}
function vo(n, e, t, i, r, s) {
  const o = i === 1 ? "tableHeader" : i === 2 ? "tableDelimiter" : "tableData", a = "tableContent";
  t[0] !== 0 && (s.end = Object.assign({}, Ki(e.events, t[0])), n.add(t[0], 0, [["exit", s, e]]));
  const l = Ki(e.events, t[1]);
  if (s = {
    type: o,
    start: Object.assign({}, l),
    // Note: correct end is set later.
    end: Object.assign({}, l)
  }, n.add(t[1], 0, [["enter", s, e]]), t[2] !== 0) {
    const c = Ki(e.events, t[2]), u = Ki(e.events, t[3]), h = {
      type: a,
      start: Object.assign({}, c),
      end: Object.assign({}, u)
    };
    if (n.add(t[2], 0, [["enter", h, e]]), i !== 2) {
      const f = e.events[t[2]], d = e.events[t[3]];
      if (f[1].end = Object.assign({}, d[1].end), f[1].type = "chunkText", f[1].contentType = "text", t[3] > t[2] + 1) {
        const p = t[2] + 1, m = t[3] - t[2] - 1;
        n.add(p, m, []);
      }
    }
    n.add(t[3] + 1, 0, [["exit", h, e]]);
  }
  return r !== void 0 && (s.end = Object.assign({}, Ki(e.events, r)), n.add(r, 0, [["exit", s, e]]), s = void 0), s;
}
function Xd(n, e, t, i, r) {
  const s = [], o = Ki(e.events, t);
  r && (r.end = Object.assign({}, o), s.push(["exit", r, e])), i.end = Object.assign({}, o), s.push(["exit", i, e]), n.add(t + 1, 0, s);
}
function Ki(n, e) {
  const t = n[e], i = t[0] === "enter" ? "start" : "end";
  return t[1][i];
}
const HC = {
  name: "tasklistCheck",
  tokenize: JC
};
function KC() {
  return {
    text: {
      91: HC
    }
  };
}
function JC(n, e, t) {
  const i = this;
  return r;
  function r(l) {
    return (
      // Exit if there’s stuff before.
      i.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !i._gfmTasklistFirstContentOfListItem ? t(l) : (n.enter("taskListCheck"), n.enter("taskListCheckMarker"), n.consume(l), n.exit("taskListCheckMarker"), s)
    );
  }
  function s(l) {
    return Ze(l) ? (n.enter("taskListCheckValueUnchecked"), n.consume(l), n.exit("taskListCheckValueUnchecked"), o) : l === 88 || l === 120 ? (n.enter("taskListCheckValueChecked"), n.consume(l), n.exit("taskListCheckValueChecked"), o) : t(l);
  }
  function o(l) {
    return l === 93 ? (n.enter("taskListCheckMarker"), n.consume(l), n.exit("taskListCheckMarker"), n.exit("taskListCheck"), a) : t(l);
  }
  function a(l) {
    return ue(l) ? e(l) : Se(l) ? n.check({
      tokenize: eT
    }, e, t)(l) : t(l);
  }
}
function eT(n, e, t) {
  return Pe(n, i, "whitespace");
  function i(r) {
    return r === null ? t(r) : e(r);
  }
}
function tT(n) {
  return tO([
    _C(),
    IC(),
    VC(n),
    GC(),
    KC()
  ]);
}
const nT = {};
function iT(n) {
  const e = (
    /** @type {Processor<Root>} */
    this
  ), t = n || nT, i = e.data(), r = i.micromarkExtensions || (i.micromarkExtensions = []), s = i.fromMarkdownExtensions || (i.fromMarkdownExtensions = []), o = i.toMarkdownExtensions || (i.toMarkdownExtensions = []);
  r.push(tT(t)), s.push(SC()), o.push(wC(t));
}
const qd = (
  // Note: overloads like this are needed to support optional generics.
  /**
   * @type {(
   *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, index: Child<Kind> | number, test: Check) => Matches<Child<Kind>, Check> | undefined) &
   *   (<Kind extends UnistParent>(parent: Kind, index: Child<Kind> | number, test?: null | undefined) => Child<Kind> | undefined)
   * )}
   */
  /**
   * @param {UnistParent} parent
   * @param {UnistNode | number} index
   * @param {Test} [test]
   * @returns {UnistNode | undefined}
   */
  function(n, e, t) {
    const i = Hs(t);
    if (!n || !n.type || !n.children)
      throw new Error("Expected parent node");
    if (typeof e == "number") {
      if (e < 0 || e === Number.POSITIVE_INFINITY)
        throw new Error("Expected positive finite number as index");
    } else if (e = n.children.indexOf(e), e < 0)
      throw new Error("Expected child node or index");
    for (; ++e < n.children.length; )
      if (i(n.children[e], e, n))
        return n.children[e];
  }
), Vi = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(n) {
    if (n == null)
      return oT;
    if (typeof n == "string")
      return sT(n);
    if (typeof n == "object")
      return rT(n);
    if (typeof n == "function")
      return Ah(n);
    throw new Error("Expected function, string, or array as `test`");
  }
);
function rT(n) {
  const e = [];
  let t = -1;
  for (; ++t < n.length; )
    e[t] = Vi(n[t]);
  return Ah(i);
  function i(...r) {
    let s = -1;
    for (; ++s < e.length; )
      if (e[s].apply(this, r)) return !0;
    return !1;
  }
}
function sT(n) {
  return Ah(e);
  function e(t) {
    return t.tagName === n;
  }
}
function Ah(n) {
  return e;
  function e(t, i, r) {
    return !!(aT(t) && n.call(
      this,
      t,
      typeof i == "number" ? i : void 0,
      r || void 0
    ));
  }
}
function oT(n) {
  return !!(n && typeof n == "object" && "type" in n && n.type === "element" && "tagName" in n && typeof n.tagName == "string");
}
function aT(n) {
  return n !== null && typeof n == "object" && "type" in n && "tagName" in n;
}
const Vd = /\n/g, Yd = /[\t ]+/g, jc = Vi("br"), Fd = Vi(mT), lT = Vi("p"), Ud = Vi("tr"), cT = Vi([
  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>
  "datalist",
  "head",
  "noembed",
  "noframes",
  "noscript",
  // Act as if we support scripting.
  "rp",
  "script",
  "style",
  "template",
  "title",
  // Hidden attribute.
  pT,
  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>
  gT
]), sb = Vi([
  "address",
  // Flow content
  "article",
  // Sections and headings
  "aside",
  // Sections and headings
  "blockquote",
  // Flow content
  "body",
  // Page
  "caption",
  // `table-caption`
  "center",
  // Flow content (legacy)
  "dd",
  // Lists
  "dialog",
  // Flow content
  "dir",
  // Lists (legacy)
  "dl",
  // Lists
  "dt",
  // Lists
  "div",
  // Flow content
  "figure",
  // Flow content
  "figcaption",
  // Flow content
  "footer",
  // Flow content
  "form,",
  // Flow content
  "h1",
  // Sections and headings
  "h2",
  // Sections and headings
  "h3",
  // Sections and headings
  "h4",
  // Sections and headings
  "h5",
  // Sections and headings
  "h6",
  // Sections and headings
  "header",
  // Flow content
  "hgroup",
  // Sections and headings
  "hr",
  // Flow content
  "html",
  // Page
  "legend",
  // Flow content
  "li",
  // Lists (as `display: list-item`)
  "listing",
  // Flow content (legacy)
  "main",
  // Flow content
  "menu",
  // Lists
  "nav",
  // Sections and headings
  "ol",
  // Lists
  "p",
  // Flow content
  "plaintext",
  // Flow content (legacy)
  "pre",
  // Flow content
  "section",
  // Sections and headings
  "ul",
  // Lists
  "xmp"
  // Flow content (legacy)
]);
function uT(n, e) {
  const t = e || {}, i = "children" in n ? n.children : [], r = sb(n), s = lb(n, {
    whitespace: t.whitespace || "normal"
  }), o = [];
  (n.type === "text" || n.type === "comment") && o.push(
    ...ab(n, {
      breakBefore: !0,
      breakAfter: !0
    })
  );
  let a = -1;
  for (; ++a < i.length; )
    o.push(
      ...ob(
        i[a],
        // @ts-expect-error: `tree` is a parent if we’re here.
        n,
        {
          whitespace: s,
          breakBefore: a ? void 0 : r,
          breakAfter: a < i.length - 1 ? jc(i[a + 1]) : r
        }
      )
    );
  const l = [];
  let c;
  for (a = -1; ++a < o.length; ) {
    const u = o[a];
    typeof u == "number" ? c !== void 0 && u > c && (c = u) : u && (c !== void 0 && c > -1 && l.push(`
`.repeat(c) || " "), c = -1, l.push(u));
  }
  return l.join("");
}
function ob(n, e, t) {
  return n.type === "element" ? hT(n, e, t) : n.type === "text" ? t.whitespace === "normal" ? ab(n, t) : fT(n) : [];
}
function hT(n, e, t) {
  const i = lb(n, t), r = n.children || [];
  let s = -1, o = [];
  if (cT(n))
    return o;
  let a, l;
  for (jc(n) || Ud(n) && // @ts-expect-error: something up with types of parents.
  qd(e, n, Ud) ? l = `
` : lT(n) ? (a = 2, l = 2) : sb(n) && (a = 1, l = 1); ++s < r.length; )
    o = o.concat(
      ob(r[s], n, {
        whitespace: i,
        breakBefore: s ? void 0 : a,
        breakAfter: s < r.length - 1 ? jc(r[s + 1]) : l
      })
    );
  return Fd(n) && // @ts-expect-error: something up with types of parents.
  qd(e, n, Fd) && o.push("	"), a && o.unshift(a), l && o.push(l), o;
}
function ab(n, e) {
  const t = String(n.value), i = [], r = [];
  let s = 0;
  for (; s <= t.length; ) {
    Vd.lastIndex = s;
    const l = Vd.exec(t), c = l && "index" in l ? l.index : t.length;
    i.push(
      // Any sequence of collapsible spaces and tabs immediately preceding or
      // following a segment break is removed.
      dT(
        // […] ignoring bidi formatting characters (characters with the
        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
        // they were not there.
        t.slice(s, c).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ""),
        s === 0 ? e.breakBefore : !0,
        c === t.length ? e.breakAfter : !0
      )
    ), s = c + 1;
  }
  let o = -1, a;
  for (; ++o < i.length; )
    i[o].charCodeAt(i[o].length - 1) === 8203 || o < i.length - 1 && i[o + 1].charCodeAt(0) === 8203 ? (r.push(i[o]), a = void 0) : i[o] ? (typeof a == "number" && r.push(a), r.push(i[o]), a = 0) : (o === 0 || o === i.length - 1) && r.push(0);
  return r;
}
function fT(n) {
  return [String(n.value)];
}
function dT(n, e, t) {
  const i = [];
  let r = 0, s;
  for (; r < n.length; ) {
    Yd.lastIndex = r;
    const o = Yd.exec(n);
    s = o ? o.index : n.length, !r && !s && o && !e && i.push(""), r !== s && i.push(n.slice(r, s)), r = o ? s + o[0].length : s;
  }
  return r !== s && !t && i.push(""), i.join(" ");
}
function lb(n, e) {
  if (n.type === "element") {
    const t = n.properties || {};
    switch (n.tagName) {
      case "listing":
      case "plaintext":
      case "xmp":
        return "pre";
      case "nobr":
        return "nowrap";
      case "pre":
        return t.wrap ? "pre-wrap" : "pre";
      case "td":
      case "th":
        return t.noWrap ? "nowrap" : e.whitespace;
      case "textarea":
        return "pre-wrap";
    }
  }
  return e.whitespace;
}
function pT(n) {
  return !!(n.properties || {}).hidden;
}
function mT(n) {
  return n.tagName === "td" || n.tagName === "th";
}
function gT(n) {
  return n.tagName === "dialog" && !(n.properties || {}).open;
}
function OT(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", r = "[a-zA-Z_]\\w*::", o = "(?!struct)(" + i + "|" + e.optional(r) + "[a-zA-Z_]\\w*" + e.optional("<[^<>]+>") + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      // Floating-point literal.
      {
        begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
      },
      // Integer literal.
      {
        begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
        // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
        // literal highlight actually makes it stand out more.
      }
    ],
    relevance: 0
  }, h = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(r) + n.IDENT_RE,
    relevance: 0
  }, d = e.optional(r) + n.IDENT_RE + "\\s*\\(", p = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], m = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], O = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "flat_map",
    "flat_set",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], g = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], _ = {
    type: m,
    keyword: p,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: O
  }, v = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: g
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      n.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, x = [
    v,
    h,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], C = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: _,
    contains: x.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: _,
        contains: x.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + d,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: _,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: i,
        keywords: _,
        relevance: 0
      },
      {
        begin: d,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          c,
          u
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: _,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: _,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      h
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: _,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      C,
      T,
      v,
      x,
      [
        h,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
          end: ">",
          keywords: _,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: n.IDENT_RE + "::",
          keywords: _
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function bT(n) {
  const e = {
    type: [
      "boolean",
      "byte",
      "word",
      "String"
    ],
    built_in: [
      "KeyboardController",
      "MouseController",
      "SoftwareSerial",
      "EthernetServer",
      "EthernetClient",
      "LiquidCrystal",
      "RobotControl",
      "GSMVoiceCall",
      "EthernetUDP",
      "EsploraTFT",
      "HttpClient",
      "RobotMotor",
      "WiFiClient",
      "GSMScanner",
      "FileSystem",
      "Scheduler",
      "GSMServer",
      "YunClient",
      "YunServer",
      "IPAddress",
      "GSMClient",
      "GSMModem",
      "Keyboard",
      "Ethernet",
      "Console",
      "GSMBand",
      "Esplora",
      "Stepper",
      "Process",
      "WiFiUDP",
      "GSM_SMS",
      "Mailbox",
      "USBHost",
      "Firmata",
      "PImage",
      "Client",
      "Server",
      "GSMPIN",
      "FileIO",
      "Bridge",
      "Serial",
      "EEPROM",
      "Stream",
      "Mouse",
      "Audio",
      "Servo",
      "File",
      "Task",
      "GPRS",
      "WiFi",
      "Wire",
      "TFT",
      "GSM",
      "SPI",
      "SD"
    ],
    _hints: [
      "setup",
      "loop",
      "runShellCommandAsynchronously",
      "analogWriteResolution",
      "retrieveCallingNumber",
      "printFirmwareVersion",
      "analogReadResolution",
      "sendDigitalPortPair",
      "noListenOnLocalhost",
      "readJoystickButton",
      "setFirmwareVersion",
      "readJoystickSwitch",
      "scrollDisplayRight",
      "getVoiceCallStatus",
      "scrollDisplayLeft",
      "writeMicroseconds",
      "delayMicroseconds",
      "beginTransmission",
      "getSignalStrength",
      "runAsynchronously",
      "getAsynchronously",
      "listenOnLocalhost",
      "getCurrentCarrier",
      "readAccelerometer",
      "messageAvailable",
      "sendDigitalPorts",
      "lineFollowConfig",
      "countryNameWrite",
      "runShellCommand",
      "readStringUntil",
      "rewindDirectory",
      "readTemperature",
      "setClockDivider",
      "readLightSensor",
      "endTransmission",
      "analogReference",
      "detachInterrupt",
      "countryNameRead",
      "attachInterrupt",
      "encryptionType",
      "readBytesUntil",
      "robotNameWrite",
      "readMicrophone",
      "robotNameRead",
      "cityNameWrite",
      "userNameWrite",
      "readJoystickY",
      "readJoystickX",
      "mouseReleased",
      "openNextFile",
      "scanNetworks",
      "noInterrupts",
      "digitalWrite",
      "beginSpeaker",
      "mousePressed",
      "isActionDone",
      "mouseDragged",
      "displayLogos",
      "noAutoscroll",
      "addParameter",
      "remoteNumber",
      "getModifiers",
      "keyboardRead",
      "userNameRead",
      "waitContinue",
      "processInput",
      "parseCommand",
      "printVersion",
      "readNetworks",
      "writeMessage",
      "blinkVersion",
      "cityNameRead",
      "readMessage",
      "setDataMode",
      "parsePacket",
      "isListening",
      "setBitOrder",
      "beginPacket",
      "isDirectory",
      "motorsWrite",
      "drawCompass",
      "digitalRead",
      "clearScreen",
      "serialEvent",
      "rightToLeft",
      "setTextSize",
      "leftToRight",
      "requestFrom",
      "keyReleased",
      "compassRead",
      "analogWrite",
      "interrupts",
      "WiFiServer",
      "disconnect",
      "playMelody",
      "parseFloat",
      "autoscroll",
      "getPINUsed",
      "setPINUsed",
      "setTimeout",
      "sendAnalog",
      "readSlider",
      "analogRead",
      "beginWrite",
      "createChar",
      "motorsStop",
      "keyPressed",
      "tempoWrite",
      "readButton",
      "subnetMask",
      "debugPrint",
      "macAddress",
      "writeGreen",
      "randomSeed",
      "attachGPRS",
      "readString",
      "sendString",
      "remotePort",
      "releaseAll",
      "mouseMoved",
      "background",
      "getXChange",
      "getYChange",
      "answerCall",
      "getResult",
      "voiceCall",
      "endPacket",
      "constrain",
      "getSocket",
      "writeJSON",
      "getButton",
      "available",
      "connected",
      "findUntil",
      "readBytes",
      "exitValue",
      "readGreen",
      "writeBlue",
      "startLoop",
      "IPAddress",
      "isPressed",
      "sendSysex",
      "pauseMode",
      "gatewayIP",
      "setCursor",
      "getOemKey",
      "tuneWrite",
      "noDisplay",
      "loadImage",
      "switchPIN",
      "onRequest",
      "onReceive",
      "changePIN",
      "playFile",
      "noBuffer",
      "parseInt",
      "overflow",
      "checkPIN",
      "knobRead",
      "beginTFT",
      "bitClear",
      "updateIR",
      "bitWrite",
      "position",
      "writeRGB",
      "highByte",
      "writeRed",
      "setSpeed",
      "readBlue",
      "noStroke",
      "remoteIP",
      "transfer",
      "shutdown",
      "hangCall",
      "beginSMS",
      "endWrite",
      "attached",
      "maintain",
      "noCursor",
      "checkReg",
      "checkPUK",
      "shiftOut",
      "isValid",
      "shiftIn",
      "pulseIn",
      "connect",
      "println",
      "localIP",
      "pinMode",
      "getIMEI",
      "display",
      "noBlink",
      "process",
      "getBand",
      "running",
      "beginSD",
      "drawBMP",
      "lowByte",
      "setBand",
      "release",
      "bitRead",
      "prepare",
      "pointTo",
      "readRed",
      "setMode",
      "noFill",
      "remove",
      "listen",
      "stroke",
      "detach",
      "attach",
      "noTone",
      "exists",
      "buffer",
      "height",
      "bitSet",
      "circle",
      "config",
      "cursor",
      "random",
      "IRread",
      "setDNS",
      "endSMS",
      "getKey",
      "micros",
      "millis",
      "begin",
      "print",
      "write",
      "ready",
      "flush",
      "width",
      "isPIN",
      "blink",
      "clear",
      "press",
      "mkdir",
      "rmdir",
      "close",
      "point",
      "yield",
      "image",
      "BSSID",
      "click",
      "delay",
      "read",
      "text",
      "move",
      "peek",
      "beep",
      "rect",
      "line",
      "open",
      "seek",
      "fill",
      "size",
      "turn",
      "stop",
      "home",
      "find",
      "step",
      "tone",
      "sqrt",
      "RSSI",
      "SSID",
      "end",
      "bit",
      "tan",
      "cos",
      "sin",
      "pow",
      "map",
      "abs",
      "max",
      "min",
      "get",
      "run",
      "put"
    ],
    literal: [
      "DIGITAL_MESSAGE",
      "FIRMATA_STRING",
      "ANALOG_MESSAGE",
      "REPORT_DIGITAL",
      "REPORT_ANALOG",
      "INPUT_PULLUP",
      "SET_PIN_MODE",
      "INTERNAL2V56",
      "SYSTEM_RESET",
      "LED_BUILTIN",
      "INTERNAL1V1",
      "SYSEX_START",
      "INTERNAL",
      "EXTERNAL",
      "DEFAULT",
      "OUTPUT",
      "INPUT",
      "HIGH",
      "LOW"
    ]
  }, t = OT(n), i = (
    /** @type {Record<string,any>} */
    t.keywords
  );
  return i.type = [
    ...i.type,
    ...e.type
  ], i.literal = [
    ...i.literal,
    ...e.literal
  ], i.built_in = [
    ...i.built_in,
    ...e.built_in
  ], i._hints = e._hints, t.name = "Arduino", t.aliases = ["ino"], t.supersetOf = "cpp", t;
}
function Hc(n) {
  const e = n.regex, t = {}, i = {
    begin: /\$\{/,
    end: /\}/,
    contains: [
      "self",
      {
        begin: /:-/,
        contains: [t]
      }
      // default values
    ]
  };
  Object.assign(t, {
    className: "variable",
    variants: [
      { begin: e.concat(
        /\$[\w\d#@][\w\d_]*/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![\\w\\d])(?![$])"
      ) },
      i
    ]
  });
  const r = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    contains: [n.BACKSLASH_ESCAPE]
  }, s = n.inherit(
    n.COMMENT(),
    {
      match: [
        /(^|\s)/,
        /#.*$/
      ],
      scope: {
        2: "comment"
      }
    }
  ), o = {
    begin: /<<-?\s*(?=\w+)/,
    starts: { contains: [
      n.END_SAME_AS_BEGIN({
        begin: /(\w+)/,
        end: /(\w+)/,
        className: "string"
      })
    ] }
  }, a = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      n.BACKSLASH_ESCAPE,
      t,
      r
    ]
  };
  r.contains.push(a);
  const l = {
    match: /\\"/
  }, c = {
    className: "string",
    begin: /'/,
    end: /'/
  }, u = {
    match: /\\'/
  }, h = {
    begin: /\$?\(\(/,
    end: /\)\)/,
    contains: [
      {
        begin: /\d+#[0-9a-f]+/,
        className: "number"
      },
      n.NUMBER_MODE,
      t
    ]
  }, f = [
    "fish",
    "bash",
    "zsh",
    "sh",
    "csh",
    "ksh",
    "tcsh",
    "dash",
    "scsh"
  ], d = n.SHEBANG({
    binary: `(${f.join("|")})`,
    relevance: 10
  }), p = {
    className: "function",
    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
    returnBegin: !0,
    contains: [n.inherit(n.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
    relevance: 0
  }, m = [
    "if",
    "then",
    "else",
    "elif",
    "fi",
    "time",
    "for",
    "while",
    "until",
    "in",
    "do",
    "done",
    "case",
    "esac",
    "coproc",
    "function",
    "select"
  ], O = [
    "true",
    "false"
  ], g = { match: /(\/[a-z._-]+)+/ }, y = [
    "break",
    "cd",
    "continue",
    "eval",
    "exec",
    "exit",
    "export",
    "getopts",
    "hash",
    "pwd",
    "readonly",
    "return",
    "shift",
    "test",
    "times",
    "trap",
    "umask",
    "unset"
  ], S = [
    "alias",
    "bind",
    "builtin",
    "caller",
    "command",
    "declare",
    "echo",
    "enable",
    "help",
    "let",
    "local",
    "logout",
    "mapfile",
    "printf",
    "read",
    "readarray",
    "source",
    "sudo",
    "type",
    "typeset",
    "ulimit",
    "unalias"
  ], _ = [
    "autoload",
    "bg",
    "bindkey",
    "bye",
    "cap",
    "chdir",
    "clone",
    "comparguments",
    "compcall",
    "compctl",
    "compdescribe",
    "compfiles",
    "compgroups",
    "compquote",
    "comptags",
    "comptry",
    "compvalues",
    "dirs",
    "disable",
    "disown",
    "echotc",
    "echoti",
    "emulate",
    "fc",
    "fg",
    "float",
    "functions",
    "getcap",
    "getln",
    "history",
    "integer",
    "jobs",
    "kill",
    "limit",
    "log",
    "noglob",
    "popd",
    "print",
    "pushd",
    "pushln",
    "rehash",
    "sched",
    "setcap",
    "setopt",
    "stat",
    "suspend",
    "ttyctl",
    "unfunction",
    "unhash",
    "unlimit",
    "unsetopt",
    "vared",
    "wait",
    "whence",
    "where",
    "which",
    "zcompile",
    "zformat",
    "zftp",
    "zle",
    "zmodload",
    "zparseopts",
    "zprof",
    "zpty",
    "zregexparse",
    "zsocket",
    "zstyle",
    "ztcp"
  ], v = [
    "chcon",
    "chgrp",
    "chown",
    "chmod",
    "cp",
    "dd",
    "df",
    "dir",
    "dircolors",
    "ln",
    "ls",
    "mkdir",
    "mkfifo",
    "mknod",
    "mktemp",
    "mv",
    "realpath",
    "rm",
    "rmdir",
    "shred",
    "sync",
    "touch",
    "truncate",
    "vdir",
    "b2sum",
    "base32",
    "base64",
    "cat",
    "cksum",
    "comm",
    "csplit",
    "cut",
    "expand",
    "fmt",
    "fold",
    "head",
    "join",
    "md5sum",
    "nl",
    "numfmt",
    "od",
    "paste",
    "ptx",
    "pr",
    "sha1sum",
    "sha224sum",
    "sha256sum",
    "sha384sum",
    "sha512sum",
    "shuf",
    "sort",
    "split",
    "sum",
    "tac",
    "tail",
    "tr",
    "tsort",
    "unexpand",
    "uniq",
    "wc",
    "arch",
    "basename",
    "chroot",
    "date",
    "dirname",
    "du",
    "echo",
    "env",
    "expr",
    "factor",
    // "false", // keyword literal already
    "groups",
    "hostid",
    "id",
    "link",
    "logname",
    "nice",
    "nohup",
    "nproc",
    "pathchk",
    "pinky",
    "printenv",
    "printf",
    "pwd",
    "readlink",
    "runcon",
    "seq",
    "sleep",
    "stat",
    "stdbuf",
    "stty",
    "tee",
    "test",
    "timeout",
    // "true", // keyword literal already
    "tty",
    "uname",
    "unlink",
    "uptime",
    "users",
    "who",
    "whoami",
    "yes"
  ];
  return {
    name: "Bash",
    aliases: [
      "sh",
      "zsh"
    ],
    keywords: {
      $pattern: /\b[a-z][a-z0-9._-]+\b/,
      keyword: m,
      literal: O,
      built_in: [
        ...y,
        ...S,
        // Shell modifiers
        "set",
        "shopt",
        ..._,
        ...v
      ]
    },
    contains: [
      d,
      // to catch known shells and boost relevancy
      n.SHEBANG(),
      // to catch unknown shells but still highlight the shebang
      p,
      h,
      s,
      o,
      g,
      a,
      l,
      c,
      u,
      t
    ]
  };
}
function yT(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", r = "[a-zA-Z_]\\w*::", o = "(" + i + "|" + e.optional(r) + "[a-zA-Z_]\\w*" + e.optional("<[^<>]+>") + ")", a = {
    className: "type",
    variants: [
      { begin: "\\b[a-z\\d_]*_t\\b" },
      { match: /\batomic_[a-z]{3,6}\b/ }
    ]
  }, c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      { match: /\b(0b[01']+)/ },
      { match: /(-?)\b([\d']+(\.[\d']*)?|\.[\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)/ },
      { match: /(-?)\b(0[xX][a-fA-F0-9]+(?:'[a-fA-F0-9]+)*(?:\.[a-fA-F0-9]*(?:'[a-fA-F0-9]*)*)?(?:[pP][-+]?[0-9]+)?(l|L)?(u|U)?)/ },
      { match: /(-?)\b\d+(?:'\d+)*(?:\.\d*(?:'\d*)*)?(?:[eE][-+]?\d+)?/ }
    ],
    relevance: 0
  }, h = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef elifdef elifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(r) + n.IDENT_RE,
    relevance: 0
  }, d = e.optional(r) + n.IDENT_RE + "\\s*\\(", O = {
    keyword: [
      "asm",
      "auto",
      "break",
      "case",
      "continue",
      "default",
      "do",
      "else",
      "enum",
      "extern",
      "for",
      "fortran",
      "goto",
      "if",
      "inline",
      "register",
      "restrict",
      "return",
      "sizeof",
      "typeof",
      "typeof_unqual",
      "struct",
      "switch",
      "typedef",
      "union",
      "volatile",
      "while",
      "_Alignas",
      "_Alignof",
      "_Atomic",
      "_Generic",
      "_Noreturn",
      "_Static_assert",
      "_Thread_local",
      // aliases
      "alignas",
      "alignof",
      "noreturn",
      "static_assert",
      "thread_local",
      // not a C keyword but is, for all intents and purposes, treated exactly like one.
      "_Pragma"
    ],
    type: [
      "float",
      "double",
      "signed",
      "unsigned",
      "int",
      "short",
      "long",
      "char",
      "void",
      "_Bool",
      "_BitInt",
      "_Complex",
      "_Imaginary",
      "_Decimal32",
      "_Decimal64",
      "_Decimal96",
      "_Decimal128",
      "_Decimal64x",
      "_Decimal128x",
      "_Float16",
      "_Float32",
      "_Float64",
      "_Float128",
      "_Float32x",
      "_Float64x",
      "_Float128x",
      // modifiers
      "const",
      "static",
      "constexpr",
      // aliases
      "complex",
      "bool",
      "imaginary"
    ],
    literal: "true false NULL",
    // TODO: apply hinting work similar to what was done in cpp.js
    built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
  }, g = [
    h,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], y = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: O,
    contains: g.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: O,
        contains: g.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, S = {
    begin: "(" + o + "[\\*&\\s]+)+" + d,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: O,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: i,
        keywords: O,
        relevance: 0
      },
      {
        begin: d,
        returnBegin: !0,
        contains: [n.inherit(f, { className: "title.function" })],
        relevance: 0
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: O,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: O,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      h
    ]
  };
  return {
    name: "C",
    aliases: ["h"],
    keywords: O,
    // Until differentiations are added between `c` and `cpp`, `c` will
    // not be auto-detected to avoid auto-detect conflicts between C and C++
    disableAutodetect: !0,
    illegal: "</",
    contains: [].concat(
      y,
      S,
      g,
      [
        h,
        {
          begin: n.IDENT_RE + "::",
          keywords: O
        },
        {
          className: "class",
          beginKeywords: "enum class struct union",
          end: /[{;:<>=]/,
          contains: [
            { beginKeywords: "final class struct" },
            n.TITLE_MODE
          ]
        }
      ]
    ),
    exports: {
      preprocessor: h,
      strings: c,
      keywords: O
    }
  };
}
function xT(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", r = "[a-zA-Z_]\\w*::", o = "(?!struct)(" + i + "|" + e.optional(r) + "[a-zA-Z_]\\w*" + e.optional("<[^<>]+>") + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      // Floating-point literal.
      {
        begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
      },
      // Integer literal.
      {
        begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
        // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
        // literal highlight actually makes it stand out more.
      }
    ],
    relevance: 0
  }, h = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(r) + n.IDENT_RE,
    relevance: 0
  }, d = e.optional(r) + n.IDENT_RE + "\\s*\\(", p = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], m = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], O = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "flat_map",
    "flat_set",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], g = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], _ = {
    type: m,
    keyword: p,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: O
  }, v = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: g
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      n.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, x = [
    v,
    h,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], C = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: _,
    contains: x.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: _,
        contains: x.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + d,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: _,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: i,
        keywords: _,
        relevance: 0
      },
      {
        begin: d,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          c,
          u
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: _,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: _,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      h
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: _,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      C,
      T,
      v,
      x,
      [
        h,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
          end: ">",
          keywords: _,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: n.IDENT_RE + "::",
          keywords: _
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function kT(n) {
  const e = [
    "bool",
    "byte",
    "char",
    "decimal",
    "delegate",
    "double",
    "dynamic",
    "enum",
    "float",
    "int",
    "long",
    "nint",
    "nuint",
    "object",
    "sbyte",
    "short",
    "string",
    "ulong",
    "uint",
    "ushort"
  ], t = [
    "public",
    "private",
    "protected",
    "static",
    "internal",
    "protected",
    "abstract",
    "async",
    "extern",
    "override",
    "unsafe",
    "virtual",
    "new",
    "sealed",
    "partial"
  ], i = [
    "default",
    "false",
    "null",
    "true"
  ], r = [
    "abstract",
    "as",
    "base",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "do",
    "else",
    "event",
    "explicit",
    "extern",
    "finally",
    "fixed",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "interface",
    "internal",
    "is",
    "lock",
    "namespace",
    "new",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "record",
    "ref",
    "return",
    "scoped",
    "sealed",
    "sizeof",
    "stackalloc",
    "static",
    "struct",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "unchecked",
    "unsafe",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
  ], s = [
    "add",
    "alias",
    "and",
    "ascending",
    "args",
    "async",
    "await",
    "by",
    "descending",
    "dynamic",
    "equals",
    "file",
    "from",
    "get",
    "global",
    "group",
    "init",
    "into",
    "join",
    "let",
    "nameof",
    "not",
    "notnull",
    "on",
    "or",
    "orderby",
    "partial",
    "record",
    "remove",
    "required",
    "scoped",
    "select",
    "set",
    "unmanaged",
    "value|0",
    "var",
    "when",
    "where",
    "with",
    "yield"
  ], o = {
    keyword: r.concat(s),
    built_in: e,
    literal: i
  }, a = n.inherit(n.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), l = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, c = {
    className: "string",
    begin: /"""("*)(?!")(.|\n)*?"""\1/,
    relevance: 1
  }, u = {
    className: "string",
    begin: '@"',
    end: '"',
    contains: [{ begin: '""' }]
  }, h = n.inherit(u, { illegal: /\n/ }), f = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: o
  }, d = n.inherit(f, { illegal: /\n/ }), p = {
    className: "string",
    begin: /\$"/,
    end: '"',
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      n.BACKSLASH_ESCAPE,
      d
    ]
  }, m = {
    className: "string",
    begin: /\$@"/,
    end: '"',
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      f
    ]
  }, O = n.inherit(m, {
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      d
    ]
  });
  f.contains = [
    m,
    p,
    u,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    l,
    n.C_BLOCK_COMMENT_MODE
  ], d.contains = [
    O,
    p,
    h,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    l,
    n.inherit(n.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
  ];
  const g = { variants: [
    c,
    m,
    p,
    u,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE
  ] }, y = {
    begin: "<",
    end: ">",
    contains: [
      { beginKeywords: "in out" },
      a
    ]
  }, S = n.IDENT_RE + "(<" + n.IDENT_RE + "(\\s*,\\s*" + n.IDENT_RE + ")*>)?(\\[\\])?", _ = {
    // prevents expressions like `@class` from incorrect flagging
    // `class` as a keyword
    begin: "@" + n.IDENT_RE,
    relevance: 0
  };
  return {
    name: "C#",
    aliases: [
      "cs",
      "c#"
    ],
    keywords: o,
    illegal: /::/,
    contains: [
      n.COMMENT(
        "///",
        "$",
        {
          returnBegin: !0,
          contains: [
            {
              className: "doctag",
              variants: [
                {
                  begin: "///",
                  relevance: 0
                },
                { begin: "<!--|-->" },
                {
                  begin: "</?",
                  end: ">"
                }
              ]
            }
          ]
        }
      ),
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
      },
      g,
      l,
      {
        beginKeywords: "class interface",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:,]/,
        contains: [
          { beginKeywords: "where class" },
          a,
          y,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "record",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          y,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // [Attributes("")]
        className: "meta",
        begin: "^\\s*\\[(?=[\\w])",
        excludeBegin: !0,
        end: "\\]",
        excludeEnd: !0,
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new return throw await else",
        relevance: 0
      },
      {
        className: "function",
        begin: "(" + S + "\\s+)+" + n.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
        returnBegin: !0,
        end: /\s*[{;=]/,
        excludeEnd: !0,
        keywords: o,
        contains: [
          // prevents these from being highlighted `title`
          {
            beginKeywords: t.join(" "),
            relevance: 0
          },
          {
            begin: n.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
            returnBegin: !0,
            contains: [
              n.TITLE_MODE,
              y
            ],
            relevance: 0
          },
          { match: /\(\)/ },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: o,
            relevance: 0,
            contains: [
              g,
              l,
              n.C_BLOCK_COMMENT_MODE
            ]
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      _
    ]
  };
}
const ST = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), wT = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "optgroup",
  "option",
  "p",
  "picture",
  "q",
  "quote",
  "samp",
  "section",
  "select",
  "source",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], vT = [
  "defs",
  "g",
  "marker",
  "mask",
  "pattern",
  "svg",
  "switch",
  "symbol",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feFlood",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMorphology",
  "feOffset",
  "feSpecularLighting",
  "feTile",
  "feTurbulence",
  "linearGradient",
  "radialGradient",
  "stop",
  "circle",
  "ellipse",
  "image",
  "line",
  "path",
  "polygon",
  "polyline",
  "rect",
  "text",
  "use",
  "textPath",
  "tspan",
  "foreignObject",
  "clipPath"
], ET = [
  ...wT,
  ...vT
], _T = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
].sort().reverse(), QT = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
].sort().reverse(), CT = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
].sort().reverse(), TT = [
  "accent-color",
  "align-content",
  "align-items",
  "align-self",
  "alignment-baseline",
  "all",
  "anchor-name",
  "animation",
  "animation-composition",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-range",
  "animation-range-end",
  "animation-range-start",
  "animation-timeline",
  "animation-timing-function",
  "appearance",
  "aspect-ratio",
  "backdrop-filter",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-position-x",
  "background-position-y",
  "background-repeat",
  "background-size",
  "baseline-shift",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-end-end-radius",
  "border-end-start-radius",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-start-end-radius",
  "border-start-start-radius",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-align",
  "box-decoration-break",
  "box-direction",
  "box-flex",
  "box-flex-group",
  "box-lines",
  "box-ordinal-group",
  "box-orient",
  "box-pack",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "color-interpolation",
  "color-interpolation-filters",
  "color-profile",
  "color-rendering",
  "color-scheme",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "contain-intrinsic-block-size",
  "contain-intrinsic-height",
  "contain-intrinsic-inline-size",
  "contain-intrinsic-size",
  "contain-intrinsic-width",
  "container",
  "container-name",
  "container-type",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "counter-set",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "cx",
  "cy",
  "direction",
  "display",
  "dominant-baseline",
  "empty-cells",
  "enable-background",
  "field-sizing",
  "fill",
  "fill-opacity",
  "fill-rule",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flood-color",
  "flood-opacity",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-optical-sizing",
  "font-palette",
  "font-size",
  "font-size-adjust",
  "font-smooth",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-synthesis-position",
  "font-synthesis-small-caps",
  "font-synthesis-style",
  "font-synthesis-weight",
  "font-variant",
  "font-variant-alternates",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-emoji",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "forced-color-adjust",
  "gap",
  "glyph-orientation-horizontal",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphenate-character",
  "hyphenate-limit-chars",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "initial-letter",
  "initial-letter-align",
  "inline-size",
  "inset",
  "inset-area",
  "inset-block",
  "inset-block-end",
  "inset-block-start",
  "inset-inline",
  "inset-inline-end",
  "inset-inline-start",
  "isolation",
  "justify-content",
  "justify-items",
  "justify-self",
  "kerning",
  "left",
  "letter-spacing",
  "lighting-color",
  "line-break",
  "line-height",
  "line-height-step",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "margin-trim",
  "marker",
  "marker-end",
  "marker-mid",
  "marker-start",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "masonry-auto-flow",
  "math-depth",
  "math-shift",
  "math-style",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "offset",
  "offset-anchor",
  "offset-distance",
  "offset-path",
  "offset-position",
  "offset-rotate",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-anchor",
  "overflow-block",
  "overflow-clip-margin",
  "overflow-inline",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "overlay",
  "overscroll-behavior",
  "overscroll-behavior-block",
  "overscroll-behavior-inline",
  "overscroll-behavior-x",
  "overscroll-behavior-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "paint-order",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "place-content",
  "place-items",
  "place-self",
  "pointer-events",
  "position",
  "position-anchor",
  "position-visibility",
  "print-color-adjust",
  "quotes",
  "r",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "rotate",
  "row-gap",
  "ruby-align",
  "ruby-position",
  "scale",
  "scroll-behavior",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scroll-timeline",
  "scroll-timeline-axis",
  "scroll-timeline-name",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "shape-rendering",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "stop-color",
  "stop-opacity",
  "stroke",
  "stroke-dasharray",
  "stroke-dashoffset",
  "stroke-linecap",
  "stroke-linejoin",
  "stroke-miterlimit",
  "stroke-opacity",
  "stroke-width",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-anchor",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-skip",
  "text-decoration-skip-ink",
  "text-decoration-style",
  "text-decoration-thickness",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-size-adjust",
  "text-transform",
  "text-underline-offset",
  "text-underline-position",
  "text-wrap",
  "text-wrap-mode",
  "text-wrap-style",
  "timeline-scope",
  "top",
  "touch-action",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-behavior",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "translate",
  "unicode-bidi",
  "user-modify",
  "user-select",
  "vector-effect",
  "vertical-align",
  "view-timeline",
  "view-timeline-axis",
  "view-timeline-inset",
  "view-timeline-name",
  "view-transition-name",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "white-space-collapse",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "x",
  "y",
  "z-index",
  "zoom"
].sort().reverse();
function cb(n) {
  const e = n.regex, t = ST(n), i = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, r = "and or not only", s = /@-?\w[\w]*(-\w+)*/, o = "[a-zA-Z-][a-zA-Z0-9_-]*", a = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE
  ];
  return {
    name: "CSS",
    case_insensitive: !0,
    illegal: /[=|'\$]/,
    keywords: { keyframePosition: "from to" },
    classNameAliases: {
      // for visual continuity with `tag {}` and because we
      // don't have a great class for this?
      keyframePosition: "selector-tag"
    },
    contains: [
      t.BLOCK_COMMENT,
      i,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      t.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: /#[A-Za-z0-9_-]+/,
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\." + o,
        relevance: 0
      },
      t.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        variants: [
          { begin: ":(" + QT.join("|") + ")" },
          { begin: ":(:)?(" + CT.join("|") + ")" }
        ]
      },
      // we may actually need this (12/2020)
      // { // pseudo-selector params
      //   begin: /\(/,
      //   end: /\)/,
      //   contains: [ hljs.CSS_NUMBER_MODE ]
      // },
      t.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + TT.join("|") + ")\\b"
      },
      // attribute values
      {
        begin: /:/,
        end: /[;}{]/,
        contains: [
          t.BLOCK_COMMENT,
          t.HEXCOLOR,
          t.IMPORTANT,
          t.CSS_NUMBER_MODE,
          ...a,
          // needed to highlight these as strings and to avoid issues with
          // illegal characters that might be inside urls that would tigger the
          // languages illegal stack
          {
            begin: /(url|data-uri)\(/,
            end: /\)/,
            relevance: 0,
            // from keywords
            keywords: { built_in: "url data-uri" },
            contains: [
              ...a,
              {
                className: "string",
                // any character other than `)` as in `url()` will be the start
                // of a string, which ends with `)` (from the parent mode)
                begin: /[^)]/,
                endsWithParent: !0,
                excludeEnd: !0
              }
            ]
          },
          t.FUNCTION_DISPATCH
        ]
      },
      {
        begin: e.lookahead(/@/),
        end: "[{;]",
        relevance: 0,
        illegal: /:/,
        // break on Less variables @var: ...
        contains: [
          {
            className: "keyword",
            begin: s
          },
          {
            begin: /\s/,
            endsWithParent: !0,
            excludeEnd: !0,
            relevance: 0,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: r,
              attribute: _T.join(" ")
            },
            contains: [
              {
                begin: /[a-z-]+(?=:)/,
                className: "attribute"
              },
              ...a,
              t.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: "selector-tag",
        begin: "\\b(" + ET.join("|") + ")\\b"
      }
    ]
  };
}
function PT(n) {
  const e = n.regex;
  return {
    name: "Diff",
    aliases: ["patch"],
    contains: [
      {
        className: "meta",
        relevance: 10,
        match: e.either(
          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
          /^--- +\d+,\d+ +----$/
        )
      },
      {
        className: "comment",
        variants: [
          {
            begin: e.either(
              /Index: /,
              /^index/,
              /={3,}/,
              /^-{3}/,
              /^\*{3} /,
              /^\+{3}/,
              /^diff --git/
            ),
            end: /$/
          },
          { match: /^\*{15}$/ }
        ]
      },
      {
        className: "addition",
        begin: /^\+/,
        end: /$/
      },
      {
        className: "deletion",
        begin: /^-/,
        end: /$/
      },
      {
        className: "addition",
        begin: /^!/,
        end: /$/
      }
    ]
  };
}
function AT(n) {
  const s = {
    keyword: [
      "break",
      "case",
      "chan",
      "const",
      "continue",
      "default",
      "defer",
      "else",
      "fallthrough",
      "for",
      "func",
      "go",
      "goto",
      "if",
      "import",
      "interface",
      "map",
      "package",
      "range",
      "return",
      "select",
      "struct",
      "switch",
      "type",
      "var"
    ],
    type: [
      "bool",
      "byte",
      "complex64",
      "complex128",
      "error",
      "float32",
      "float64",
      "int8",
      "int16",
      "int32",
      "int64",
      "string",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "int",
      "uint",
      "uintptr",
      "rune"
    ],
    literal: [
      "true",
      "false",
      "iota",
      "nil"
    ],
    built_in: [
      "append",
      "cap",
      "close",
      "complex",
      "copy",
      "imag",
      "len",
      "make",
      "new",
      "panic",
      "print",
      "println",
      "real",
      "recover",
      "delete"
    ]
  };
  return {
    name: "Go",
    aliases: ["golang"],
    keywords: s,
    illegal: "</",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        variants: [
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          {
            begin: "`",
            end: "`"
          }
        ]
      },
      {
        className: "number",
        variants: [
          {
            match: /-?\b0[xX]\.[a-fA-F0-9](_?[a-fA-F0-9])*[pP][+-]?\d(_?\d)*i?/,
            // hex without a present digit before . (making a digit afterwards required)
            relevance: 0
          },
          {
            match: /-?\b0[xX](_?[a-fA-F0-9])+((\.([a-fA-F0-9](_?[a-fA-F0-9])*)?)?[pP][+-]?\d(_?\d)*)?i?/,
            // hex with a present digit before . (making a digit afterwards optional)
            relevance: 0
          },
          {
            match: /-?\b0[oO](_?[0-7])*i?/,
            // leading 0o octal
            relevance: 0
          },
          {
            match: /-?\.\d(_?\d)*([eE][+-]?\d(_?\d)*)?i?/,
            // decimal without a present digit before . (making a digit afterwards required)
            relevance: 0
          },
          {
            match: /-?\b\d(_?\d)*(\.(\d(_?\d)*)?)?([eE][+-]?\d(_?\d)*)?i?/,
            // decimal with a present digit before . (making a digit afterwards optional)
            relevance: 0
          }
        ]
      },
      {
        begin: /:=/
        // relevance booster
      },
      {
        className: "function",
        beginKeywords: "func",
        end: "\\s*(\\{|$)",
        excludeEnd: !0,
        contains: [
          n.TITLE_MODE,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: s,
            illegal: /["']/
          }
        ]
      }
    ]
  };
}
function $T(n) {
  const e = n.regex, t = /[_A-Za-z][_0-9A-Za-z]*/;
  return {
    name: "GraphQL",
    aliases: ["gql"],
    case_insensitive: !0,
    disableAutodetect: !1,
    keywords: {
      keyword: [
        "query",
        "mutation",
        "subscription",
        "type",
        "input",
        "schema",
        "directive",
        "interface",
        "union",
        "scalar",
        "fragment",
        "enum",
        "on"
      ],
      literal: [
        "true",
        "false",
        "null"
      ]
    },
    contains: [
      n.HASH_COMMENT_MODE,
      n.QUOTE_STRING_MODE,
      n.NUMBER_MODE,
      {
        scope: "punctuation",
        match: /[.]{3}/,
        relevance: 0
      },
      {
        scope: "punctuation",
        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
        relevance: 0
      },
      {
        scope: "variable",
        begin: /\$/,
        end: /\W/,
        excludeEnd: !0,
        relevance: 0
      },
      {
        scope: "meta",
        match: /@\w+/,
        excludeEnd: !0
      },
      {
        scope: "symbol",
        begin: e.concat(t, e.lookahead(/\s*:/)),
        relevance: 0
      }
    ],
    illegal: [
      /[;<']/,
      /BEGIN/
    ]
  };
}
function RT(n) {
  const e = n.regex, t = {
    className: "number",
    relevance: 0,
    variants: [
      { begin: /([+-]+)?[\d]+_[\d_]+/ },
      { begin: n.NUMBER_RE }
    ]
  }, i = n.COMMENT();
  i.variants = [
    {
      begin: /;/,
      end: /$/
    },
    {
      begin: /#/,
      end: /$/
    }
  ];
  const r = {
    className: "variable",
    variants: [
      { begin: /\$[\w\d"][\w\d_]*/ },
      { begin: /\$\{(.*?)\}/ }
    ]
  }, s = {
    className: "literal",
    begin: /\bon|off|true|false|yes|no\b/
  }, o = {
    className: "string",
    contains: [n.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: "'''",
        end: "'''",
        relevance: 10
      },
      {
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      }
    ]
  }, a = {
    begin: /\[/,
    end: /\]/,
    contains: [
      i,
      s,
      r,
      o,
      t,
      "self"
    ],
    relevance: 0
  }, l = /[A-Za-z0-9_-]+/, c = /"(\\"|[^"])*"/, u = /'[^']*'/, h = e.either(
    l,
    c,
    u
  ), f = e.concat(
    h,
    "(\\s*\\.\\s*",
    h,
    ")*",
    e.lookahead(/\s*=\s*[^#\s]/)
  );
  return {
    name: "TOML, also INI",
    aliases: ["toml"],
    case_insensitive: !0,
    illegal: /\S/,
    contains: [
      i,
      {
        className: "section",
        begin: /\[+/,
        end: /\]+/
      },
      {
        begin: f,
        className: "attr",
        starts: {
          end: /$/,
          contains: [
            i,
            a,
            s,
            r,
            o,
            t
          ]
        }
      }
    ]
  };
}
var Ji = "[0-9](_*[0-9])*", Eo = `\\.(${Ji})`, _o = "[0-9a-fA-F](_*[0-9a-fA-F])*", Gd = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${Ji})((${Eo})|\\.)?|(${Eo}))[eE][+-]?(${Ji})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${Ji})((${Eo})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${Eo})[fFdD]?\\b` },
    { begin: `\\b(${Ji})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${_o})\\.?|(${_o})?\\.(${_o}))[pP][+-]?(${Ji})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${_o})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function ub(n, e, t) {
  return t === -1 ? "" : n.replace(e, (i) => ub(n, e, t - 1));
}
function hb(n) {
  const e = n.regex, t = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", i = t + ub("(?:<" + t + "~~~(?:\\s*,\\s*" + t + "~~~)*>)?", /~~~/g, 2), l = {
    keyword: [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits",
      "goto",
      "when"
    ],
    literal: [
      "false",
      "true",
      "null"
    ],
    type: [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ],
    built_in: [
      "super",
      "this"
    ]
  }, c = {
    className: "meta",
    begin: "@" + t,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: ["self"]
        // allow nested () inside our annotation
      }
    ]
  }, u = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    keywords: l,
    relevance: 0,
    contains: [n.C_BLOCK_COMMENT_MODE],
    endsParent: !0
  };
  return {
    name: "Java",
    aliases: ["jsp"],
    keywords: l,
    illegal: /<\/|#/,
    contains: [
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      // relevance boost
      {
        begin: /import java\.[a-z]+\./,
        keywords: "import",
        relevance: 2
      },
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        begin: /"""/,
        end: /"""/,
        className: "string",
        contains: [n.BACKSLASH_ESCAPE]
      },
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      {
        match: [
          /\b(?:class|interface|enum|extends|implements|new)/,
          /\s+/,
          t
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        // Exceptions for hyphenated keywords
        match: /non-sealed/,
        scope: "keyword"
      },
      {
        begin: [
          e.concat(/(?!else)/, t),
          /\s+/,
          t,
          /\s+/,
          /=(?!=)/
        ],
        className: {
          1: "type",
          3: "variable",
          5: "operator"
        }
      },
      {
        begin: [
          /record/,
          /\s+/,
          t
        ],
        className: {
          1: "keyword",
          3: "title.class"
        },
        contains: [
          u,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new throw return else",
        relevance: 0
      },
      {
        begin: [
          "(?:" + i + "\\s+)",
          n.UNDERSCORE_IDENT_RE,
          /\s*(?=\()/
        ],
        className: { 2: "title.function" },
        keywords: l,
        contains: [
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: l,
            relevance: 0,
            contains: [
              c,
              n.APOS_STRING_MODE,
              n.QUOTE_STRING_MODE,
              Gd,
              n.C_BLOCK_COMMENT_MODE
            ]
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      Gd,
      c
    ]
  };
}
const Wd = "[A-Za-z$_][0-9A-Za-z$_]*", MT = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends",
  // It's reached stage 3, which is "recommended for implementation":
  "using"
], NT = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], fb = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], db = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], pb = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], IT = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], LT = [].concat(
  pb,
  fb,
  db
);
function Kc(n) {
  const e = n.regex, t = (D, { after: ee }) => {
    const b = "</" + D[0].slice(1);
    return D.input.indexOf(b, ee) !== -1;
  }, i = Wd, r = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (D, ee) => {
      const b = D[0].length + D.index, Z = D.input[b];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        Z === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        Z === ","
      ) {
        ee.ignoreMatch();
        return;
      }
      Z === ">" && (t(D, { after: b }) || ee.ignoreMatch());
      let j;
      const w = D.input.substring(b);
      if (j = w.match(/^\s*=/)) {
        ee.ignoreMatch();
        return;
      }
      if ((j = w.match(/^\s+extends\s+/)) && j.index === 0) {
        ee.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: Wd,
    keyword: MT,
    literal: NT,
    built_in: LT,
    "variable.language": IT
  }, l = "[0-9](_?[0-9])*", c = `\\.(${l})`, u = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", h = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${u})((${c})|\\.)?|(${c}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${u})\\b((${c})\\b|\\.)?|(${c})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, d = {
    begin: ".?html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, p = {
    begin: ".?css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, m = {
    begin: ".?gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, O = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      n.BACKSLASH_ESCAPE,
      f
    ]
  }, y = {
    className: "comment",
    variants: [
      n.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: i + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      n.C_BLOCK_COMMENT_MODE,
      n.C_LINE_COMMENT_MODE
    ]
  }, S = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    d,
    p,
    m,
    O,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    h
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = S.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(S)
  });
  const _ = [].concat(y, f.contains), v = _.concat([
    // eat recursive parens in sub expressions
    {
      begin: /(\s*)\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(_)
    }
  ]), x = {
    className: "params",
    // convert this to negative lookbehind in v12
    begin: /(\s*)\(/,
    // to match the parms with
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: v
  }, C = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          i,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(i, "(", e.concat(/\./, i), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          i
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...fb,
        ...db
      ]
    }
  }, A = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, Q = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          i,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [x],
    illegal: /%/
  }, M = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function R(D) {
    return e.concat("(?!", D.join("|"), ")");
  }
  const L = {
    match: e.concat(
      /\b/,
      R([
        ...pb,
        "super",
        "import"
      ].map((D) => `${D}\\s*\\(`)),
      i,
      e.lookahead(/\s*\(/)
    ),
    className: "title.function",
    relevance: 0
  }, P = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(i, /(?![0-9A-Za-z$_(])/)
    )),
    end: i,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, $ = {
    match: [
      /get|set/,
      /\s+/,
      i,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      x
    ]
  }, Y = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + n.UNDERSCORE_IDENT_RE + ")\\s*=>", ie = {
    match: [
      /const|var|let/,
      /\s+/,
      i,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(Y)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      x
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: v, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      n.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      A,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      d,
      p,
      m,
      O,
      y,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      h,
      T,
      {
        scope: "attr",
        match: i + e.lookahead(":"),
        relevance: 0
      },
      ie,
      {
        // "value" container
        begin: "(" + n.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          y,
          n.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: Y,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: n.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /(\s*)\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: v
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: r.begin, end: r.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      Q,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + n.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          x,
          n.inherit(n.TITLE_MODE, { begin: i, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      P,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + i,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [x]
      },
      L,
      M,
      C,
      $,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function mb(n) {
  const e = {
    className: "attr",
    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
    relevance: 1.01
  }, t = {
    match: /[{}[\],:]/,
    className: "punctuation",
    relevance: 0
  }, i = [
    "true",
    "false",
    "null"
  ], r = {
    scope: "literal",
    beginKeywords: i.join(" ")
  };
  return {
    name: "JSON",
    aliases: ["jsonc"],
    keywords: {
      literal: i
    },
    contains: [
      e,
      t,
      n.QUOTE_STRING_MODE,
      r,
      n.C_NUMBER_MODE,
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE
    ],
    illegal: "\\S"
  };
}
var er = "[0-9](_*[0-9])*", Qo = `\\.(${er})`, Co = "[0-9a-fA-F](_*[0-9a-fA-F])*", DT = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${er})((${Qo})|\\.)?|(${Qo}))[eE][+-]?(${er})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${er})((${Qo})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${Qo})[fFdD]?\\b` },
    { begin: `\\b(${er})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${Co})\\.?|(${Co})?\\.(${Co}))[pP][+-]?(${er})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${Co})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function BT(n) {
  const e = {
    keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
    built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
    literal: "true false null"
  }, t = {
    className: "keyword",
    begin: /\b(break|continue|return|this)\b/,
    starts: { contains: [
      {
        className: "symbol",
        begin: /@\w+/
      }
    ] }
  }, i = {
    className: "symbol",
    begin: n.UNDERSCORE_IDENT_RE + "@"
  }, r = {
    className: "subst",
    begin: /\$\{/,
    end: /\}/,
    contains: [n.C_NUMBER_MODE]
  }, s = {
    className: "variable",
    begin: "\\$" + n.UNDERSCORE_IDENT_RE
  }, o = {
    className: "string",
    variants: [
      {
        begin: '"""',
        end: '"""(?=[^"])',
        contains: [
          s,
          r
        ]
      },
      // Can't use built-in modes easily, as we want to use STRING in the meta
      // context as 'meta-string' and there's no syntax to remove explicitly set
      // classNames in built-in modes.
      {
        begin: "'",
        end: "'",
        illegal: /\n/,
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: '"',
        end: '"',
        illegal: /\n/,
        contains: [
          n.BACKSLASH_ESCAPE,
          s,
          r
        ]
      }
    ]
  };
  r.contains.push(o);
  const a = {
    className: "meta",
    begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + n.UNDERSCORE_IDENT_RE + ")?"
  }, l = {
    className: "meta",
    begin: "@" + n.UNDERSCORE_IDENT_RE,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          n.inherit(o, { className: "string" }),
          "self"
        ]
      }
    ]
  }, c = DT, u = n.COMMENT(
    "/\\*",
    "\\*/",
    { contains: [n.C_BLOCK_COMMENT_MODE] }
  ), h = { variants: [
    {
      className: "type",
      begin: n.UNDERSCORE_IDENT_RE
    },
    {
      begin: /\(/,
      end: /\)/,
      contains: []
      // defined later
    }
  ] }, f = h;
  return f.variants[1].contains = [h], h.variants[1].contains = [f], {
    name: "Kotlin",
    aliases: [
      "kt",
      "kts"
    ],
    keywords: e,
    contains: [
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      n.C_LINE_COMMENT_MODE,
      u,
      t,
      i,
      a,
      l,
      {
        className: "function",
        beginKeywords: "fun",
        end: "[(]|$",
        returnBegin: !0,
        excludeEnd: !0,
        keywords: e,
        relevance: 5,
        contains: [
          {
            begin: n.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: !0,
            relevance: 0,
            contains: [n.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "type",
            begin: /</,
            end: />/,
            keywords: "reified",
            relevance: 0
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: e,
            relevance: 0,
            contains: [
              {
                begin: /:/,
                end: /[=,\/]/,
                endsWithParent: !0,
                contains: [
                  h,
                  n.C_LINE_COMMENT_MODE,
                  u
                ],
                relevance: 0
              },
              n.C_LINE_COMMENT_MODE,
              u,
              a,
              l,
              o,
              n.C_NUMBER_MODE
            ]
          },
          u
        ]
      },
      {
        begin: [
          /class|interface|trait/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE
        ],
        beginScope: {
          3: "title.class"
        },
        keywords: "class interface trait",
        end: /[:\{(]|$/,
        excludeEnd: !0,
        illegal: "extends implements",
        contains: [
          { beginKeywords: "public protected internal private constructor" },
          n.UNDERSCORE_TITLE_MODE,
          {
            className: "type",
            begin: /</,
            end: />/,
            excludeBegin: !0,
            excludeEnd: !0,
            relevance: 0
          },
          {
            className: "type",
            begin: /[,:]\s*/,
            end: /[<\(,){\s]|$/,
            excludeBegin: !0,
            returnEnd: !0
          },
          a,
          l
        ]
      },
      o,
      {
        className: "meta",
        begin: "^#!/usr/bin/env",
        end: "$",
        illegal: `
`
      },
      c
    ]
  };
}
const zT = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), ZT = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "optgroup",
  "option",
  "p",
  "picture",
  "q",
  "quote",
  "samp",
  "section",
  "select",
  "source",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], XT = [
  "defs",
  "g",
  "marker",
  "mask",
  "pattern",
  "svg",
  "switch",
  "symbol",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feFlood",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMorphology",
  "feOffset",
  "feSpecularLighting",
  "feTile",
  "feTurbulence",
  "linearGradient",
  "radialGradient",
  "stop",
  "circle",
  "ellipse",
  "image",
  "line",
  "path",
  "polygon",
  "polyline",
  "rect",
  "text",
  "use",
  "textPath",
  "tspan",
  "foreignObject",
  "clipPath"
], qT = [
  ...ZT,
  ...XT
], VT = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
].sort().reverse(), gb = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
].sort().reverse(), Ob = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
].sort().reverse(), YT = [
  "accent-color",
  "align-content",
  "align-items",
  "align-self",
  "alignment-baseline",
  "all",
  "anchor-name",
  "animation",
  "animation-composition",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-range",
  "animation-range-end",
  "animation-range-start",
  "animation-timeline",
  "animation-timing-function",
  "appearance",
  "aspect-ratio",
  "backdrop-filter",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-position-x",
  "background-position-y",
  "background-repeat",
  "background-size",
  "baseline-shift",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-end-end-radius",
  "border-end-start-radius",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-start-end-radius",
  "border-start-start-radius",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-align",
  "box-decoration-break",
  "box-direction",
  "box-flex",
  "box-flex-group",
  "box-lines",
  "box-ordinal-group",
  "box-orient",
  "box-pack",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "color-interpolation",
  "color-interpolation-filters",
  "color-profile",
  "color-rendering",
  "color-scheme",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "contain-intrinsic-block-size",
  "contain-intrinsic-height",
  "contain-intrinsic-inline-size",
  "contain-intrinsic-size",
  "contain-intrinsic-width",
  "container",
  "container-name",
  "container-type",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "counter-set",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "cx",
  "cy",
  "direction",
  "display",
  "dominant-baseline",
  "empty-cells",
  "enable-background",
  "field-sizing",
  "fill",
  "fill-opacity",
  "fill-rule",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flood-color",
  "flood-opacity",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-optical-sizing",
  "font-palette",
  "font-size",
  "font-size-adjust",
  "font-smooth",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-synthesis-position",
  "font-synthesis-small-caps",
  "font-synthesis-style",
  "font-synthesis-weight",
  "font-variant",
  "font-variant-alternates",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-emoji",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "forced-color-adjust",
  "gap",
  "glyph-orientation-horizontal",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphenate-character",
  "hyphenate-limit-chars",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "initial-letter",
  "initial-letter-align",
  "inline-size",
  "inset",
  "inset-area",
  "inset-block",
  "inset-block-end",
  "inset-block-start",
  "inset-inline",
  "inset-inline-end",
  "inset-inline-start",
  "isolation",
  "justify-content",
  "justify-items",
  "justify-self",
  "kerning",
  "left",
  "letter-spacing",
  "lighting-color",
  "line-break",
  "line-height",
  "line-height-step",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "margin-trim",
  "marker",
  "marker-end",
  "marker-mid",
  "marker-start",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "masonry-auto-flow",
  "math-depth",
  "math-shift",
  "math-style",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "offset",
  "offset-anchor",
  "offset-distance",
  "offset-path",
  "offset-position",
  "offset-rotate",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-anchor",
  "overflow-block",
  "overflow-clip-margin",
  "overflow-inline",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "overlay",
  "overscroll-behavior",
  "overscroll-behavior-block",
  "overscroll-behavior-inline",
  "overscroll-behavior-x",
  "overscroll-behavior-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "paint-order",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "place-content",
  "place-items",
  "place-self",
  "pointer-events",
  "position",
  "position-anchor",
  "position-visibility",
  "print-color-adjust",
  "quotes",
  "r",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "rotate",
  "row-gap",
  "ruby-align",
  "ruby-position",
  "scale",
  "scroll-behavior",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scroll-timeline",
  "scroll-timeline-axis",
  "scroll-timeline-name",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "shape-rendering",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "stop-color",
  "stop-opacity",
  "stroke",
  "stroke-dasharray",
  "stroke-dashoffset",
  "stroke-linecap",
  "stroke-linejoin",
  "stroke-miterlimit",
  "stroke-opacity",
  "stroke-width",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-anchor",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-skip",
  "text-decoration-skip-ink",
  "text-decoration-style",
  "text-decoration-thickness",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-size-adjust",
  "text-transform",
  "text-underline-offset",
  "text-underline-position",
  "text-wrap",
  "text-wrap-mode",
  "text-wrap-style",
  "timeline-scope",
  "top",
  "touch-action",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-behavior",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "translate",
  "unicode-bidi",
  "user-modify",
  "user-select",
  "vector-effect",
  "vertical-align",
  "view-timeline",
  "view-timeline-axis",
  "view-timeline-inset",
  "view-timeline-name",
  "view-transition-name",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "white-space-collapse",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "x",
  "y",
  "z-index",
  "zoom"
].sort().reverse(), FT = gb.concat(Ob).sort().reverse();
function UT(n) {
  const e = zT(n), t = FT, i = "and or not only", r = "[\\w-]+", s = "(" + r + "|@\\{" + r + "\\})", o = [], a = [], l = function(S) {
    return {
      // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
      className: "string",
      begin: "~?" + S + ".*?" + S
    };
  }, c = function(S, _, v) {
    return {
      className: S,
      begin: _,
      relevance: v
    };
  }, u = {
    $pattern: /[a-z-]+/,
    keyword: i,
    attribute: VT.join(" ")
  }, h = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: "\\(",
    end: "\\)",
    contains: a,
    keywords: u,
    relevance: 0
  };
  a.push(
    n.C_LINE_COMMENT_MODE,
    n.C_BLOCK_COMMENT_MODE,
    l("'"),
    l('"'),
    e.CSS_NUMBER_MODE,
    // fixme: it does not include dot for numbers like .5em :(
    {
      begin: "(url|data-uri)\\(",
      starts: {
        className: "string",
        end: "[\\)\\n]",
        excludeEnd: !0
      }
    },
    e.HEXCOLOR,
    h,
    c("variable", "@@?" + r, 10),
    c("variable", "@\\{" + r + "\\}"),
    c("built_in", "~?`[^`]*?`"),
    // inline javascript (or whatever host language) *multiline* string
    {
      // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
      className: "attribute",
      begin: r + "\\s*:",
      end: ":",
      returnBegin: !0,
      excludeEnd: !0
    },
    e.IMPORTANT,
    { beginKeywords: "and not" },
    e.FUNCTION_DISPATCH
  );
  const f = a.concat({
    begin: /\{/,
    end: /\}/,
    contains: o
  }), d = {
    beginKeywords: "when",
    endsWithParent: !0,
    contains: [{ beginKeywords: "and not" }].concat(a)
    // using this form to override VALUE’s 'function' match
  }, p = {
    begin: s + "\\s*:",
    returnBegin: !0,
    end: /[;}]/,
    relevance: 0,
    contains: [
      { begin: /-(webkit|moz|ms|o)-/ },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + YT.join("|") + ")\\b",
        end: /(?=:)/,
        starts: {
          endsWithParent: !0,
          illegal: "[<=$]",
          relevance: 0,
          contains: a
        }
      }
    ]
  }, m = {
    className: "keyword",
    begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
    starts: {
      end: "[;{}]",
      keywords: u,
      returnEnd: !0,
      contains: a,
      relevance: 0
    }
  }, O = {
    className: "variable",
    variants: [
      // using more strict pattern for higher relevance to increase chances of Less detection.
      // this is *the only* Less specific statement used in most of the sources, so...
      // (we’ll still often loose to the css-parser unless there's '//' comment,
      // simply because 1 variable just can't beat 99 properties :)
      {
        begin: "@" + r + "\\s*:",
        relevance: 15
      },
      { begin: "@" + r }
    ],
    starts: {
      end: "[;}]",
      returnEnd: !0,
      contains: f
    }
  }, g = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [
      {
        begin: "[\\.#:&\\[>]",
        end: "[;{}]"
        // mixin calls end with ';'
      },
      {
        begin: s,
        end: /\{/
      }
    ],
    returnBegin: !0,
    returnEnd: !0,
    illegal: `[<='$"]`,
    relevance: 0,
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      d,
      c("keyword", "all\\b"),
      c("variable", "@\\{" + r + "\\}"),
      // otherwise it’s identified as tag
      {
        begin: "\\b(" + qT.join("|") + ")\\b",
        className: "selector-tag"
      },
      e.CSS_NUMBER_MODE,
      c("selector-tag", s, 0),
      c("selector-id", "#" + s),
      c("selector-class", "\\." + s, 0),
      c("selector-tag", "&", 0),
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        begin: ":(" + gb.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + Ob.join("|") + ")"
      },
      {
        begin: /\(/,
        end: /\)/,
        relevance: 0,
        contains: f
      },
      // argument list of parametric mixins
      { begin: "!important" },
      // eat !important after mixin call or it will be colored as tag
      e.FUNCTION_DISPATCH
    ]
  }, y = {
    begin: r + `:(:)?(${t.join("|")})`,
    returnBegin: !0,
    contains: [g]
  };
  return o.push(
    n.C_LINE_COMMENT_MODE,
    n.C_BLOCK_COMMENT_MODE,
    m,
    O,
    y,
    p,
    g,
    d,
    e.FUNCTION_DISPATCH
  ), {
    name: "Less",
    case_insensitive: !0,
    illegal: `[=>'/<($"]`,
    contains: o
  };
}
function GT(n) {
  const e = "\\[=*\\[", t = "\\]=*\\]", i = {
    begin: e,
    end: t,
    contains: ["self"]
  }, r = [
    n.COMMENT("--(?!" + e + ")", "$"),
    n.COMMENT(
      "--" + e,
      t,
      {
        contains: [i],
        relevance: 10
      }
    )
  ];
  return {
    name: "Lua",
    aliases: ["pluto"],
    keywords: {
      $pattern: n.UNDERSCORE_IDENT_RE,
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in: (
        // Metatags and globals:
        "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
      )
    },
    contains: r.concat([
      {
        className: "function",
        beginKeywords: "function",
        end: "\\)",
        contains: [
          n.inherit(n.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
          {
            className: "params",
            begin: "\\(",
            endsWithParent: !0,
            contains: r
          }
        ].concat(r)
      },
      n.C_NUMBER_MODE,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: e,
        end: t,
        contains: [i],
        relevance: 5
      }
    ])
  };
}
function WT(n) {
  const e = {
    className: "variable",
    variants: [
      {
        begin: "\\$\\(" + n.UNDERSCORE_IDENT_RE + "\\)",
        contains: [n.BACKSLASH_ESCAPE]
      },
      { begin: /\$[@%<?\^\+\*]/ }
    ]
  }, t = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      n.BACKSLASH_ESCAPE,
      e
    ]
  }, i = {
    className: "variable",
    begin: /\$\([\w-]+\s/,
    end: /\)/,
    keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
    contains: [
      e,
      t
      // Added QUOTE_STRING as they can be a part of functions
    ]
  }, r = { begin: "^" + n.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, s = {
    className: "meta",
    begin: /^\.PHONY:/,
    end: /$/,
    keywords: {
      $pattern: /[\.\w]+/,
      keyword: ".PHONY"
    }
  }, o = {
    className: "section",
    begin: /^[^\s]+:/,
    end: /$/,
    contains: [e]
  };
  return {
    name: "Makefile",
    aliases: [
      "mk",
      "mak",
      "make"
    ],
    keywords: {
      $pattern: /[\w-]+/,
      keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
    },
    contains: [
      n.HASH_COMMENT_MODE,
      e,
      t,
      i,
      r,
      s,
      o
    ]
  };
}
function Jc(n) {
  const e = n.regex, t = {
    begin: /<\/?[A-Za-z_]/,
    end: ">",
    subLanguage: "xml",
    relevance: 0
  }, i = {
    begin: "^[-\\*]{3,}",
    end: "$"
  }, r = {
    className: "code",
    variants: [
      // TODO: fix to allow these to work with sublanguage also
      { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
      { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
      // needed to allow markdown as a sublanguage to work
      {
        begin: "```",
        end: "```+[ ]*$"
      },
      {
        begin: "~~~",
        end: "~~~+[ ]*$"
      },
      { begin: "`.+?`" },
      {
        begin: "(?=^( {4}|\\t))",
        // use contains to gobble up multiple lines to allow the block to be whatever size
        // but only have a single open/close tag vs one per line
        contains: [
          {
            begin: "^( {4}|\\t)",
            end: "(\\n)$"
          }
        ],
        relevance: 0
      }
    ]
  }, s = {
    className: "bullet",
    begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
    end: "\\s+",
    excludeEnd: !0
  }, o = {
    begin: /^\[[^\n]+\]:/,
    returnBegin: !0,
    contains: [
      {
        className: "symbol",
        begin: /\[/,
        end: /\]/,
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "link",
        begin: /:\s*/,
        end: /$/,
        excludeBegin: !0
      }
    ]
  }, a = /[A-Za-z][A-Za-z0-9+.-]*/, l = {
    variants: [
      // too much like nested array access in so many languages
      // to have any real relevance
      {
        begin: /\[.+?\]\[.*?\]/,
        relevance: 0
      },
      // popular internet URLs
      {
        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
        relevance: 2
      },
      {
        begin: e.concat(/\[.+?\]\(/, a, /:\/\/.*?\)/),
        relevance: 2
      },
      // relative urls
      {
        begin: /\[.+?\]\([./?&#].*?\)/,
        relevance: 1
      },
      // whatever else, lower relevance (might not be a link at all)
      {
        begin: /\[.*?\]\(.*?\)/,
        relevance: 0
      }
    ],
    returnBegin: !0,
    contains: [
      {
        // empty strings for alt or link text
        match: /\[(?=\])/
      },
      {
        className: "string",
        relevance: 0,
        begin: "\\[",
        end: "\\]",
        excludeBegin: !0,
        returnEnd: !0
      },
      {
        className: "link",
        relevance: 0,
        begin: "\\]\\(",
        end: "\\)",
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "symbol",
        relevance: 0,
        begin: "\\]\\[",
        end: "\\]",
        excludeBegin: !0,
        excludeEnd: !0
      }
    ]
  }, c = {
    className: "strong",
    contains: [],
    // defined later
    variants: [
      {
        begin: /_{2}(?!\s)/,
        end: /_{2}/
      },
      {
        begin: /\*{2}(?!\s)/,
        end: /\*{2}/
      }
    ]
  }, u = {
    className: "emphasis",
    contains: [],
    // defined later
    variants: [
      {
        begin: /\*(?![*\s])/,
        end: /\*/
      },
      {
        begin: /_(?![_\s])/,
        end: /_/,
        relevance: 0
      }
    ]
  }, h = n.inherit(c, { contains: [] }), f = n.inherit(u, { contains: [] });
  c.contains.push(f), u.contains.push(h);
  let d = [
    t,
    l
  ];
  return [
    c,
    u,
    h,
    f
  ].forEach((g) => {
    g.contains = g.contains.concat(d);
  }), d = d.concat(c, u), {
    name: "Markdown",
    aliases: [
      "md",
      "mkdown",
      "mkd"
    ],
    contains: [
      {
        className: "section",
        variants: [
          {
            begin: "^#{1,6}",
            end: "$",
            contains: d
          },
          {
            begin: "(?=^.+?\\n[=-]{2,}$)",
            contains: [
              { begin: "^[=-]*$" },
              {
                begin: "^",
                end: "\\n",
                contains: d
              }
            ]
          }
        ]
      },
      t,
      s,
      c,
      u,
      {
        className: "quote",
        begin: "^>\\s+",
        contains: d,
        end: "$"
      },
      r,
      i,
      l,
      o,
      {
        //https://spec.commonmark.org/0.31.2/#entity-references
        scope: "literal",
        match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/
      }
    ]
  };
}
function jT(n) {
  const e = {
    className: "built_in",
    begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
  }, t = /[a-zA-Z@][a-zA-Z0-9_]*/, a = {
    "variable.language": [
      "this",
      "super"
    ],
    $pattern: t,
    keyword: [
      "while",
      "export",
      "sizeof",
      "typedef",
      "const",
      "struct",
      "for",
      "union",
      "volatile",
      "static",
      "mutable",
      "if",
      "do",
      "return",
      "goto",
      "enum",
      "else",
      "break",
      "extern",
      "asm",
      "case",
      "default",
      "register",
      "explicit",
      "typename",
      "switch",
      "continue",
      "inline",
      "readonly",
      "assign",
      "readwrite",
      "self",
      "@synchronized",
      "id",
      "typeof",
      "nonatomic",
      "IBOutlet",
      "IBAction",
      "strong",
      "weak",
      "copy",
      "in",
      "out",
      "inout",
      "bycopy",
      "byref",
      "oneway",
      "__strong",
      "__weak",
      "__block",
      "__autoreleasing",
      "@private",
      "@protected",
      "@public",
      "@try",
      "@property",
      "@end",
      "@throw",
      "@catch",
      "@finally",
      "@autoreleasepool",
      "@synthesize",
      "@dynamic",
      "@selector",
      "@optional",
      "@required",
      "@encode",
      "@package",
      "@import",
      "@defs",
      "@compatibility_alias",
      "__bridge",
      "__bridge_transfer",
      "__bridge_retained",
      "__bridge_retain",
      "__covariant",
      "__contravariant",
      "__kindof",
      "_Nonnull",
      "_Nullable",
      "_Null_unspecified",
      "__FUNCTION__",
      "__PRETTY_FUNCTION__",
      "__attribute__",
      "getter",
      "setter",
      "retain",
      "unsafe_unretained",
      "nonnull",
      "nullable",
      "null_unspecified",
      "null_resettable",
      "class",
      "instancetype",
      "NS_DESIGNATED_INITIALIZER",
      "NS_UNAVAILABLE",
      "NS_REQUIRES_SUPER",
      "NS_RETURNS_INNER_POINTER",
      "NS_INLINE",
      "NS_AVAILABLE",
      "NS_DEPRECATED",
      "NS_ENUM",
      "NS_OPTIONS",
      "NS_SWIFT_UNAVAILABLE",
      "NS_ASSUME_NONNULL_BEGIN",
      "NS_ASSUME_NONNULL_END",
      "NS_REFINED_FOR_SWIFT",
      "NS_SWIFT_NAME",
      "NS_SWIFT_NOTHROW",
      "NS_DURING",
      "NS_HANDLER",
      "NS_ENDHANDLER",
      "NS_VALUERETURN",
      "NS_VOIDRETURN"
    ],
    literal: [
      "false",
      "true",
      "FALSE",
      "TRUE",
      "nil",
      "YES",
      "NO",
      "NULL"
    ],
    built_in: [
      "dispatch_once_t",
      "dispatch_queue_t",
      "dispatch_sync",
      "dispatch_async",
      "dispatch_once"
    ],
    type: [
      "int",
      "float",
      "char",
      "unsigned",
      "signed",
      "short",
      "long",
      "double",
      "wchar_t",
      "unichar",
      "void",
      "bool",
      "BOOL",
      "id|0",
      "_Bool"
    ]
  }, l = {
    $pattern: t,
    keyword: [
      "@interface",
      "@class",
      "@protocol",
      "@implementation"
    ]
  };
  return {
    name: "Objective-C",
    aliases: [
      "mm",
      "objc",
      "obj-c",
      "obj-c++",
      "objective-c++"
    ],
    keywords: a,
    illegal: "</",
    contains: [
      e,
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      n.C_NUMBER_MODE,
      n.QUOTE_STRING_MODE,
      n.APOS_STRING_MODE,
      {
        className: "string",
        variants: [
          {
            begin: '@"',
            end: '"',
            illegal: "\\n",
            contains: [n.BACKSLASH_ESCAPE]
          }
        ]
      },
      {
        className: "meta",
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          n.inherit(n.QUOTE_STRING_MODE, { className: "string" }),
          {
            className: "string",
            begin: /<.*?>/,
            end: /$/,
            illegal: "\\n"
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "class",
        begin: "(" + l.keyword.join("|") + ")\\b",
        end: /(\{|$)/,
        excludeEnd: !0,
        keywords: l,
        contains: [n.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: "\\." + n.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
}
function HT(n) {
  const e = n.regex, t = [
    "abs",
    "accept",
    "alarm",
    "and",
    "atan2",
    "bind",
    "binmode",
    "bless",
    "break",
    "caller",
    "chdir",
    "chmod",
    "chomp",
    "chop",
    "chown",
    "chr",
    "chroot",
    "class",
    "close",
    "closedir",
    "connect",
    "continue",
    "cos",
    "crypt",
    "dbmclose",
    "dbmopen",
    "defined",
    "delete",
    "die",
    "do",
    "dump",
    "each",
    "else",
    "elsif",
    "endgrent",
    "endhostent",
    "endnetent",
    "endprotoent",
    "endpwent",
    "endservent",
    "eof",
    "eval",
    "exec",
    "exists",
    "exit",
    "exp",
    "fcntl",
    "field",
    "fileno",
    "flock",
    "for",
    "foreach",
    "fork",
    "format",
    "formline",
    "getc",
    "getgrent",
    "getgrgid",
    "getgrnam",
    "gethostbyaddr",
    "gethostbyname",
    "gethostent",
    "getlogin",
    "getnetbyaddr",
    "getnetbyname",
    "getnetent",
    "getpeername",
    "getpgrp",
    "getpriority",
    "getprotobyname",
    "getprotobynumber",
    "getprotoent",
    "getpwent",
    "getpwnam",
    "getpwuid",
    "getservbyname",
    "getservbyport",
    "getservent",
    "getsockname",
    "getsockopt",
    "given",
    "glob",
    "gmtime",
    "goto",
    "grep",
    "gt",
    "hex",
    "if",
    "index",
    "int",
    "ioctl",
    "join",
    "keys",
    "kill",
    "last",
    "lc",
    "lcfirst",
    "length",
    "link",
    "listen",
    "local",
    "localtime",
    "log",
    "lstat",
    "lt",
    "ma",
    "map",
    "method",
    "mkdir",
    "msgctl",
    "msgget",
    "msgrcv",
    "msgsnd",
    "my",
    "ne",
    "next",
    "no",
    "not",
    "oct",
    "open",
    "opendir",
    "or",
    "ord",
    "our",
    "pack",
    "package",
    "pipe",
    "pop",
    "pos",
    "print",
    "printf",
    "prototype",
    "push",
    "q|0",
    "qq",
    "quotemeta",
    "qw",
    "qx",
    "rand",
    "read",
    "readdir",
    "readline",
    "readlink",
    "readpipe",
    "recv",
    "redo",
    "ref",
    "rename",
    "require",
    "reset",
    "return",
    "reverse",
    "rewinddir",
    "rindex",
    "rmdir",
    "say",
    "scalar",
    "seek",
    "seekdir",
    "select",
    "semctl",
    "semget",
    "semop",
    "send",
    "setgrent",
    "sethostent",
    "setnetent",
    "setpgrp",
    "setpriority",
    "setprotoent",
    "setpwent",
    "setservent",
    "setsockopt",
    "shift",
    "shmctl",
    "shmget",
    "shmread",
    "shmwrite",
    "shutdown",
    "sin",
    "sleep",
    "socket",
    "socketpair",
    "sort",
    "splice",
    "split",
    "sprintf",
    "sqrt",
    "srand",
    "stat",
    "state",
    "study",
    "sub",
    "substr",
    "symlink",
    "syscall",
    "sysopen",
    "sysread",
    "sysseek",
    "system",
    "syswrite",
    "tell",
    "telldir",
    "tie",
    "tied",
    "time",
    "times",
    "tr",
    "truncate",
    "uc",
    "ucfirst",
    "umask",
    "undef",
    "unless",
    "unlink",
    "unpack",
    "unshift",
    "untie",
    "until",
    "use",
    "utime",
    "values",
    "vec",
    "wait",
    "waitpid",
    "wantarray",
    "warn",
    "when",
    "while",
    "write",
    "x|0",
    "xor",
    "y|0"
  ], i = /[dualxmsipngr]{0,12}/, r = {
    $pattern: /[\w.]+/,
    keyword: t.join(" ")
  }, s = {
    className: "subst",
    begin: "[$@]\\{",
    end: "\\}",
    keywords: r
  }, o = {
    begin: /->\{/,
    end: /\}/
    // contains defined later
  }, a = {
    scope: "attr",
    match: /\s+:\s*\w+(\s*\(.*?\))?/
  }, l = {
    scope: "variable",
    variants: [
      { begin: /\$\d/ },
      {
        begin: e.concat(
          /[$%@](?!")(\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          "(?![A-Za-z])(?![@$%])"
        )
      },
      {
        // Only $= is a special Perl variable and one can't declare @= or %=.
        begin: /[$%@](?!")[^\s\w{=]|\$=/,
        relevance: 0
      }
    ],
    contains: [a]
  }, c = {
    className: "number",
    variants: [
      // decimal numbers:
      // include the case where a number starts with a dot (eg. .9), and
      // the leading 0? avoids mixing the first and second match on 0.x cases
      { match: /0?\.[0-9][0-9_]+\b/ },
      // include the special versioned number (eg. v5.38)
      { match: /\bv?(0|[1-9][0-9_]*(\.[0-9_]+)?|[1-9][0-9_]*)\b/ },
      // non-decimal numbers:
      { match: /\b0[0-7][0-7_]*\b/ },
      { match: /\b0x[0-9a-fA-F][0-9a-fA-F_]*\b/ },
      { match: /\b0b[0-1][0-1_]*\b/ }
    ],
    relevance: 0
  }, u = [
    n.BACKSLASH_ESCAPE,
    s,
    l
  ], h = [
    /!/,
    /\//,
    /\|/,
    /\?/,
    /'/,
    /"/,
    // valid but infrequent and weird
    /#/
    // valid but infrequent and weird
  ], f = (m, O, g = "\\1") => {
    const y = g === "\\1" ? g : e.concat(g, O);
    return e.concat(
      e.concat("(?:", m, ")"),
      O,
      /(?:\\.|[^\\\/])*?/,
      y,
      /(?:\\.|[^\\\/])*?/,
      g,
      i
    );
  }, d = (m, O, g) => e.concat(
    e.concat("(?:", m, ")"),
    O,
    /(?:\\.|[^\\\/])*?/,
    g,
    i
  ), p = [
    l,
    n.HASH_COMMENT_MODE,
    n.COMMENT(
      /^=\w/,
      /=cut/,
      { endsWithParent: !0 }
    ),
    o,
    {
      className: "string",
      contains: u,
      variants: [
        {
          begin: "q[qwxr]?\\s*\\(",
          end: "\\)",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\[",
          end: "\\]",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\{",
          end: "\\}",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\|",
          end: "\\|",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*<",
          end: ">",
          relevance: 5
        },
        {
          begin: "qw\\s+q",
          end: "q",
          relevance: 5
        },
        {
          begin: "'",
          end: "'",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "`",
          end: "`",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: /\{\w+\}/,
          relevance: 0
        },
        {
          begin: "-?\\w+\\s*=>",
          relevance: 0
        }
      ]
    },
    c,
    {
      // regexp container
      begin: "(\\/\\/|" + n.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
      keywords: "split return print reverse grep",
      relevance: 0,
      contains: [
        n.HASH_COMMENT_MODE,
        {
          className: "regexp",
          variants: [
            // allow matching common delimiters
            { begin: f("s|tr|y", e.either(...h, { capture: !0 })) },
            // and then paired delmis
            { begin: f("s|tr|y", "\\(", "\\)") },
            { begin: f("s|tr|y", "\\[", "\\]") },
            { begin: f("s|tr|y", "\\{", "\\}") }
          ],
          relevance: 2
        },
        {
          className: "regexp",
          variants: [
            {
              // could be a comment in many languages so do not count
              // as relevant
              begin: /(m|qr)\/\//,
              relevance: 0
            },
            // prefix is optional with /regex/
            { begin: d("(?:m|qr)?", /\//, /\//) },
            // allow matching common delimiters
            { begin: d("m|qr", e.either(...h, { capture: !0 }), /\1/) },
            // allow common paired delmins
            { begin: d("m|qr", /\(/, /\)/) },
            { begin: d("m|qr", /\[/, /\]/) },
            { begin: d("m|qr", /\{/, /\}/) }
          ]
        }
      ]
    },
    {
      className: "function",
      beginKeywords: "sub method",
      end: "(\\s*\\(.*?\\))?[;{]",
      excludeEnd: !0,
      relevance: 5,
      contains: [n.TITLE_MODE, a]
    },
    {
      className: "class",
      beginKeywords: "class",
      end: "[;{]",
      excludeEnd: !0,
      relevance: 5,
      contains: [n.TITLE_MODE, a, c]
    },
    {
      begin: "-\\w\\b",
      relevance: 0
    },
    {
      begin: "^__DATA__$",
      end: "^__END__$",
      subLanguage: "mojolicious",
      contains: [
        {
          begin: "^@@.*",
          end: "$",
          className: "comment"
        }
      ]
    }
  ];
  return s.contains = p, o.contains = p, {
    name: "Perl",
    aliases: [
      "pl",
      "pm"
    ],
    keywords: r,
    contains: p
  };
}
function KT(n) {
  const e = n.regex, t = /(?![A-Za-z0-9])(?![$])/, i = e.concat(
    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
    t
  ), r = e.concat(
    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
    t
  ), s = e.concat(
    /[A-Z]+/,
    t
  ), o = {
    scope: "variable",
    match: "\\$+" + i
  }, a = {
    scope: "meta",
    variants: [
      { begin: /<\?php/, relevance: 10 },
      // boost for obvious PHP
      { begin: /<\?=/ },
      // less relevant per PSR-1 which says not to use short-tags
      { begin: /<\?/, relevance: 0.1 },
      { begin: /\?>/ }
      // end php tag
    ]
  }, l = {
    scope: "subst",
    variants: [
      { begin: /\$\w+/ },
      {
        begin: /\{\$/,
        end: /\}/
      }
    ]
  }, c = n.inherit(n.APOS_STRING_MODE, { illegal: null }), u = n.inherit(n.QUOTE_STRING_MODE, {
    illegal: null,
    contains: n.QUOTE_STRING_MODE.contains.concat(l)
  }), h = {
    begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
    end: /[ \t]*(\w+)\b/,
    contains: n.QUOTE_STRING_MODE.contains.concat(l),
    "on:begin": (P, $) => {
      $.data._beginMatch = P[1] || P[2];
    },
    "on:end": (P, $) => {
      $.data._beginMatch !== P[1] && $.ignoreMatch();
    }
  }, f = n.END_SAME_AS_BEGIN({
    begin: /<<<[ \t]*'(\w+)'\n/,
    end: /[ \t]*(\w+)\b/
  }), d = `[ 	
]`, p = {
    scope: "string",
    variants: [
      u,
      c,
      h,
      f
    ]
  }, m = {
    scope: "number",
    variants: [
      { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
      // Binary w/ underscore support
      { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
      // Octals w/ underscore support
      { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
      // Hex w/ underscore support
      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
      { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
    ],
    relevance: 0
  }, O = [
    "false",
    "null",
    "true"
  ], g = [
    // Magic constants:
    // <https://www.php.net/manual/en/language.constants.predefined.php>
    "__CLASS__",
    "__DIR__",
    "__FILE__",
    "__FUNCTION__",
    "__COMPILER_HALT_OFFSET__",
    "__LINE__",
    "__METHOD__",
    "__NAMESPACE__",
    "__TRAIT__",
    // Function that look like language construct or language construct that look like function:
    // List of keywords that may not require parenthesis
    "die",
    "echo",
    "exit",
    "include",
    "include_once",
    "print",
    "require",
    "require_once",
    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
    // Other keywords:
    // <https://www.php.net/manual/en/reserved.php>
    // <https://www.php.net/manual/en/language.types.type-juggling.php>
    "array",
    "abstract",
    "and",
    "as",
    "binary",
    "bool",
    "boolean",
    "break",
    "callable",
    "case",
    "catch",
    "class",
    "clone",
    "const",
    "continue",
    "declare",
    "default",
    "do",
    "double",
    "else",
    "elseif",
    "empty",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "enum",
    "eval",
    "extends",
    "final",
    "finally",
    "float",
    "for",
    "foreach",
    "from",
    "global",
    "goto",
    "if",
    "implements",
    "instanceof",
    "insteadof",
    "int",
    "integer",
    "interface",
    "isset",
    "iterable",
    "list",
    "match|0",
    "mixed",
    "new",
    "never",
    "object",
    "or",
    "private",
    "protected",
    "public",
    "readonly",
    "real",
    "return",
    "string",
    "switch",
    "throw",
    "trait",
    "try",
    "unset",
    "use",
    "var",
    "void",
    "while",
    "xor",
    "yield"
  ], y = [
    // Standard PHP library:
    // <https://www.php.net/manual/en/book.spl.php>
    "Error|0",
    "AppendIterator",
    "ArgumentCountError",
    "ArithmeticError",
    "ArrayIterator",
    "ArrayObject",
    "AssertionError",
    "BadFunctionCallException",
    "BadMethodCallException",
    "CachingIterator",
    "CallbackFilterIterator",
    "CompileError",
    "Countable",
    "DirectoryIterator",
    "DivisionByZeroError",
    "DomainException",
    "EmptyIterator",
    "ErrorException",
    "Exception",
    "FilesystemIterator",
    "FilterIterator",
    "GlobIterator",
    "InfiniteIterator",
    "InvalidArgumentException",
    "IteratorIterator",
    "LengthException",
    "LimitIterator",
    "LogicException",
    "MultipleIterator",
    "NoRewindIterator",
    "OutOfBoundsException",
    "OutOfRangeException",
    "OuterIterator",
    "OverflowException",
    "ParentIterator",
    "ParseError",
    "RangeException",
    "RecursiveArrayIterator",
    "RecursiveCachingIterator",
    "RecursiveCallbackFilterIterator",
    "RecursiveDirectoryIterator",
    "RecursiveFilterIterator",
    "RecursiveIterator",
    "RecursiveIteratorIterator",
    "RecursiveRegexIterator",
    "RecursiveTreeIterator",
    "RegexIterator",
    "RuntimeException",
    "SeekableIterator",
    "SplDoublyLinkedList",
    "SplFileInfo",
    "SplFileObject",
    "SplFixedArray",
    "SplHeap",
    "SplMaxHeap",
    "SplMinHeap",
    "SplObjectStorage",
    "SplObserver",
    "SplPriorityQueue",
    "SplQueue",
    "SplStack",
    "SplSubject",
    "SplTempFileObject",
    "TypeError",
    "UnderflowException",
    "UnexpectedValueException",
    "UnhandledMatchError",
    // Reserved interfaces:
    // <https://www.php.net/manual/en/reserved.interfaces.php>
    "ArrayAccess",
    "BackedEnum",
    "Closure",
    "Fiber",
    "Generator",
    "Iterator",
    "IteratorAggregate",
    "Serializable",
    "Stringable",
    "Throwable",
    "Traversable",
    "UnitEnum",
    "WeakReference",
    "WeakMap",
    // Reserved classes:
    // <https://www.php.net/manual/en/reserved.classes.php>
    "Directory",
    "__PHP_Incomplete_Class",
    "parent",
    "php_user_filter",
    "self",
    "static",
    "stdClass"
  ], _ = {
    keyword: g,
    literal: ((P) => {
      const $ = [];
      return P.forEach((Y) => {
        $.push(Y), Y.toLowerCase() === Y ? $.push(Y.toUpperCase()) : $.push(Y.toLowerCase());
      }), $;
    })(O),
    built_in: y
  }, v = (P) => P.map(($) => $.replace(/\|\d+$/, "")), x = { variants: [
    {
      match: [
        /new/,
        e.concat(d, "+"),
        // to prevent built ins from being confused as the class constructor call
        e.concat("(?!", v(y).join("\\b|"), "\\b)"),
        r
      ],
      scope: {
        1: "keyword",
        4: "title.class"
      }
    }
  ] }, C = e.concat(i, "\\b(?!\\()"), T = { variants: [
    {
      match: [
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        C
      ],
      scope: { 2: "variable.constant" }
    },
    {
      match: [
        /::/,
        /class/
      ],
      scope: { 2: "variable.language" }
    },
    {
      match: [
        r,
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        C
      ],
      scope: {
        1: "title.class",
        3: "variable.constant"
      }
    },
    {
      match: [
        r,
        e.concat(
          "::",
          e.lookahead(/(?!class\b)/)
        )
      ],
      scope: { 1: "title.class" }
    },
    {
      match: [
        r,
        /::/,
        /class/
      ],
      scope: {
        1: "title.class",
        3: "variable.language"
      }
    }
  ] }, A = {
    scope: "attr",
    match: e.concat(i, e.lookahead(":"), e.lookahead(/(?!::)/))
  }, Q = {
    relevance: 0,
    begin: /\(/,
    end: /\)/,
    keywords: _,
    contains: [
      A,
      o,
      T,
      n.C_BLOCK_COMMENT_MODE,
      p,
      m,
      x
    ]
  }, M = {
    relevance: 0,
    match: [
      /\b/,
      // to prevent keywords from being confused as the function title
      e.concat("(?!fn\\b|function\\b|", v(g).join("\\b|"), "|", v(y).join("\\b|"), "\\b)"),
      i,
      e.concat(d, "*"),
      e.lookahead(/(?=\()/)
    ],
    scope: { 3: "title.function.invoke" },
    contains: [Q]
  };
  Q.contains.push(M);
  const R = [
    A,
    T,
    n.C_BLOCK_COMMENT_MODE,
    p,
    m,
    x
  ], L = {
    begin: e.concat(
      /#\[\s*\\?/,
      e.either(
        r,
        s
      )
    ),
    beginScope: "meta",
    end: /]/,
    endScope: "meta",
    keywords: {
      literal: O,
      keyword: [
        "new",
        "array"
      ]
    },
    contains: [
      {
        begin: /\[/,
        end: /]/,
        keywords: {
          literal: O,
          keyword: [
            "new",
            "array"
          ]
        },
        contains: [
          "self",
          ...R
        ]
      },
      ...R,
      {
        scope: "meta",
        variants: [
          { match: r },
          { match: s }
        ]
      }
    ]
  };
  return {
    case_insensitive: !1,
    keywords: _,
    contains: [
      L,
      n.HASH_COMMENT_MODE,
      n.COMMENT("//", "$"),
      n.COMMENT(
        "/\\*",
        "\\*/",
        { contains: [
          {
            scope: "doctag",
            match: "@[A-Za-z]+"
          }
        ] }
      ),
      {
        match: /__halt_compiler\(\);/,
        keywords: "__halt_compiler",
        starts: {
          scope: "comment",
          end: n.MATCH_NOTHING_RE,
          contains: [
            {
              match: /\?>/,
              scope: "meta",
              endsParent: !0
            }
          ]
        }
      },
      a,
      {
        scope: "variable.language",
        match: /\$this\b/
      },
      o,
      M,
      T,
      {
        match: [
          /const/,
          /\s/,
          i
        ],
        scope: {
          1: "keyword",
          3: "variable.constant"
        }
      },
      x,
      {
        scope: "function",
        relevance: 0,
        beginKeywords: "fn function",
        end: /[;{]/,
        excludeEnd: !0,
        illegal: "[$%\\[]",
        contains: [
          { beginKeywords: "use" },
          n.UNDERSCORE_TITLE_MODE,
          {
            begin: "=>",
            // No markup, just a relevance booster
            endsParent: !0
          },
          {
            scope: "params",
            begin: "\\(",
            end: "\\)",
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: _,
            contains: [
              "self",
              L,
              o,
              T,
              n.C_BLOCK_COMMENT_MODE,
              p,
              m
            ]
          }
        ]
      },
      {
        scope: "class",
        variants: [
          {
            beginKeywords: "enum",
            illegal: /[($"]/
          },
          {
            beginKeywords: "class interface trait",
            illegal: /[:($"]/
          }
        ],
        relevance: 0,
        end: /\{/,
        excludeEnd: !0,
        contains: [
          { beginKeywords: "extends implements" },
          n.UNDERSCORE_TITLE_MODE
        ]
      },
      // both use and namespace still use "old style" rules (vs multi-match)
      // because the namespace name can include `\` and we still want each
      // element to be treated as its own *individual* title
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: ";",
        illegal: /[.']/,
        contains: [n.inherit(n.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
      },
      {
        beginKeywords: "use",
        relevance: 0,
        end: ";",
        contains: [
          // TODO: title.function vs title.class
          {
            match: /\b(as|const|function)\b/,
            scope: "keyword"
          },
          // TODO: could be title.class or title.function
          n.UNDERSCORE_TITLE_MODE
        ]
      },
      p,
      m
    ]
  };
}
function JT(n) {
  return {
    name: "PHP template",
    subLanguage: "xml",
    contains: [
      {
        begin: /<\?(php|=)?/,
        end: /\?>/,
        subLanguage: "php",
        contains: [
          // We don't want the php closing tag ?> to close the PHP block when
          // inside any of the following blocks:
          {
            begin: "/\\*",
            end: "\\*/",
            skip: !0
          },
          {
            begin: 'b"',
            end: '"',
            skip: !0
          },
          {
            begin: "b'",
            end: "'",
            skip: !0
          },
          n.inherit(n.APOS_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          }),
          n.inherit(n.QUOTE_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          })
        ]
      }
    ]
  };
}
function eP(n) {
  return {
    name: "Plain text",
    aliases: [
      "text",
      "txt"
    ],
    disableAutodetect: !0
  };
}
function eu(n) {
  const e = n.regex, t = new RegExp("[\\p{XID_Start}_]\\p{XID_Continue}*", "u"), i = [
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "case",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "match",
    "nonlocal|10",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ], a = {
    $pattern: /[A-Za-z]\w+|__\w+__/,
    keyword: i,
    built_in: [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ],
    literal: [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ],
    type: [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ]
  }, l = {
    className: "meta",
    begin: /^(>>>|\.\.\.) /
  }, c = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: a,
    illegal: /#/
  }, u = {
    begin: /\{\{/,
    relevance: 0
  }, h = {
    className: "string",
    contains: [n.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
        end: /'''/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
        end: /"""/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
        end: /'''/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l,
          u,
          c
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
        end: /"""/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l,
          u,
          c
        ]
      },
      {
        begin: /([uU]|[rR])'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /([uU]|[rR])"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])'/,
        end: /'/
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])"/,
        end: /"/
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'/,
        end: /'/,
        contains: [
          n.BACKSLASH_ESCAPE,
          u,
          c
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"/,
        end: /"/,
        contains: [
          n.BACKSLASH_ESCAPE,
          u,
          c
        ]
      },
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  }, f = "[0-9](_?[0-9])*", d = `(\\b(${f}))?\\.(${f})|\\b(${f})\\.`, p = `\\b|${i.join("|")}`, m = {
    className: "number",
    relevance: 0,
    variants: [
      // exponentfloat, pointfloat
      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
      // optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      // Note: no leading \b because floats can start with a decimal point
      // and we don't want to mishandle e.g. `fn(.5)`,
      // no trailing \b for pointfloat because it can end with a decimal point
      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
      // because both MUST contain a decimal point and so cannot be confused with
      // the interior part of an identifier
      {
        begin: `(\\b(${f})|(${d}))[eE][+-]?(${f})[jJ]?(?=${p})`
      },
      {
        begin: `(${d})[jJ]?`
      },
      // decinteger, bininteger, octinteger, hexinteger
      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
      // optionally "long" in Python 2
      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
      // decinteger is optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${p})`
      },
      {
        begin: `\\b0[bB](_?[01])+[lL]?(?=${p})`
      },
      {
        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${p})`
      },
      {
        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${p})`
      },
      // imagnumber (digitpart-based)
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b(${f})[jJ](?=${p})`
      }
    ]
  }, O = {
    className: "comment",
    begin: e.lookahead(/# type:/),
    end: /$/,
    keywords: a,
    contains: [
      {
        // prevent keywords from coloring `type`
        begin: /# type:/
      },
      // comment within a datatype comment includes no keywords
      {
        begin: /#/,
        end: /\b\B/,
        endsWithParent: !0
      }
    ]
  }, g = {
    className: "params",
    variants: [
      // Exclude params in functions without params
      {
        className: "",
        begin: /\(\s*\)/,
        skip: !0
      },
      {
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        keywords: a,
        contains: [
          "self",
          l,
          m,
          h,
          n.HASH_COMMENT_MODE
        ]
      }
    ]
  };
  return c.contains = [
    h,
    m,
    l
  ], {
    name: "Python",
    aliases: [
      "py",
      "gyp",
      "ipython"
    ],
    unicodeRegex: !0,
    keywords: a,
    illegal: /(<\/|\?)|=>/,
    contains: [
      l,
      m,
      {
        // very common convention
        scope: "variable.language",
        match: /\bself\b/
      },
      {
        // eat "if" prior to string so that it won't accidentally be
        // labeled as an f-string
        beginKeywords: "if",
        relevance: 0
      },
      { match: /\bor\b/, scope: "keyword" },
      h,
      O,
      n.HASH_COMMENT_MODE,
      {
        match: [
          /\bdef/,
          /\s+/,
          t
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [g]
      },
      {
        variants: [
          {
            match: [
              /\bclass/,
              /\s+/,
              t,
              /\s*/,
              /\(\s*/,
              t,
              /\s*\)/
            ]
          },
          {
            match: [
              /\bclass/,
              /\s+/,
              t
            ]
          }
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          6: "title.class.inherited"
        }
      },
      {
        className: "meta",
        begin: /^[\t ]*@/,
        end: /(?=#)|$/,
        contains: [
          m,
          g,
          h
        ]
      }
    ]
  };
}
function tP(n) {
  return {
    aliases: ["pycon"],
    contains: [
      {
        className: "meta.prompt",
        starts: {
          // a space separates the REPL prefix from the actual code
          // this is purely for cleaner HTML output
          end: / |$/,
          starts: {
            end: "$",
            subLanguage: "python"
          }
        },
        variants: [
          { begin: /^>>>(?=[ ]|$)/ },
          { begin: /^\.\.\.(?=[ ]|$)/ }
        ]
      }
    ]
  };
}
function nP(n) {
  const e = n.regex, t = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, i = e.either(
    // Special case: only hexadecimal binary powers can contain fractions
    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
    // Hexadecimal numbers without fraction and optional binary power
    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
    // Decimal numbers
    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
  ), r = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, s = e.either(
    /[()]/,
    /[{}]/,
    /\[\[/,
    /[[\]]/,
    /\\/,
    /,/
  );
  return {
    name: "R",
    keywords: {
      $pattern: t,
      keyword: "function if in break next repeat else for while",
      literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
      built_in: (
        // Builtin constants
        "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
      )
    },
    contains: [
      // Roxygen comments
      n.COMMENT(
        /#'/,
        /$/,
        { contains: [
          {
            // Handle `@examples` separately to cause all subsequent code
            // until the next `@`-tag on its own line to be kept as-is,
            // preventing highlighting. This code is example R code, so nested
            // doctags shouldn’t be treated as such. See
            // `test/markup/r/roxygen.txt` for an example.
            scope: "doctag",
            match: /@examples/,
            starts: {
              end: e.lookahead(e.either(
                // end if another doc comment
                /\n^#'\s*(?=@[a-zA-Z]+)/,
                // or a line with no comment
                /\n^(?!#')/
              )),
              endsParent: !0
            }
          },
          {
            // Handle `@param` to highlight the parameter name following
            // after.
            scope: "doctag",
            begin: "@param",
            end: /$/,
            contains: [
              {
                scope: "variable",
                variants: [
                  { match: t },
                  { match: /`(?:\\.|[^`\\])+`/ }
                ],
                endsParent: !0
              }
            ]
          },
          {
            scope: "doctag",
            match: /@[a-zA-Z]+/
          },
          {
            scope: "keyword",
            match: /\\[a-zA-Z]+/
          }
        ] }
      ),
      n.HASH_COMMENT_MODE,
      {
        scope: "string",
        contains: [n.BACKSLASH_ESCAPE],
        variants: [
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\(/,
            end: /\)(-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\{/,
            end: /\}(-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\[/,
            end: /\](-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\(/,
            end: /\)(-*)'/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\{/,
            end: /\}(-*)'/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\[/,
            end: /\](-*)'/
          }),
          {
            begin: '"',
            end: '"',
            relevance: 0
          },
          {
            begin: "'",
            end: "'",
            relevance: 0
          }
        ]
      },
      // Matching numbers immediately following punctuation and operators is
      // tricky since we need to look at the character ahead of a number to
      // ensure the number is not part of an identifier, and we cannot use
      // negative look-behind assertions. So instead we explicitly handle all
      // possible combinations of (operator|punctuation), number.
      // TODO: replace with negative look-behind when available
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
      {
        relevance: 0,
        variants: [
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              r,
              i
            ]
          },
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              /%[^%]*%/,
              i
            ]
          },
          {
            scope: {
              1: "punctuation",
              2: "number"
            },
            match: [
              s,
              i
            ]
          },
          {
            scope: { 2: "number" },
            match: [
              /[^a-zA-Z0-9._]|^/,
              // not part of an identifier, or start of document
              i
            ]
          }
        ]
      },
      // Operators/punctuation when they're not directly followed by numbers
      {
        // Relevance boost for the most common assignment form.
        scope: { 3: "operator" },
        match: [
          t,
          /\s+/,
          /<-/,
          /\s+/
        ]
      },
      {
        scope: "operator",
        relevance: 0,
        variants: [
          { match: r },
          { match: /%[^%]*%/ }
        ]
      },
      {
        scope: "punctuation",
        relevance: 0,
        match: s
      },
      {
        // Escaped identifier
        begin: "`",
        end: "`",
        contains: [{ begin: /\\./ }]
      }
    ]
  };
}
function iP(n) {
  const e = n.regex, t = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", i = e.either(
    /\b([A-Z]+[a-z0-9]+)+/,
    // ends in caps
    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
  ), r = e.concat(i, /(::\w+)*/), o = {
    "variable.constant": [
      "__FILE__",
      "__LINE__",
      "__ENCODING__"
    ],
    "variable.language": [
      "self",
      "super"
    ],
    keyword: [
      "alias",
      "and",
      "begin",
      "BEGIN",
      "break",
      "case",
      "class",
      "defined",
      "do",
      "else",
      "elsif",
      "end",
      "END",
      "ensure",
      "for",
      "if",
      "in",
      "module",
      "next",
      "not",
      "or",
      "redo",
      "require",
      "rescue",
      "retry",
      "return",
      "then",
      "undef",
      "unless",
      "until",
      "when",
      "while",
      "yield",
      ...[
        "include",
        "extend",
        "prepend",
        "public",
        "private",
        "protected",
        "raise",
        "throw"
      ]
    ],
    built_in: [
      "proc",
      "lambda",
      "attr_accessor",
      "attr_reader",
      "attr_writer",
      "define_method",
      "private_constant",
      "module_function"
    ],
    literal: [
      "true",
      "false",
      "nil"
    ]
  }, a = {
    className: "doctag",
    begin: "@[A-Za-z]+"
  }, l = {
    begin: "#<",
    end: ">"
  }, c = [
    n.COMMENT(
      "#",
      "$",
      { contains: [a] }
    ),
    n.COMMENT(
      "^=begin",
      "^=end",
      {
        contains: [a],
        relevance: 10
      }
    ),
    n.COMMENT("^__END__", n.MATCH_NOTHING_RE)
  ], u = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: o
  }, h = {
    className: "string",
    contains: [
      n.BACKSLASH_ESCAPE,
      u
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /`/,
        end: /`/
      },
      {
        begin: /%[qQwWx]?\(/,
        end: /\)/
      },
      {
        begin: /%[qQwWx]?\[/,
        end: /\]/
      },
      {
        begin: /%[qQwWx]?\{/,
        end: /\}/
      },
      {
        begin: /%[qQwWx]?</,
        end: />/
      },
      {
        begin: /%[qQwWx]?\//,
        end: /\//
      },
      {
        begin: /%[qQwWx]?%/,
        end: /%/
      },
      {
        begin: /%[qQwWx]?-/,
        end: /-/
      },
      {
        begin: /%[qQwWx]?\|/,
        end: /\|/
      },
      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
      // where ? is the last character of a preceding identifier, as in: `func?4`
      { begin: /\B\?(\\\d{1,3})/ },
      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
      { begin: /\B\?\\?\S/ },
      // heredocs
      {
        // this guard makes sure that we have an entire heredoc and not a false
        // positive (auto-detect, etc.)
        begin: e.concat(
          /<<[-~]?'?/,
          e.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
        ),
        contains: [
          n.END_SAME_AS_BEGIN({
            begin: /(\w+)/,
            end: /(\w+)/,
            contains: [
              n.BACKSLASH_ESCAPE,
              u
            ]
          })
        ]
      }
    ]
  }, f = "[1-9](_?[0-9])*|0", d = "[0-9](_?[0-9])*", p = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal integer/float, optionally exponential or rational, optionally imaginary
      { begin: `\\b(${f})(\\.(${d}))?([eE][+-]?(${d})|r)?i?\\b` },
      // explicit decimal/binary/octal/hexadecimal integer,
      // optionally rational and/or imaginary
      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
      { begin: "\\b0(_?[0-7])+r?i?\\b" }
    ]
  }, m = {
    variants: [
      {
        match: /\(\)/
      },
      {
        className: "params",
        begin: /\(/,
        end: /(?=\))/,
        excludeBegin: !0,
        endsParent: !0,
        keywords: o
      }
    ]
  }, x = [
    h,
    {
      variants: [
        {
          match: [
            /class\s+/,
            r,
            /\s+<\s+/,
            r
          ]
        },
        {
          match: [
            /\b(class|module)\s+/,
            r
          ]
        }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: o
    },
    {
      match: [
        /(include|extend)\s+/,
        r
      ],
      scope: {
        2: "title.class"
      },
      keywords: o
    },
    {
      relevance: 0,
      match: [
        r,
        /\.new[. (]/
      ],
      scope: {
        1: "title.class"
      }
    },
    {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    },
    {
      relevance: 0,
      match: i,
      scope: "title.class"
    },
    {
      match: [
        /def/,
        /\s+/,
        t
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        m
      ]
    },
    {
      // swallow namespace qualifiers before symbols
      begin: n.IDENT_RE + "::"
    },
    {
      className: "symbol",
      begin: n.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
      relevance: 0
    },
    {
      className: "symbol",
      begin: ":(?!\\s)",
      contains: [
        h,
        { begin: t }
      ],
      relevance: 0
    },
    p,
    {
      // negative-look forward attempts to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    },
    {
      className: "params",
      begin: /\|(?!=)/,
      end: /\|/,
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0,
      // this could be a lot of things (in other languages) other than params
      keywords: o
    },
    {
      // regexp container
      begin: "(" + n.RE_STARTERS_RE + "|unless)\\s*",
      keywords: "unless",
      contains: [
        {
          className: "regexp",
          contains: [
            n.BACKSLASH_ESCAPE,
            u
          ],
          illegal: /\n/,
          variants: [
            {
              begin: "/",
              end: "/[a-z]*"
            },
            {
              begin: /%r\{/,
              end: /\}[a-z]*/
            },
            {
              begin: "%r\\(",
              end: "\\)[a-z]*"
            },
            {
              begin: "%r!",
              end: "![a-z]*"
            },
            {
              begin: "%r\\[",
              end: "\\][a-z]*"
            }
          ]
        }
      ].concat(l, c),
      relevance: 0
    }
  ].concat(l, c);
  u.contains = x, m.contains = x;
  const Q = [
    {
      begin: /^\s*=>/,
      starts: {
        end: "$",
        contains: x
      }
    },
    {
      className: "meta.prompt",
      begin: "^(" + "[>?]>" + "|" + "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]" + "|" + "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>" + ")(?=[ ])",
      starts: {
        end: "$",
        keywords: o,
        contains: x
      }
    }
  ];
  return c.unshift(l), {
    name: "Ruby",
    aliases: [
      "rb",
      "gemspec",
      "podspec",
      "thor",
      "irb"
    ],
    keywords: o,
    illegal: /\/\*/,
    contains: [n.SHEBANG({ binary: "ruby" })].concat(Q).concat(c).concat(x)
  };
}
function rP(n) {
  const e = n.regex, t = /(r#)?/, i = e.concat(t, n.UNDERSCORE_IDENT_RE), r = e.concat(t, n.IDENT_RE), s = {
    className: "title.function.invoke",
    relevance: 0,
    begin: e.concat(
      /\b/,
      /(?!let|for|while|if|else|match\b)/,
      r,
      e.lookahead(/\s*\(/)
    )
  }, o = "([ui](8|16|32|64|128|size)|f(32|64))?", a = [
    "abstract",
    "as",
    "async",
    "await",
    "become",
    "box",
    "break",
    "const",
    "continue",
    "crate",
    "do",
    "dyn",
    "else",
    "enum",
    "extern",
    "false",
    "final",
    "fn",
    "for",
    "if",
    "impl",
    "in",
    "let",
    "loop",
    "macro",
    "match",
    "mod",
    "move",
    "mut",
    "override",
    "priv",
    "pub",
    "ref",
    "return",
    "self",
    "Self",
    "static",
    "struct",
    "super",
    "trait",
    "true",
    "try",
    "type",
    "typeof",
    "union",
    "unsafe",
    "unsized",
    "use",
    "virtual",
    "where",
    "while",
    "yield"
  ], l = [
    "true",
    "false",
    "Some",
    "None",
    "Ok",
    "Err"
  ], c = [
    // functions
    "drop ",
    // traits
    "Copy",
    "Send",
    "Sized",
    "Sync",
    "Drop",
    "Fn",
    "FnMut",
    "FnOnce",
    "ToOwned",
    "Clone",
    "Debug",
    "PartialEq",
    "PartialOrd",
    "Eq",
    "Ord",
    "AsRef",
    "AsMut",
    "Into",
    "From",
    "Default",
    "Iterator",
    "Extend",
    "IntoIterator",
    "DoubleEndedIterator",
    "ExactSizeIterator",
    "SliceConcatExt",
    "ToString",
    // macros
    "assert!",
    "assert_eq!",
    "bitflags!",
    "bytes!",
    "cfg!",
    "col!",
    "concat!",
    "concat_idents!",
    "debug_assert!",
    "debug_assert_eq!",
    "env!",
    "eprintln!",
    "panic!",
    "file!",
    "format!",
    "format_args!",
    "include_bytes!",
    "include_str!",
    "line!",
    "local_data_key!",
    "module_path!",
    "option_env!",
    "print!",
    "println!",
    "select!",
    "stringify!",
    "try!",
    "unimplemented!",
    "unreachable!",
    "vec!",
    "write!",
    "writeln!",
    "macro_rules!",
    "assert_ne!",
    "debug_assert_ne!"
  ], u = [
    "i8",
    "i16",
    "i32",
    "i64",
    "i128",
    "isize",
    "u8",
    "u16",
    "u32",
    "u64",
    "u128",
    "usize",
    "f32",
    "f64",
    "str",
    "char",
    "bool",
    "Box",
    "Option",
    "Result",
    "String",
    "Vec"
  ];
  return {
    name: "Rust",
    aliases: ["rs"],
    keywords: {
      $pattern: n.IDENT_RE + "!?",
      type: u,
      keyword: a,
      literal: l,
      built_in: c
    },
    illegal: "</",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
      n.inherit(n.QUOTE_STRING_MODE, {
        begin: /b?"/,
        illegal: null
      }),
      {
        className: "symbol",
        // negative lookahead to avoid matching `'`
        begin: /'[a-zA-Z_][a-zA-Z0-9_]*(?!')/
      },
      {
        scope: "string",
        variants: [
          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
          {
            begin: /b?'/,
            end: /'/,
            contains: [
              {
                scope: "char.escape",
                match: /\\('|\w|x\w{2}|u\w{4}|U\w{8})/
              }
            ]
          }
        ]
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + o },
          { begin: "\\b0o([0-7_]+)" + o },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + o },
          { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + o }
        ],
        relevance: 0
      },
      {
        begin: [
          /fn/,
          /\s+/,
          i
        ],
        className: {
          1: "keyword",
          3: "title.function"
        }
      },
      {
        className: "meta",
        begin: "#!?\\[",
        end: "\\]",
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/,
            contains: [
              n.BACKSLASH_ESCAPE
            ]
          }
        ]
      },
      {
        begin: [
          /let/,
          /\s+/,
          /(?:mut\s+)?/,
          i
        ],
        className: {
          1: "keyword",
          3: "keyword",
          4: "variable"
        }
      },
      // must come before impl/for rule later
      {
        begin: [
          /for/,
          /\s+/,
          i,
          /\s+/,
          /in/
        ],
        className: {
          1: "keyword",
          3: "variable",
          5: "keyword"
        }
      },
      {
        begin: [
          /type/,
          /\s+/,
          i
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: [
          /(?:trait|enum|struct|union|impl|for)/,
          /\s+/,
          i
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: n.IDENT_RE + "::",
        keywords: {
          keyword: "Self",
          built_in: c,
          type: u
        }
      },
      {
        className: "punctuation",
        begin: "->"
      },
      s
    ]
  };
}
const sP = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), oP = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "optgroup",
  "option",
  "p",
  "picture",
  "q",
  "quote",
  "samp",
  "section",
  "select",
  "source",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], aP = [
  "defs",
  "g",
  "marker",
  "mask",
  "pattern",
  "svg",
  "switch",
  "symbol",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feFlood",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMorphology",
  "feOffset",
  "feSpecularLighting",
  "feTile",
  "feTurbulence",
  "linearGradient",
  "radialGradient",
  "stop",
  "circle",
  "ellipse",
  "image",
  "line",
  "path",
  "polygon",
  "polyline",
  "rect",
  "text",
  "use",
  "textPath",
  "tspan",
  "foreignObject",
  "clipPath"
], lP = [
  ...oP,
  ...aP
], cP = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
].sort().reverse(), uP = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
].sort().reverse(), hP = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
].sort().reverse(), fP = [
  "accent-color",
  "align-content",
  "align-items",
  "align-self",
  "alignment-baseline",
  "all",
  "anchor-name",
  "animation",
  "animation-composition",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-range",
  "animation-range-end",
  "animation-range-start",
  "animation-timeline",
  "animation-timing-function",
  "appearance",
  "aspect-ratio",
  "backdrop-filter",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-position-x",
  "background-position-y",
  "background-repeat",
  "background-size",
  "baseline-shift",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-end-end-radius",
  "border-end-start-radius",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-start-end-radius",
  "border-start-start-radius",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-align",
  "box-decoration-break",
  "box-direction",
  "box-flex",
  "box-flex-group",
  "box-lines",
  "box-ordinal-group",
  "box-orient",
  "box-pack",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "color-interpolation",
  "color-interpolation-filters",
  "color-profile",
  "color-rendering",
  "color-scheme",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "contain-intrinsic-block-size",
  "contain-intrinsic-height",
  "contain-intrinsic-inline-size",
  "contain-intrinsic-size",
  "contain-intrinsic-width",
  "container",
  "container-name",
  "container-type",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "counter-set",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "cx",
  "cy",
  "direction",
  "display",
  "dominant-baseline",
  "empty-cells",
  "enable-background",
  "field-sizing",
  "fill",
  "fill-opacity",
  "fill-rule",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flood-color",
  "flood-opacity",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-optical-sizing",
  "font-palette",
  "font-size",
  "font-size-adjust",
  "font-smooth",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-synthesis-position",
  "font-synthesis-small-caps",
  "font-synthesis-style",
  "font-synthesis-weight",
  "font-variant",
  "font-variant-alternates",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-emoji",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "forced-color-adjust",
  "gap",
  "glyph-orientation-horizontal",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphenate-character",
  "hyphenate-limit-chars",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "initial-letter",
  "initial-letter-align",
  "inline-size",
  "inset",
  "inset-area",
  "inset-block",
  "inset-block-end",
  "inset-block-start",
  "inset-inline",
  "inset-inline-end",
  "inset-inline-start",
  "isolation",
  "justify-content",
  "justify-items",
  "justify-self",
  "kerning",
  "left",
  "letter-spacing",
  "lighting-color",
  "line-break",
  "line-height",
  "line-height-step",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "margin-trim",
  "marker",
  "marker-end",
  "marker-mid",
  "marker-start",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "masonry-auto-flow",
  "math-depth",
  "math-shift",
  "math-style",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "offset",
  "offset-anchor",
  "offset-distance",
  "offset-path",
  "offset-position",
  "offset-rotate",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-anchor",
  "overflow-block",
  "overflow-clip-margin",
  "overflow-inline",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "overlay",
  "overscroll-behavior",
  "overscroll-behavior-block",
  "overscroll-behavior-inline",
  "overscroll-behavior-x",
  "overscroll-behavior-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "paint-order",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "place-content",
  "place-items",
  "place-self",
  "pointer-events",
  "position",
  "position-anchor",
  "position-visibility",
  "print-color-adjust",
  "quotes",
  "r",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "rotate",
  "row-gap",
  "ruby-align",
  "ruby-position",
  "scale",
  "scroll-behavior",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scroll-timeline",
  "scroll-timeline-axis",
  "scroll-timeline-name",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "shape-rendering",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "stop-color",
  "stop-opacity",
  "stroke",
  "stroke-dasharray",
  "stroke-dashoffset",
  "stroke-linecap",
  "stroke-linejoin",
  "stroke-miterlimit",
  "stroke-opacity",
  "stroke-width",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-anchor",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-skip",
  "text-decoration-skip-ink",
  "text-decoration-style",
  "text-decoration-thickness",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-size-adjust",
  "text-transform",
  "text-underline-offset",
  "text-underline-position",
  "text-wrap",
  "text-wrap-mode",
  "text-wrap-style",
  "timeline-scope",
  "top",
  "touch-action",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-behavior",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "translate",
  "unicode-bidi",
  "user-modify",
  "user-select",
  "vector-effect",
  "vertical-align",
  "view-timeline",
  "view-timeline-axis",
  "view-timeline-inset",
  "view-timeline-name",
  "view-transition-name",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "white-space-collapse",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "x",
  "y",
  "z-index",
  "zoom"
].sort().reverse();
function dP(n) {
  const e = sP(n), t = hP, i = uP, r = "@[a-z-]+", s = "and or not only", a = {
    className: "variable",
    begin: "(\\$" + "[a-zA-Z-][a-zA-Z0-9_-]*" + ")\\b",
    relevance: 0
  };
  return {
    name: "SCSS",
    case_insensitive: !0,
    illegal: "[=/|']",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      e.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: "#[A-Za-z0-9_-]+",
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\.[A-Za-z0-9_-]+",
        relevance: 0
      },
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-tag",
        begin: "\\b(" + lP.join("|") + ")\\b",
        // was there, before, but why?
        relevance: 0
      },
      {
        className: "selector-pseudo",
        begin: ":(" + i.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + t.join("|") + ")"
      },
      a,
      {
        // pseudo-selector params
        begin: /\(/,
        end: /\)/,
        contains: [e.CSS_NUMBER_MODE]
      },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + fP.join("|") + ")\\b"
      },
      { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
      {
        begin: /:/,
        end: /[;}{]/,
        relevance: 0,
        contains: [
          e.BLOCK_COMMENT,
          a,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE,
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          e.IMPORTANT,
          e.FUNCTION_DISPATCH
        ]
      },
      // matching these here allows us to treat them more like regular CSS
      // rules so everything between the {} gets regular rule highlighting,
      // which is what we want for page and font-face
      {
        begin: "@(page|font-face)",
        keywords: {
          $pattern: r,
          keyword: "@page @font-face"
        }
      },
      {
        begin: "@",
        end: "[{;]",
        returnBegin: !0,
        keywords: {
          $pattern: /[a-z-]+/,
          keyword: s,
          attribute: cP.join(" ")
        },
        contains: [
          {
            begin: r,
            className: "keyword"
          },
          {
            begin: /[a-z-]+(?=:)/,
            className: "attribute"
          },
          a,
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE
        ]
      },
      e.FUNCTION_DISPATCH
    ]
  };
}
function pP(n) {
  return {
    name: "Shell Session",
    aliases: [
      "console",
      "shellsession"
    ],
    contains: [
      {
        className: "meta.prompt",
        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
        // echo /path/to/home > t.exe
        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
        starts: {
          end: /[^\\](?=\s*$)/,
          subLanguage: "bash"
        }
      }
    ]
  };
}
function bb(n) {
  const e = n.regex, t = n.COMMENT("--", "$"), i = {
    scope: "string",
    variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [{ match: /''/ }]
      }
    ]
  }, r = {
    begin: /"/,
    end: /"/,
    contains: [{ match: /""/ }]
  }, s = [
    "true",
    "false",
    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
    // "null",
    "unknown"
  ], o = [
    "double precision",
    "large object",
    "with timezone",
    "without timezone"
  ], a = [
    "bigint",
    "binary",
    "blob",
    "boolean",
    "char",
    "character",
    "clob",
    "date",
    "dec",
    "decfloat",
    "decimal",
    "float",
    "int",
    "integer",
    "interval",
    "nchar",
    "nclob",
    "national",
    "numeric",
    "real",
    "row",
    "smallint",
    "time",
    "timestamp",
    "varchar",
    "varying",
    // modifier (character varying)
    "varbinary"
  ], l = [
    "add",
    "asc",
    "collation",
    "desc",
    "final",
    "first",
    "last",
    "view"
  ], c = [
    "abs",
    "acos",
    "all",
    "allocate",
    "alter",
    "and",
    "any",
    "are",
    "array",
    "array_agg",
    "array_max_cardinality",
    "as",
    "asensitive",
    "asin",
    "asymmetric",
    "at",
    "atan",
    "atomic",
    "authorization",
    "avg",
    "begin",
    "begin_frame",
    "begin_partition",
    "between",
    "bigint",
    "binary",
    "blob",
    "boolean",
    "both",
    "by",
    "call",
    "called",
    "cardinality",
    "cascaded",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char_length",
    "character",
    "character_length",
    "check",
    "classifier",
    "clob",
    "close",
    "coalesce",
    "collate",
    "collect",
    "column",
    "commit",
    "condition",
    "connect",
    "constraint",
    "contains",
    "convert",
    "copy",
    "corr",
    "corresponding",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "create",
    "cross",
    "cube",
    "cume_dist",
    "current",
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_row",
    "current_schema",
    "current_time",
    "current_timestamp",
    "current_path",
    "current_role",
    "current_transform_group_for_type",
    "current_user",
    "cursor",
    "cycle",
    "date",
    "day",
    "deallocate",
    "dec",
    "decimal",
    "decfloat",
    "declare",
    "default",
    "define",
    "delete",
    "dense_rank",
    "deref",
    "describe",
    "deterministic",
    "disconnect",
    "distinct",
    "double",
    "drop",
    "dynamic",
    "each",
    "element",
    "else",
    "empty",
    "end",
    "end_frame",
    "end_partition",
    "end-exec",
    "equals",
    "escape",
    "every",
    "except",
    "exec",
    "execute",
    "exists",
    "exp",
    "external",
    "extract",
    "false",
    "fetch",
    "filter",
    "first_value",
    "float",
    "floor",
    "for",
    "foreign",
    "frame_row",
    "free",
    "from",
    "full",
    "function",
    "fusion",
    "get",
    "global",
    "grant",
    "group",
    "grouping",
    "groups",
    "having",
    "hold",
    "hour",
    "identity",
    "in",
    "indicator",
    "initial",
    "inner",
    "inout",
    "insensitive",
    "insert",
    "int",
    "integer",
    "intersect",
    "intersection",
    "interval",
    "into",
    "is",
    "join",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "language",
    "large",
    "last_value",
    "lateral",
    "lead",
    "leading",
    "left",
    "like",
    "like_regex",
    "listagg",
    "ln",
    "local",
    "localtime",
    "localtimestamp",
    "log",
    "log10",
    "lower",
    "match",
    "match_number",
    "match_recognize",
    "matches",
    "max",
    "member",
    "merge",
    "method",
    "min",
    "minute",
    "mod",
    "modifies",
    "module",
    "month",
    "multiset",
    "national",
    "natural",
    "nchar",
    "nclob",
    "new",
    "no",
    "none",
    "normalize",
    "not",
    "nth_value",
    "ntile",
    "null",
    "nullif",
    "numeric",
    "octet_length",
    "occurrences_regex",
    "of",
    "offset",
    "old",
    "omit",
    "on",
    "one",
    "only",
    "open",
    "or",
    "order",
    "out",
    "outer",
    "over",
    "overlaps",
    "overlay",
    "parameter",
    "partition",
    "pattern",
    "per",
    "percent",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "period",
    "portion",
    "position",
    "position_regex",
    "power",
    "precedes",
    "precision",
    "prepare",
    "primary",
    "procedure",
    "ptf",
    "range",
    "rank",
    "reads",
    "real",
    "recursive",
    "ref",
    "references",
    "referencing",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "release",
    "result",
    "return",
    "returns",
    "revoke",
    "right",
    "rollback",
    "rollup",
    "row",
    "row_number",
    "rows",
    "running",
    "savepoint",
    "scope",
    "scroll",
    "search",
    "second",
    "seek",
    "select",
    "sensitive",
    "session_user",
    "set",
    "show",
    "similar",
    "sin",
    "sinh",
    "skip",
    "smallint",
    "some",
    "specific",
    "specifictype",
    "sql",
    "sqlexception",
    "sqlstate",
    "sqlwarning",
    "sqrt",
    "start",
    "static",
    "stddev_pop",
    "stddev_samp",
    "submultiset",
    "subset",
    "substring",
    "substring_regex",
    "succeeds",
    "sum",
    "symmetric",
    "system",
    "system_time",
    "system_user",
    "table",
    "tablesample",
    "tan",
    "tanh",
    "then",
    "time",
    "timestamp",
    "timezone_hour",
    "timezone_minute",
    "to",
    "trailing",
    "translate",
    "translate_regex",
    "translation",
    "treat",
    "trigger",
    "trim",
    "trim_array",
    "true",
    "truncate",
    "uescape",
    "union",
    "unique",
    "unknown",
    "unnest",
    "update",
    "upper",
    "user",
    "using",
    "value",
    "values",
    "value_of",
    "var_pop",
    "var_samp",
    "varbinary",
    "varchar",
    "varying",
    "versioning",
    "when",
    "whenever",
    "where",
    "width_bucket",
    "window",
    "with",
    "within",
    "without",
    "year"
  ], u = [
    "abs",
    "acos",
    "array_agg",
    "asin",
    "atan",
    "avg",
    "cast",
    "ceil",
    "ceiling",
    "coalesce",
    "corr",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "cume_dist",
    "dense_rank",
    "deref",
    "element",
    "exp",
    "extract",
    "first_value",
    "floor",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "last_value",
    "lead",
    "listagg",
    "ln",
    "log",
    "log10",
    "lower",
    "max",
    "min",
    "mod",
    "nth_value",
    "ntile",
    "nullif",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "position",
    "position_regex",
    "power",
    "rank",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "row_number",
    "sin",
    "sinh",
    "sqrt",
    "stddev_pop",
    "stddev_samp",
    "substring",
    "substring_regex",
    "sum",
    "tan",
    "tanh",
    "translate",
    "translate_regex",
    "treat",
    "trim",
    "trim_array",
    "unnest",
    "upper",
    "value_of",
    "var_pop",
    "var_samp",
    "width_bucket"
  ], h = [
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_schema",
    "current_transform_group_for_type",
    "current_user",
    "session_user",
    "system_time",
    "system_user",
    "current_time",
    "localtime",
    "current_timestamp",
    "localtimestamp"
  ], f = [
    "create table",
    "insert into",
    "primary key",
    "foreign key",
    "not null",
    "alter table",
    "add constraint",
    "grouping sets",
    "on overflow",
    "character set",
    "respect nulls",
    "ignore nulls",
    "nulls first",
    "nulls last",
    "depth first",
    "breadth first"
  ], d = u, p = [
    ...c,
    ...l
  ].filter((v) => !u.includes(v)), m = {
    scope: "variable",
    match: /@[a-z0-9][a-z0-9_]*/
  }, O = {
    scope: "operator",
    match: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
    relevance: 0
  }, g = {
    match: e.concat(/\b/, e.either(...d), /\s*\(/),
    relevance: 0,
    keywords: { built_in: d }
  };
  function y(v) {
    return e.concat(
      /\b/,
      e.either(...v.map((x) => x.replace(/\s+/, "\\s+"))),
      /\b/
    );
  }
  const S = {
    scope: "keyword",
    match: y(f),
    relevance: 0
  };
  function _(v, {
    exceptions: x,
    when: C
  } = {}) {
    const T = C;
    return x = x || [], v.map((A) => A.match(/\|\d+$/) || x.includes(A) ? A : T(A) ? `${A}|0` : A);
  }
  return {
    name: "SQL",
    case_insensitive: !0,
    // does not include {} or HTML tags `</`
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: _(p, { when: (v) => v.length < 3 }),
      literal: s,
      type: a,
      built_in: h
    },
    contains: [
      {
        scope: "type",
        match: y(o)
      },
      S,
      g,
      m,
      i,
      r,
      n.C_NUMBER_MODE,
      n.C_BLOCK_COMMENT_MODE,
      t,
      O
    ]
  };
}
function yb(n) {
  return n ? typeof n == "string" ? n : n.source : null;
}
function Kr(n) {
  return Le("(?=", n, ")");
}
function Le(...n) {
  return n.map((t) => yb(t)).join("");
}
function mP(n) {
  const e = n[n.length - 1];
  return typeof e == "object" && e.constructor === Object ? (n.splice(n.length - 1, 1), e) : {};
}
function Tt(...n) {
  return "(" + (mP(n).capture ? "" : "?:") + n.map((i) => yb(i)).join("|") + ")";
}
const $h = (n) => Le(
  /\b/,
  n,
  /\w$/.test(n) ? /\b/ : /\B/
), gP = [
  "Protocol",
  // contextual
  "Type"
  // contextual
].map($h), jd = [
  "init",
  "self"
].map($h), OP = [
  "Any",
  "Self"
], Vl = [
  // strings below will be fed into the regular `keywords` engine while regex
  // will result in additional modes being created to scan for those keywords to
  // avoid conflicts with other rules
  "actor",
  "any",
  // contextual
  "associatedtype",
  "async",
  "await",
  /as\?/,
  // operator
  /as!/,
  // operator
  "as",
  // operator
  "borrowing",
  // contextual
  "break",
  "case",
  "catch",
  "class",
  "consume",
  // contextual
  "consuming",
  // contextual
  "continue",
  "convenience",
  // contextual
  "copy",
  // contextual
  "default",
  "defer",
  "deinit",
  "didSet",
  // contextual
  "distributed",
  "do",
  "dynamic",
  // contextual
  "each",
  "else",
  "enum",
  "extension",
  "fallthrough",
  /fileprivate\(set\)/,
  "fileprivate",
  "final",
  // contextual
  "for",
  "func",
  "get",
  // contextual
  "guard",
  "if",
  "import",
  "indirect",
  // contextual
  "infix",
  // contextual
  /init\?/,
  /init!/,
  "inout",
  /internal\(set\)/,
  "internal",
  "in",
  "is",
  // operator
  "isolated",
  // contextual
  "nonisolated",
  // contextual
  "lazy",
  // contextual
  "let",
  "macro",
  "mutating",
  // contextual
  "nonmutating",
  // contextual
  /open\(set\)/,
  // contextual
  "open",
  // contextual
  "operator",
  "optional",
  // contextual
  "override",
  // contextual
  "package",
  "postfix",
  // contextual
  "precedencegroup",
  "prefix",
  // contextual
  /private\(set\)/,
  "private",
  "protocol",
  /public\(set\)/,
  "public",
  "repeat",
  "required",
  // contextual
  "rethrows",
  "return",
  "set",
  // contextual
  "some",
  // contextual
  "static",
  "struct",
  "subscript",
  "super",
  "switch",
  "throws",
  "throw",
  /try\?/,
  // operator
  /try!/,
  // operator
  "try",
  // operator
  "typealias",
  /unowned\(safe\)/,
  // contextual
  /unowned\(unsafe\)/,
  // contextual
  "unowned",
  // contextual
  "var",
  "weak",
  // contextual
  "where",
  "while",
  "willSet"
  // contextual
], Hd = [
  "false",
  "nil",
  "true"
], bP = [
  "assignment",
  "associativity",
  "higherThan",
  "left",
  "lowerThan",
  "none",
  "right"
], yP = [
  "#colorLiteral",
  "#column",
  "#dsohandle",
  "#else",
  "#elseif",
  "#endif",
  "#error",
  "#file",
  "#fileID",
  "#fileLiteral",
  "#filePath",
  "#function",
  "#if",
  "#imageLiteral",
  "#keyPath",
  "#line",
  "#selector",
  "#sourceLocation",
  "#warning"
], Kd = [
  "abs",
  "all",
  "any",
  "assert",
  "assertionFailure",
  "debugPrint",
  "dump",
  "fatalError",
  "getVaList",
  "isKnownUniquelyReferenced",
  "max",
  "min",
  "numericCast",
  "pointwiseMax",
  "pointwiseMin",
  "precondition",
  "preconditionFailure",
  "print",
  "readLine",
  "repeatElement",
  "sequence",
  "stride",
  "swap",
  "swift_unboxFromSwiftValueWithType",
  "transcode",
  "type",
  "unsafeBitCast",
  "unsafeDowncast",
  "withExtendedLifetime",
  "withUnsafeMutablePointer",
  "withUnsafePointer",
  "withVaList",
  "withoutActuallyEscaping",
  "zip"
], xb = Tt(
  /[/=\-+!*%<>&|^~?]/,
  /[\u00A1-\u00A7]/,
  /[\u00A9\u00AB]/,
  /[\u00AC\u00AE]/,
  /[\u00B0\u00B1]/,
  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
  /[\u2016-\u2017]/,
  /[\u2020-\u2027]/,
  /[\u2030-\u203E]/,
  /[\u2041-\u2053]/,
  /[\u2055-\u205E]/,
  /[\u2190-\u23FF]/,
  /[\u2500-\u2775]/,
  /[\u2794-\u2BFF]/,
  /[\u2E00-\u2E7F]/,
  /[\u3001-\u3003]/,
  /[\u3008-\u3020]/,
  /[\u3030]/
), kb = Tt(
  xb,
  /[\u0300-\u036F]/,
  /[\u1DC0-\u1DFF]/,
  /[\u20D0-\u20FF]/,
  /[\uFE00-\uFE0F]/,
  /[\uFE20-\uFE2F]/
  // TODO: The following characters are also allowed, but the regex isn't supported yet.
  // /[\u{E0100}-\u{E01EF}]/u
), Yl = Le(xb, kb, "*"), Sb = Tt(
  /[a-zA-Z_]/,
  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
  /[\u1E00-\u1FFF]/,
  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
  /[\uFE47-\uFEFE\uFF00-\uFFFD]/
  // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
  // The following characters are also allowed, but the regexes aren't supported yet.
  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
), wa = Tt(
  Sb,
  /\d/,
  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
), _n = Le(Sb, wa, "*"), To = Le(/[A-Z]/, wa, "*"), xP = [
  "attached",
  "autoclosure",
  Le(/convention\(/, Tt("swift", "block", "c"), /\)/),
  "discardableResult",
  "dynamicCallable",
  "dynamicMemberLookup",
  "escaping",
  "freestanding",
  "frozen",
  "GKInspectable",
  "IBAction",
  "IBDesignable",
  "IBInspectable",
  "IBOutlet",
  "IBSegueAction",
  "inlinable",
  "main",
  "nonobjc",
  "NSApplicationMain",
  "NSCopying",
  "NSManaged",
  Le(/objc\(/, _n, /\)/),
  "objc",
  "objcMembers",
  "propertyWrapper",
  "requires_stored_property_inits",
  "resultBuilder",
  "Sendable",
  "testable",
  "UIApplicationMain",
  "unchecked",
  "unknown",
  "usableFromInline",
  "warn_unqualified_access"
], kP = [
  "iOS",
  "iOSApplicationExtension",
  "macOS",
  "macOSApplicationExtension",
  "macCatalyst",
  "macCatalystApplicationExtension",
  "watchOS",
  "watchOSApplicationExtension",
  "tvOS",
  "tvOSApplicationExtension",
  "swift"
];
function SP(n) {
  const e = {
    match: /\s+/,
    relevance: 0
  }, t = n.COMMENT(
    "/\\*",
    "\\*/",
    { contains: ["self"] }
  ), i = [
    n.C_LINE_COMMENT_MODE,
    t
  ], r = {
    match: [
      /\./,
      Tt(...gP, ...jd)
    ],
    className: { 2: "keyword" }
  }, s = {
    // Consume .keyword to prevent highlighting properties and methods as keywords.
    match: Le(/\./, Tt(...Vl)),
    relevance: 0
  }, o = Vl.filter((Re) => typeof Re == "string").concat(["_|0"]), a = Vl.filter((Re) => typeof Re != "string").concat(OP).map($h), l = { variants: [
    {
      className: "keyword",
      match: Tt(...a, ...jd)
    }
  ] }, c = {
    $pattern: Tt(
      /\b\w+/,
      // regular keywords
      /#\w+/
      // number keywords
    ),
    keyword: o.concat(yP),
    literal: Hd
  }, u = [
    r,
    s,
    l
  ], h = {
    // Consume .built_in to prevent highlighting properties and methods.
    match: Le(/\./, Tt(...Kd)),
    relevance: 0
  }, f = {
    className: "built_in",
    match: Le(/\b/, Tt(...Kd), /(?=\()/)
  }, d = [
    h,
    f
  ], p = {
    // Prevent -> from being highlighting as an operator.
    match: /->/,
    relevance: 0
  }, m = {
    className: "operator",
    relevance: 0,
    variants: [
      { match: Yl },
      {
        // dot-operator: only operators that start with a dot are allowed to use dots as
        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
        // characters that may also include dots.
        match: `\\.(\\.|${kb})+`
      }
    ]
  }, O = [
    p,
    m
  ], g = "([0-9]_*)+", y = "([0-9a-fA-F]_*)+", S = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal floating-point-literal (subsumes decimal-literal)
      { match: `\\b(${g})(\\.(${g}))?([eE][+-]?(${g}))?\\b` },
      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
      { match: `\\b0x(${y})(\\.(${y}))?([pP][+-]?(${g}))?\\b` },
      // octal-literal
      { match: /\b0o([0-7]_*)+\b/ },
      // binary-literal
      { match: /\b0b([01]_*)+\b/ }
    ]
  }, _ = (Re = "") => ({
    className: "subst",
    variants: [
      { match: Le(/\\/, Re, /[0\\tnr"']/) },
      { match: Le(/\\/, Re, /u\{[0-9a-fA-F]{1,8}\}/) }
    ]
  }), v = (Re = "") => ({
    className: "subst",
    match: Le(/\\/, Re, /[\t ]*(?:[\r\n]|\r\n)/)
  }), x = (Re = "") => ({
    className: "subst",
    label: "interpol",
    begin: Le(/\\/, Re, /\(/),
    end: /\)/
  }), C = (Re = "") => ({
    begin: Le(Re, /"""/),
    end: Le(/"""/, Re),
    contains: [
      _(Re),
      v(Re),
      x(Re)
    ]
  }), T = (Re = "") => ({
    begin: Le(Re, /"/),
    end: Le(/"/, Re),
    contains: [
      _(Re),
      x(Re)
    ]
  }), A = {
    className: "string",
    variants: [
      C(),
      C("#"),
      C("##"),
      C("###"),
      T(),
      T("#"),
      T("##"),
      T("###")
    ]
  }, Q = [
    n.BACKSLASH_ESCAPE,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [n.BACKSLASH_ESCAPE]
    }
  ], M = {
    begin: /\/[^\s](?=[^/\n]*\/)/,
    end: /\//,
    contains: Q
  }, R = (Re) => {
    const qn = Le(Re, /\//), Vn = Le(/\//, Re);
    return {
      begin: qn,
      end: Vn,
      contains: [
        ...Q,
        {
          scope: "comment",
          begin: `#(?!.*${Vn})`,
          end: /$/
        }
      ]
    };
  }, L = {
    scope: "regexp",
    variants: [
      R("###"),
      R("##"),
      R("#"),
      M
    ]
  }, P = { match: Le(/`/, _n, /`/) }, $ = {
    className: "variable",
    match: /\$\d+/
  }, Y = {
    className: "variable",
    match: `\\$${wa}+`
  }, ie = [
    P,
    $,
    Y
  ], D = {
    match: /(@|#(un)?)available/,
    scope: "keyword",
    starts: { contains: [
      {
        begin: /\(/,
        end: /\)/,
        keywords: kP,
        contains: [
          ...O,
          S,
          A
        ]
      }
    ] }
  }, ee = {
    scope: "keyword",
    match: Le(/@/, Tt(...xP), Kr(Tt(/\(/, /\s+/)))
  }, b = {
    scope: "meta",
    match: Le(/@/, _n)
  }, Z = [
    D,
    ee,
    b
  ], j = {
    match: Kr(/\b[A-Z]/),
    relevance: 0,
    contains: [
      {
        // Common Apple frameworks, for relevance boost
        className: "type",
        match: Le(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, wa, "+")
      },
      {
        // Type identifier
        className: "type",
        match: To,
        relevance: 0
      },
      {
        // Optional type
        match: /[?!]+/,
        relevance: 0
      },
      {
        // Variadic parameter
        match: /\.\.\./,
        relevance: 0
      },
      {
        // Protocol composition
        match: Le(/\s+&\s+/, Kr(To)),
        relevance: 0
      }
    ]
  }, w = {
    begin: /</,
    end: />/,
    keywords: c,
    contains: [
      ...i,
      ...u,
      ...Z,
      p,
      j
    ]
  };
  j.contains.push(w);
  const he = {
    match: Le(_n, /\s*:/),
    keywords: "_|0",
    relevance: 0
  }, ve = {
    begin: /\(/,
    end: /\)/,
    relevance: 0,
    keywords: c,
    contains: [
      "self",
      he,
      ...i,
      L,
      ...u,
      ...d,
      ...O,
      S,
      A,
      ...ie,
      ...Z,
      j
    ]
  }, Ee = {
    begin: /</,
    end: />/,
    keywords: "repeat each",
    contains: [
      ...i,
      j
    ]
  }, _e = {
    begin: Tt(
      Kr(Le(_n, /\s*:/)),
      Kr(Le(_n, /\s+/, _n, /\s*:/))
    ),
    end: /:/,
    relevance: 0,
    contains: [
      {
        className: "keyword",
        match: /\b_\b/
      },
      {
        className: "params",
        match: _n
      }
    ]
  }, Ae = {
    begin: /\(/,
    end: /\)/,
    keywords: c,
    contains: [
      _e,
      ...i,
      ...u,
      ...O,
      S,
      A,
      ...Z,
      j,
      ve
    ],
    endsParent: !0,
    illegal: /["']/
  }, Ke = {
    match: [
      /(func|macro)/,
      /\s+/,
      Tt(P.match, _n, Yl)
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      Ee,
      Ae,
      e
    ],
    illegal: [
      /\[/,
      /%/
    ]
  }, je = {
    match: [
      /\b(?:subscript|init[?!]?)/,
      /\s*(?=[<(])/
    ],
    className: { 1: "keyword" },
    contains: [
      Ee,
      Ae,
      e
    ],
    illegal: /\[|%/
  }, Rt = {
    match: [
      /operator/,
      /\s+/,
      Yl
    ],
    className: {
      1: "keyword",
      3: "title"
    }
  }, xn = {
    begin: [
      /precedencegroup/,
      /\s+/,
      To
    ],
    className: {
      1: "keyword",
      3: "title"
    },
    contains: [j],
    keywords: [
      ...bP,
      ...Hd
    ],
    end: /}/
  }, Zr = {
    match: [
      /class\b/,
      /\s+/,
      /func\b/,
      /\s+/,
      /\b[A-Za-z_][A-Za-z0-9_]*\b/
    ],
    scope: {
      1: "keyword",
      3: "keyword",
      5: "title.function"
    }
  }, Xr = {
    match: [
      /class\b/,
      /\s+/,
      /var\b/
    ],
    scope: {
      1: "keyword",
      3: "keyword"
    }
  }, Yi = {
    begin: [
      /(struct|protocol|class|extension|enum|actor)/,
      /\s+/,
      _n,
      /\s*/
    ],
    beginScope: {
      1: "keyword",
      3: "title.class"
    },
    keywords: c,
    contains: [
      Ee,
      ...u,
      {
        begin: /:/,
        end: /\{/,
        keywords: c,
        contains: [
          {
            scope: "title.class.inherited",
            match: To
          },
          ...u
        ],
        relevance: 0
      }
    ]
  };
  for (const Re of A.variants) {
    const qn = Re.contains.find((Fi) => Fi.label === "interpol");
    qn.keywords = c;
    const Vn = [
      ...u,
      ...d,
      ...O,
      S,
      A,
      ...ie
    ];
    qn.contains = [
      ...Vn,
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          "self",
          ...Vn
        ]
      }
    ];
  }
  return {
    name: "Swift",
    keywords: c,
    contains: [
      ...i,
      Ke,
      je,
      Zr,
      Xr,
      Yi,
      Rt,
      xn,
      {
        beginKeywords: "import",
        end: /$/,
        contains: [...i],
        relevance: 0
      },
      L,
      ...u,
      ...d,
      ...O,
      S,
      A,
      ...ie,
      ...Z,
      j,
      ve
    ]
  };
}
const va = "[A-Za-z$_][0-9A-Za-z$_]*", wb = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends",
  // It's reached stage 3, which is "recommended for implementation":
  "using"
], vb = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], Eb = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], _b = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], Qb = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], Cb = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], Tb = [].concat(
  Qb,
  Eb,
  _b
);
function wP(n) {
  const e = n.regex, t = (D, { after: ee }) => {
    const b = "</" + D[0].slice(1);
    return D.input.indexOf(b, ee) !== -1;
  }, i = va, r = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (D, ee) => {
      const b = D[0].length + D.index, Z = D.input[b];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        Z === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        Z === ","
      ) {
        ee.ignoreMatch();
        return;
      }
      Z === ">" && (t(D, { after: b }) || ee.ignoreMatch());
      let j;
      const w = D.input.substring(b);
      if (j = w.match(/^\s*=/)) {
        ee.ignoreMatch();
        return;
      }
      if ((j = w.match(/^\s+extends\s+/)) && j.index === 0) {
        ee.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: va,
    keyword: wb,
    literal: vb,
    built_in: Tb,
    "variable.language": Cb
  }, l = "[0-9](_?[0-9])*", c = `\\.(${l})`, u = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", h = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${u})((${c})|\\.)?|(${c}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${u})\\b((${c})\\b|\\.)?|(${c})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, d = {
    begin: ".?html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, p = {
    begin: ".?css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, m = {
    begin: ".?gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, O = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      n.BACKSLASH_ESCAPE,
      f
    ]
  }, y = {
    className: "comment",
    variants: [
      n.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: i + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      n.C_BLOCK_COMMENT_MODE,
      n.C_LINE_COMMENT_MODE
    ]
  }, S = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    d,
    p,
    m,
    O,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    h
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = S.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(S)
  });
  const _ = [].concat(y, f.contains), v = _.concat([
    // eat recursive parens in sub expressions
    {
      begin: /(\s*)\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(_)
    }
  ]), x = {
    className: "params",
    // convert this to negative lookbehind in v12
    begin: /(\s*)\(/,
    // to match the parms with
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: v
  }, C = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          i,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(i, "(", e.concat(/\./, i), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          i
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...Eb,
        ..._b
      ]
    }
  }, A = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, Q = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          i,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [x],
    illegal: /%/
  }, M = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function R(D) {
    return e.concat("(?!", D.join("|"), ")");
  }
  const L = {
    match: e.concat(
      /\b/,
      R([
        ...Qb,
        "super",
        "import"
      ].map((D) => `${D}\\s*\\(`)),
      i,
      e.lookahead(/\s*\(/)
    ),
    className: "title.function",
    relevance: 0
  }, P = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(i, /(?![0-9A-Za-z$_(])/)
    )),
    end: i,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, $ = {
    match: [
      /get|set/,
      /\s+/,
      i,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      x
    ]
  }, Y = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + n.UNDERSCORE_IDENT_RE + ")\\s*=>", ie = {
    match: [
      /const|var|let/,
      /\s+/,
      i,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(Y)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      x
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: v, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      n.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      A,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      d,
      p,
      m,
      O,
      y,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      h,
      T,
      {
        scope: "attr",
        match: i + e.lookahead(":"),
        relevance: 0
      },
      ie,
      {
        // "value" container
        begin: "(" + n.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          y,
          n.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: Y,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: n.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /(\s*)\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: v
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: r.begin, end: r.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      Q,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + n.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          x,
          n.inherit(n.TITLE_MODE, { begin: i, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      P,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + i,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [x]
      },
      L,
      M,
      C,
      $,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function tu(n) {
  const e = n.regex, t = wP(n), i = va, r = [
    "any",
    "void",
    "number",
    "boolean",
    "string",
    "object",
    "never",
    "symbol",
    "bigint",
    "unknown"
  ], s = {
    begin: [
      /namespace/,
      /\s+/,
      n.IDENT_RE
    ],
    beginScope: {
      1: "keyword",
      3: "title.class"
    }
  }, o = {
    beginKeywords: "interface",
    end: /\{/,
    excludeEnd: !0,
    keywords: {
      keyword: "interface extends",
      built_in: r
    },
    contains: [t.exports.CLASS_REFERENCE]
  }, a = {
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use strict['"]/
  }, l = [
    "type",
    // "namespace",
    "interface",
    "public",
    "private",
    "protected",
    "implements",
    "declare",
    "abstract",
    "readonly",
    "enum",
    "override",
    "satisfies"
  ], c = {
    $pattern: va,
    keyword: wb.concat(l),
    literal: vb,
    built_in: Tb.concat(r),
    "variable.language": Cb
  }, u = {
    className: "meta",
    begin: "@" + i
  }, h = (m, O, g) => {
    const y = m.contains.findIndex((S) => S.label === O);
    if (y === -1)
      throw new Error("can not find mode to replace");
    m.contains.splice(y, 1, g);
  };
  Object.assign(t.keywords, c), t.exports.PARAMS_CONTAINS.push(u);
  const f = t.contains.find((m) => m.scope === "attr"), d = Object.assign(
    {},
    f,
    { match: e.concat(i, e.lookahead(/\s*\?:/)) }
  );
  t.exports.PARAMS_CONTAINS.push([
    t.exports.CLASS_REFERENCE,
    // class reference for highlighting the params types
    f,
    // highlight the params key
    d
    // Added for optional property assignment highlighting
  ]), t.contains = t.contains.concat([
    u,
    s,
    o,
    d
    // Added for optional property assignment highlighting
  ]), h(t, "shebang", n.SHEBANG()), h(t, "use_strict", a);
  const p = t.contains.find((m) => m.label === "func.def");
  return p.relevance = 0, Object.assign(t, {
    name: "TypeScript",
    aliases: [
      "ts",
      "tsx",
      "mts",
      "cts"
    ]
  }), t;
}
function vP(n) {
  const e = n.regex, t = {
    className: "string",
    begin: /"(""|[^/n])"C\b/
  }, i = {
    className: "string",
    begin: /"/,
    end: /"/,
    illegal: /\n/,
    contains: [
      {
        // double quote escape
        begin: /""/
      }
    ]
  }, r = /\d{1,2}\/\d{1,2}\/\d{4}/, s = /\d{4}-\d{1,2}-\d{1,2}/, o = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, a = /\d{1,2}(:\d{1,2}){1,2}/, l = {
    className: "literal",
    variants: [
      {
        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
        begin: e.concat(/# */, e.either(s, r), / *#/)
      },
      {
        // #H:mm[:ss]# (24h Time)
        begin: e.concat(/# */, a, / *#/)
      },
      {
        // #h[:mm[:ss]] A# (12h Time)
        begin: e.concat(/# */, o, / *#/)
      },
      {
        // date plus time
        begin: e.concat(
          /# */,
          e.either(s, r),
          / +/,
          e.either(o, a),
          / *#/
        )
      }
    ]
  }, c = {
    className: "number",
    relevance: 0,
    variants: [
      {
        // Float
        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
      },
      {
        // Integer (base 10)
        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 16)
        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 8)
        begin: /&O[0-7_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 2)
        begin: /&B[01_]+((U?[SIL])|[%&])?/
      }
    ]
  }, u = {
    className: "label",
    begin: /^\w+:/
  }, h = n.COMMENT(/'''/, /$/, { contains: [
    {
      className: "doctag",
      begin: /<\/?/,
      end: />/
    }
  ] }), f = n.COMMENT(null, /$/, { variants: [
    { begin: /'/ },
    {
      // TODO: Use multi-class for leading spaces
      begin: /([\t ]|^)REM(?=\s)/
    }
  ] });
  return {
    name: "Visual Basic .NET",
    aliases: ["vb"],
    case_insensitive: !0,
    classNameAliases: { label: "symbol" },
    keywords: {
      keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
      built_in: (
        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
        "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
      ),
      type: (
        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
        "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
      ),
      literal: "true false nothing"
    },
    illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
    contains: [
      t,
      i,
      l,
      c,
      u,
      h,
      f,
      {
        className: "meta",
        // TODO: Use multi-class for indentation once available
        begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
        end: /$/,
        keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
        contains: [f]
      }
    ]
  };
}
function EP(n) {
  n.regex;
  const e = n.COMMENT(/\(;/, /;\)/);
  e.contains.push("self");
  const t = n.COMMENT(/;;/, /$/), i = [
    "anyfunc",
    "block",
    "br",
    "br_if",
    "br_table",
    "call",
    "call_indirect",
    "data",
    "drop",
    "elem",
    "else",
    "end",
    "export",
    "func",
    "global.get",
    "global.set",
    "local.get",
    "local.set",
    "local.tee",
    "get_global",
    "get_local",
    "global",
    "if",
    "import",
    "local",
    "loop",
    "memory",
    "memory.grow",
    "memory.size",
    "module",
    "mut",
    "nop",
    "offset",
    "param",
    "result",
    "return",
    "select",
    "set_global",
    "set_local",
    "start",
    "table",
    "tee_local",
    "then",
    "type",
    "unreachable"
  ], r = {
    begin: [
      /(?:func|call|call_indirect)/,
      /\s+/,
      /\$[^\s)]+/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    }
  }, s = {
    className: "variable",
    begin: /\$[\w_]+/
  }, o = {
    match: /(\((?!;)|\))+/,
    className: "punctuation",
    relevance: 0
  }, a = {
    className: "number",
    relevance: 0,
    // borrowed from Prism, TODO: split out into variants
    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
  }, l = {
    // look-ahead prevents us from gobbling up opcodes
    match: /(i32|i64|f32|f64)(?!\.)/,
    className: "type"
  }, c = {
    className: "keyword",
    // borrowed from Prism, TODO: split out into variants
    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
  };
  return {
    name: "WebAssembly",
    keywords: {
      $pattern: /[\w.]+/,
      keyword: i
    },
    contains: [
      t,
      e,
      {
        match: [
          /(?:offset|align)/,
          /\s*/,
          /=/
        ],
        className: {
          1: "keyword",
          3: "operator"
        }
      },
      s,
      o,
      r,
      n.QUOTE_STRING_MODE,
      l,
      c,
      a
    ]
  };
}
function Pb(n) {
  const e = n.regex, t = e.concat(/[\p{L}_]/u, e.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), i = /[\p{L}0-9._:-]+/u, r = {
    className: "symbol",
    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  }, s = {
    begin: /\s/,
    contains: [
      {
        className: "keyword",
        begin: /#?[a-z_][a-z1-9_-]+/,
        illegal: /\n/
      }
    ]
  }, o = n.inherit(s, {
    begin: /\(/,
    end: /\)/
  }), a = n.inherit(n.APOS_STRING_MODE, { className: "string" }), l = n.inherit(n.QUOTE_STRING_MODE, { className: "string" }), c = {
    endsWithParent: !0,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: i,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: "string",
            endsParent: !0,
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [r]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [r]
              },
              { begin: /[^\s"'=<>`]+/ }
            ]
          }
        ]
      }
    ]
  };
  return {
    name: "HTML, XML",
    aliases: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ],
    case_insensitive: !0,
    unicodeRegex: !0,
    contains: [
      {
        className: "meta",
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          s,
          l,
          a,
          o,
          {
            begin: /\[/,
            end: /\]/,
            contains: [
              {
                className: "meta",
                begin: /<![a-z]/,
                end: />/,
                contains: [
                  s,
                  o,
                  l,
                  a
                ]
              }
            ]
          }
        ]
      },
      n.COMMENT(
        /<!--/,
        /-->/,
        { relevance: 10 }
      ),
      {
        begin: /<!\[CDATA\[/,
        end: /\]\]>/,
        relevance: 10
      },
      r,
      // xml processing instructions
      {
        className: "meta",
        end: /\?>/,
        variants: [
          {
            begin: /<\?xml/,
            relevance: 10,
            contains: [
              l
            ]
          },
          {
            begin: /<\?[a-z][a-z0-9]+/
          }
        ]
      },
      {
        className: "tag",
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending bracket.
        */
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: { name: "style" },
        contains: [c],
        starts: {
          end: /<\/style>/,
          returnEnd: !0,
          subLanguage: [
            "css",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        // See the comment in the <style tag about the lookahead pattern
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: { name: "script" },
        contains: [c],
        starts: {
          end: /<\/script>/,
          returnEnd: !0,
          subLanguage: [
            "javascript",
            "handlebars",
            "xml"
          ]
        }
      },
      // we need this for now for jSX
      {
        className: "tag",
        begin: /<>|<\/>/
      },
      // open tag
      {
        className: "tag",
        begin: e.concat(
          /</,
          e.lookahead(e.concat(
            t,
            // <tag/>
            // <tag>
            // <tag ...
            e.either(/\/>/, />/, /\s/)
          ))
        ),
        end: /\/?>/,
        contains: [
          {
            className: "name",
            begin: t,
            relevance: 0,
            starts: c
          }
        ]
      },
      // close tag
      {
        className: "tag",
        begin: e.concat(
          /<\//,
          e.lookahead(e.concat(
            t,
            />/
          ))
        ),
        contains: [
          {
            className: "name",
            begin: t,
            relevance: 0
          },
          {
            begin: />/,
            relevance: 0,
            endsParent: !0
          }
        ]
      }
    ]
  };
}
function _P(n) {
  const e = "true false yes no null", t = "[\\w#;/?:@&=+$,.~*'()[\\]]+", i = {
    className: "attr",
    variants: [
      // added brackets support and special char support
      { begin: /[\w*@][\w*@ :()\./-]*:(?=[ \t]|$)/ },
      {
        // double quoted keys - with brackets and special char support
        begin: /"[\w*@][\w*@ :()\./-]*":(?=[ \t]|$)/
      },
      {
        // single quoted keys - with brackets and special char support
        begin: /'[\w*@][\w*@ :()\./-]*':(?=[ \t]|$)/
      }
    ]
  }, r = {
    className: "template-variable",
    variants: [
      {
        // jinja templates Ansible
        begin: /\{\{/,
        end: /\}\}/
      },
      {
        // Ruby i18n
        begin: /%\{/,
        end: /\}/
      }
    ]
  }, s = {
    className: "string",
    relevance: 0,
    begin: /'/,
    end: /'/,
    contains: [
      {
        match: /''/,
        scope: "char.escape",
        relevance: 0
      }
    ]
  }, o = {
    className: "string",
    relevance: 0,
    variants: [
      {
        begin: /"/,
        end: /"/
      },
      { begin: /\S+/ }
    ],
    contains: [
      n.BACKSLASH_ESCAPE,
      r
    ]
  }, a = n.inherit(o, { variants: [
    {
      begin: /'/,
      end: /'/,
      contains: [
        {
          begin: /''/,
          relevance: 0
        }
      ]
    },
    {
      begin: /"/,
      end: /"/
    },
    { begin: /[^\s,{}[\]]+/ }
  ] }), f = {
    className: "number",
    begin: "\\b" + "[0-9]{4}(-[0-9][0-9]){0,2}" + "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?" + "(\\.[0-9]*)?" + "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?" + "\\b"
  }, d = {
    end: ",",
    endsWithParent: !0,
    excludeEnd: !0,
    keywords: e,
    relevance: 0
  }, p = {
    begin: /\{/,
    end: /\}/,
    contains: [d],
    illegal: "\\n",
    relevance: 0
  }, m = {
    begin: "\\[",
    end: "\\]",
    contains: [d],
    illegal: "\\n",
    relevance: 0
  }, O = [
    i,
    {
      className: "meta",
      begin: "^---\\s*$",
      relevance: 10
    },
    {
      // multi line string
      // Blocks start with a | or > followed by a newline
      //
      // Indentation of subsequent lines must be the same to
      // be considered part of the block
      className: "string",
      begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
    },
    {
      // Ruby/Rails erb
      begin: "<%[%=-]?",
      end: "[%-]?%>",
      subLanguage: "ruby",
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0
    },
    {
      // named tags
      className: "type",
      begin: "!\\w+!" + t
    },
    // https://yaml.org/spec/1.2/spec.html#id2784064
    {
      // verbatim tags
      className: "type",
      begin: "!<" + t + ">"
    },
    {
      // primary tags
      className: "type",
      begin: "!" + t
    },
    {
      // secondary tags
      className: "type",
      begin: "!!" + t
    },
    {
      // fragment id &ref
      className: "meta",
      begin: "&" + n.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // fragment reference *ref
      className: "meta",
      begin: "\\*" + n.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // array listing
      className: "bullet",
      // TODO: remove |$ hack when we have proper look-ahead support
      begin: "-(?=[ ]|$)",
      relevance: 0
    },
    n.HASH_COMMENT_MODE,
    {
      beginKeywords: e,
      keywords: { literal: e }
    },
    f,
    // numbers are any valid C-style number that
    // sit isolated from other words
    {
      className: "number",
      begin: n.C_NUMBER_RE + "\\b",
      relevance: 0
    },
    p,
    m,
    s,
    o
  ], g = [...O];
  return g.pop(), g.push(a), d.contains = g, {
    name: "YAML",
    case_insensitive: !0,
    aliases: ["yml"],
    contains: O
  };
}
const QP = {
  arduino: bT,
  bash: Hc,
  c: yT,
  cpp: xT,
  csharp: kT,
  css: cb,
  diff: PT,
  go: AT,
  graphql: $T,
  ini: RT,
  java: hb,
  javascript: Kc,
  json: mb,
  kotlin: BT,
  less: UT,
  lua: GT,
  makefile: WT,
  markdown: Jc,
  objectivec: jT,
  perl: HT,
  php: KT,
  "php-template": JT,
  plaintext: eP,
  python: eu,
  "python-repl": tP,
  r: nP,
  ruby: iP,
  rust: rP,
  scss: dP,
  shell: pP,
  sql: bb,
  swift: SP,
  typescript: tu,
  vbnet: vP,
  wasm: EP,
  xml: Pb,
  yaml: _P
};
var Fl, Jd;
function CP() {
  if (Jd) return Fl;
  Jd = 1;
  function n(E) {
    return E instanceof Map ? E.clear = E.delete = E.set = function() {
      throw new Error("map is read-only");
    } : E instanceof Set && (E.add = E.clear = E.delete = function() {
      throw new Error("set is read-only");
    }), Object.freeze(E), Object.getOwnPropertyNames(E).forEach((B) => {
      const G = E[B], ge = typeof G;
      (ge === "object" || ge === "function") && !Object.isFrozen(G) && n(G);
    }), E;
  }
  class e {
    /**
     * @param {CompiledMode} mode
     */
    constructor(B) {
      B.data === void 0 && (B.data = {}), this.data = B.data, this.isMatchIgnored = !1;
    }
    ignoreMatch() {
      this.isMatchIgnored = !0;
    }
  }
  function t(E) {
    return E.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
  }
  function i(E, ...B) {
    const G = /* @__PURE__ */ Object.create(null);
    for (const ge in E)
      G[ge] = E[ge];
    return B.forEach(function(ge) {
      for (const Je in ge)
        G[Je] = ge[Je];
    }), /** @type {T} */
    G;
  }
  const r = "</span>", s = (E) => !!E.scope, o = (E, { prefix: B }) => {
    if (E.startsWith("language:"))
      return E.replace("language:", "language-");
    if (E.includes(".")) {
      const G = E.split(".");
      return [
        `${B}${G.shift()}`,
        ...G.map((ge, Je) => `${ge}${"_".repeat(Je + 1)}`)
      ].join(" ");
    }
    return `${B}${E}`;
  };
  class a {
    /**
     * Creates a new HTMLRenderer
     *
     * @param {Tree} parseTree - the parse tree (must support `walk` API)
     * @param {{classPrefix: string}} options
     */
    constructor(B, G) {
      this.buffer = "", this.classPrefix = G.classPrefix, B.walk(this);
    }
    /**
     * Adds texts to the output stream
     *
     * @param {string} text */
    addText(B) {
      this.buffer += t(B);
    }
    /**
     * Adds a node open to the output stream (if needed)
     *
     * @param {Node} node */
    openNode(B) {
      if (!s(B)) return;
      const G = o(
        B.scope,
        { prefix: this.classPrefix }
      );
      this.span(G);
    }
    /**
     * Adds a node close to the output stream (if needed)
     *
     * @param {Node} node */
    closeNode(B) {
      s(B) && (this.buffer += r);
    }
    /**
     * returns the accumulated buffer
    */
    value() {
      return this.buffer;
    }
    // helpers
    /**
     * Builds a span element
     *
     * @param {string} className */
    span(B) {
      this.buffer += `<span class="${B}">`;
    }
  }
  const l = (E = {}) => {
    const B = { children: [] };
    return Object.assign(B, E), B;
  };
  class c {
    constructor() {
      this.rootNode = l(), this.stack = [this.rootNode];
    }
    get top() {
      return this.stack[this.stack.length - 1];
    }
    get root() {
      return this.rootNode;
    }
    /** @param {Node} node */
    add(B) {
      this.top.children.push(B);
    }
    /** @param {string} scope */
    openNode(B) {
      const G = l({ scope: B });
      this.add(G), this.stack.push(G);
    }
    closeNode() {
      if (this.stack.length > 1)
        return this.stack.pop();
    }
    closeAllNodes() {
      for (; this.closeNode(); ) ;
    }
    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }
    /**
     * @typedef { import("./html_renderer").Renderer } Renderer
     * @param {Renderer} builder
     */
    walk(B) {
      return this.constructor._walk(B, this.rootNode);
    }
    /**
     * @param {Renderer} builder
     * @param {Node} node
     */
    static _walk(B, G) {
      return typeof G == "string" ? B.addText(G) : G.children && (B.openNode(G), G.children.forEach((ge) => this._walk(B, ge)), B.closeNode(G)), B;
    }
    /**
     * @param {Node} node
     */
    static _collapse(B) {
      typeof B != "string" && B.children && (B.children.every((G) => typeof G == "string") ? B.children = [B.children.join("")] : B.children.forEach((G) => {
        c._collapse(G);
      }));
    }
  }
  class u extends c {
    /**
     * @param {*} options
     */
    constructor(B) {
      super(), this.options = B;
    }
    /**
     * @param {string} text
     */
    addText(B) {
      B !== "" && this.add(B);
    }
    /** @param {string} scope */
    startScope(B) {
      this.openNode(B);
    }
    endScope() {
      this.closeNode();
    }
    /**
     * @param {Emitter & {root: DataNode}} emitter
     * @param {string} name
     */
    __addSublanguage(B, G) {
      const ge = B.root;
      G && (ge.scope = `language:${G}`), this.add(ge);
    }
    toHTML() {
      return new a(this, this.options).value();
    }
    finalize() {
      return this.closeAllNodes(), !0;
    }
  }
  function h(E) {
    return E ? typeof E == "string" ? E : E.source : null;
  }
  function f(E) {
    return m("(?=", E, ")");
  }
  function d(E) {
    return m("(?:", E, ")*");
  }
  function p(E) {
    return m("(?:", E, ")?");
  }
  function m(...E) {
    return E.map((G) => h(G)).join("");
  }
  function O(E) {
    const B = E[E.length - 1];
    return typeof B == "object" && B.constructor === Object ? (E.splice(E.length - 1, 1), B) : {};
  }
  function g(...E) {
    return "(" + (O(E).capture ? "" : "?:") + E.map((ge) => h(ge)).join("|") + ")";
  }
  function y(E) {
    return new RegExp(E.toString() + "|").exec("").length - 1;
  }
  function S(E, B) {
    const G = E && E.exec(B);
    return G && G.index === 0;
  }
  const _ = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
  function v(E, { joinWith: B }) {
    let G = 0;
    return E.map((ge) => {
      G += 1;
      const Je = G;
      let et = h(ge), re = "";
      for (; et.length > 0; ) {
        const J = _.exec(et);
        if (!J) {
          re += et;
          break;
        }
        re += et.substring(0, J.index), et = et.substring(J.index + J[0].length), J[0][0] === "\\" && J[1] ? re += "\\" + String(Number(J[1]) + Je) : (re += J[0], J[0] === "(" && G++);
      }
      return re;
    }).map((ge) => `(${ge})`).join(B);
  }
  const x = /\b\B/, C = "[a-zA-Z]\\w*", T = "[a-zA-Z_]\\w*", A = "\\b\\d+(\\.\\d+)?", Q = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", M = "\\b(0b[01]+)", R = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", L = (E = {}) => {
    const B = /^#![ ]*\//;
    return E.binary && (E.begin = m(
      B,
      /.*\b/,
      E.binary,
      /\b.*/
    )), i({
      scope: "meta",
      begin: B,
      end: /$/,
      relevance: 0,
      /** @type {ModeCallback} */
      "on:begin": (G, ge) => {
        G.index !== 0 && ge.ignoreMatch();
      }
    }, E);
  }, P = {
    begin: "\\\\[\\s\\S]",
    relevance: 0
  }, $ = {
    scope: "string",
    begin: "'",
    end: "'",
    illegal: "\\n",
    contains: [P]
  }, Y = {
    scope: "string",
    begin: '"',
    end: '"',
    illegal: "\\n",
    contains: [P]
  }, ie = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  }, D = function(E, B, G = {}) {
    const ge = i(
      {
        scope: "comment",
        begin: E,
        end: B,
        contains: []
      },
      G
    );
    ge.contains.push({
      scope: "doctag",
      // hack to avoid the space from being included. the space is necessary to
      // match here to prevent the plain text rule below from gobbling up doctags
      begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: !0,
      relevance: 0
    });
    const Je = g(
      // list of common 1 and 2 letter words in English
      "I",
      "a",
      "is",
      "so",
      "us",
      "to",
      "at",
      "if",
      "in",
      "it",
      "on",
      // note: this is not an exhaustive list of contractions, just popular ones
      /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
      // contractions - can't we'd they're let's, etc
      /[A-Za-z]+[-][a-z]+/,
      // `no-way`, etc.
      /[A-Za-z][a-z]{2,}/
      // allow capitalized words at beginning of sentences
    );
    return ge.contains.push(
      {
        // TODO: how to include ", (, ) without breaking grammars that use these for
        // comment delimiters?
        // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
        // ---
        // this tries to find sequences of 3 english words in a row (without any
        // "programming" type syntax) this gives us a strong signal that we've
        // TRULY found a comment - vs perhaps scanning with the wrong language.
        // It's possible to find something that LOOKS like the start of the
        // comment - but then if there is no readable text - good chance it is a
        // false match and not a comment.
        //
        // for a visual example please see:
        // https://github.com/highlightjs/highlight.js/issues/2827
        begin: m(
          /[ ]+/,
          // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
          "(",
          Je,
          /[.]?[:]?([.][ ]|[ ])/,
          "){3}"
        )
        // look for 3 words in a row
      }
    ), ge;
  }, ee = D("//", "$"), b = D("/\\*", "\\*/"), Z = D("#", "$"), j = {
    scope: "number",
    begin: A,
    relevance: 0
  }, w = {
    scope: "number",
    begin: Q,
    relevance: 0
  }, he = {
    scope: "number",
    begin: M,
    relevance: 0
  }, ve = {
    scope: "regexp",
    begin: /\/(?=[^/\n]*\/)/,
    end: /\/[gimuy]*/,
    contains: [
      P,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [P]
      }
    ]
  }, Ee = {
    scope: "title",
    begin: C,
    relevance: 0
  }, _e = {
    scope: "title",
    begin: T,
    relevance: 0
  }, Ae = {
    // excludes method names from keyword processing
    begin: "\\.\\s*" + T,
    relevance: 0
  };
  var je = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    APOS_STRING_MODE: $,
    BACKSLASH_ESCAPE: P,
    BINARY_NUMBER_MODE: he,
    BINARY_NUMBER_RE: M,
    COMMENT: D,
    C_BLOCK_COMMENT_MODE: b,
    C_LINE_COMMENT_MODE: ee,
    C_NUMBER_MODE: w,
    C_NUMBER_RE: Q,
    END_SAME_AS_BEGIN: function(E) {
      return Object.assign(
        E,
        {
          /** @type {ModeCallback} */
          "on:begin": (B, G) => {
            G.data._beginMatch = B[1];
          },
          /** @type {ModeCallback} */
          "on:end": (B, G) => {
            G.data._beginMatch !== B[1] && G.ignoreMatch();
          }
        }
      );
    },
    HASH_COMMENT_MODE: Z,
    IDENT_RE: C,
    MATCH_NOTHING_RE: x,
    METHOD_GUARD: Ae,
    NUMBER_MODE: j,
    NUMBER_RE: A,
    PHRASAL_WORDS_MODE: ie,
    QUOTE_STRING_MODE: Y,
    REGEXP_MODE: ve,
    RE_STARTERS_RE: R,
    SHEBANG: L,
    TITLE_MODE: Ee,
    UNDERSCORE_IDENT_RE: T,
    UNDERSCORE_TITLE_MODE: _e
  });
  function Rt(E, B) {
    E.input[E.index - 1] === "." && B.ignoreMatch();
  }
  function xn(E, B) {
    E.className !== void 0 && (E.scope = E.className, delete E.className);
  }
  function Zr(E, B) {
    B && E.beginKeywords && (E.begin = "\\b(" + E.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", E.__beforeBegin = Rt, E.keywords = E.keywords || E.beginKeywords, delete E.beginKeywords, E.relevance === void 0 && (E.relevance = 0));
  }
  function Xr(E, B) {
    Array.isArray(E.illegal) && (E.illegal = g(...E.illegal));
  }
  function Yi(E, B) {
    if (E.match) {
      if (E.begin || E.end) throw new Error("begin & end are not supported with match");
      E.begin = E.match, delete E.match;
    }
  }
  function Re(E, B) {
    E.relevance === void 0 && (E.relevance = 1);
  }
  const qn = (E, B) => {
    if (!E.beforeMatch) return;
    if (E.starts) throw new Error("beforeMatch cannot be used with starts");
    const G = Object.assign({}, E);
    Object.keys(E).forEach((ge) => {
      delete E[ge];
    }), E.keywords = G.keywords, E.begin = m(G.beforeMatch, f(G.begin)), E.starts = {
      relevance: 0,
      contains: [
        Object.assign(G, { endsParent: !0 })
      ]
    }, E.relevance = 0, delete G.beforeMatch;
  }, Vn = [
    "of",
    "and",
    "for",
    "in",
    "not",
    "or",
    "if",
    "then",
    "parent",
    // common variable name
    "list",
    // common variable name
    "value"
    // common variable name
  ], Fi = "keyword";
  function qr(E, B, G = Fi) {
    const ge = /* @__PURE__ */ Object.create(null);
    return typeof E == "string" ? Je(G, E.split(" ")) : Array.isArray(E) ? Je(G, E) : Object.keys(E).forEach(function(et) {
      Object.assign(
        ge,
        qr(E[et], B, et)
      );
    }), ge;
    function Je(et, re) {
      B && (re = re.map((J) => J.toLowerCase())), re.forEach(function(J) {
        const de = J.split("|");
        ge[de[0]] = [et, Ol(de[0], de[1])];
      });
    }
  }
  function Ol(E, B) {
    return B ? Number(B) : bl(E) ? 0 : 1;
  }
  function bl(E) {
    return Vn.includes(E.toLowerCase());
  }
  const uo = {}, Yn = (E) => {
    console.error(E);
  }, ho = (E, ...B) => {
    console.log(`WARN: ${E}`, ...B);
  }, N = (E, B) => {
    uo[`${E}/${B}`] || (console.log(`Deprecated as of ${E}. ${B}`), uo[`${E}/${B}`] = !0);
  }, V = new Error();
  function fe(E, B, { key: G }) {
    let ge = 0;
    const Je = E[G], et = {}, re = {};
    for (let J = 1; J <= B.length; J++)
      re[J + ge] = Je[J], et[J + ge] = !0, ge += y(B[J - 1]);
    E[G] = re, E[G]._emit = et, E[G]._multi = !0;
  }
  function ke(E) {
    if (Array.isArray(E.begin)) {
      if (E.skip || E.excludeBegin || E.returnBegin)
        throw Yn("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), V;
      if (typeof E.beginScope != "object" || E.beginScope === null)
        throw Yn("beginScope must be object"), V;
      fe(E, E.begin, { key: "beginScope" }), E.begin = v(E.begin, { joinWith: "" });
    }
  }
  function Ne(E) {
    if (Array.isArray(E.end)) {
      if (E.skip || E.excludeEnd || E.returnEnd)
        throw Yn("skip, excludeEnd, returnEnd not compatible with endScope: {}"), V;
      if (typeof E.endScope != "object" || E.endScope === null)
        throw Yn("endScope must be object"), V;
      fe(E, E.end, { key: "endScope" }), E.end = v(E.end, { joinWith: "" });
    }
  }
  function qt(E) {
    E.scope && typeof E.scope == "object" && E.scope !== null && (E.beginScope = E.scope, delete E.scope);
  }
  function Fn(E) {
    qt(E), typeof E.beginScope == "string" && (E.beginScope = { _wrap: E.beginScope }), typeof E.endScope == "string" && (E.endScope = { _wrap: E.endScope }), ke(E), Ne(E);
  }
  function dn(E) {
    function B(re, J) {
      return new RegExp(
        h(re),
        "m" + (E.case_insensitive ? "i" : "") + (E.unicodeRegex ? "u" : "") + (J ? "g" : "")
      );
    }
    class G {
      constructor() {
        this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
      }
      // @ts-ignore
      addRule(J, de) {
        de.position = this.position++, this.matchIndexes[this.matchAt] = de, this.regexes.push([de, J]), this.matchAt += y(J) + 1;
      }
      compile() {
        this.regexes.length === 0 && (this.exec = () => null);
        const J = this.regexes.map((de) => de[1]);
        this.matcherRe = B(v(J, { joinWith: "|" }), !0), this.lastIndex = 0;
      }
      /** @param {string} s */
      exec(J) {
        this.matcherRe.lastIndex = this.lastIndex;
        const de = this.matcherRe.exec(J);
        if (!de)
          return null;
        const ht = de.findIndex((Vr, yl) => yl > 0 && Vr !== void 0), it = this.matchIndexes[ht];
        return de.splice(0, ht), Object.assign(de, it);
      }
    }
    class ge {
      constructor() {
        this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
      }
      // @ts-ignore
      getMatcher(J) {
        if (this.multiRegexes[J]) return this.multiRegexes[J];
        const de = new G();
        return this.rules.slice(J).forEach(([ht, it]) => de.addRule(ht, it)), de.compile(), this.multiRegexes[J] = de, de;
      }
      resumingScanAtSamePosition() {
        return this.regexIndex !== 0;
      }
      considerAll() {
        this.regexIndex = 0;
      }
      // @ts-ignore
      addRule(J, de) {
        this.rules.push([J, de]), de.type === "begin" && this.count++;
      }
      /** @param {string} s */
      exec(J) {
        const de = this.getMatcher(this.regexIndex);
        de.lastIndex = this.lastIndex;
        let ht = de.exec(J);
        if (this.resumingScanAtSamePosition() && !(ht && ht.index === this.lastIndex)) {
          const it = this.getMatcher(0);
          it.lastIndex = this.lastIndex + 1, ht = it.exec(J);
        }
        return ht && (this.regexIndex += ht.position + 1, this.regexIndex === this.count && this.considerAll()), ht;
      }
    }
    function Je(re) {
      const J = new ge();
      return re.contains.forEach((de) => J.addRule(de.begin, { rule: de, type: "begin" })), re.terminatorEnd && J.addRule(re.terminatorEnd, { type: "end" }), re.illegal && J.addRule(re.illegal, { type: "illegal" }), J;
    }
    function et(re, J) {
      const de = (
        /** @type CompiledMode */
        re
      );
      if (re.isCompiled) return de;
      [
        xn,
        // do this early so compiler extensions generally don't have to worry about
        // the distinction between match/begin
        Yi,
        Fn,
        qn
      ].forEach((it) => it(re, J)), E.compilerExtensions.forEach((it) => it(re, J)), re.__beforeBegin = null, [
        Zr,
        // do this later so compiler extensions that come earlier have access to the
        // raw array if they wanted to perhaps manipulate it, etc.
        Xr,
        // default to 1 relevance if not specified
        Re
      ].forEach((it) => it(re, J)), re.isCompiled = !0;
      let ht = null;
      return typeof re.keywords == "object" && re.keywords.$pattern && (re.keywords = Object.assign({}, re.keywords), ht = re.keywords.$pattern, delete re.keywords.$pattern), ht = ht || /\w+/, re.keywords && (re.keywords = qr(re.keywords, E.case_insensitive)), de.keywordPatternRe = B(ht, !0), J && (re.begin || (re.begin = /\B|\b/), de.beginRe = B(de.begin), !re.end && !re.endsWithParent && (re.end = /\B|\b/), re.end && (de.endRe = B(de.end)), de.terminatorEnd = h(de.end) || "", re.endsWithParent && J.terminatorEnd && (de.terminatorEnd += (re.end ? "|" : "") + J.terminatorEnd)), re.illegal && (de.illegalRe = B(
        /** @type {RegExp | string} */
        re.illegal
      )), re.contains || (re.contains = []), re.contains = [].concat(...re.contains.map(function(it) {
        return Ei(it === "self" ? re : it);
      })), re.contains.forEach(function(it) {
        et(
          /** @type Mode */
          it,
          de
        );
      }), re.starts && et(re.starts, J), de.matcher = Je(de), de;
    }
    if (E.compilerExtensions || (E.compilerExtensions = []), E.contains && E.contains.includes("self"))
      throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
    return E.classNameAliases = i(E.classNameAliases || {}), et(
      /** @type Mode */
      E
    );
  }
  function si(E) {
    return E ? E.endsWithParent || si(E.starts) : !1;
  }
  function Ei(E) {
    return E.variants && !E.cachedVariants && (E.cachedVariants = E.variants.map(function(B) {
      return i(E, { variants: null }, B);
    })), E.cachedVariants ? E.cachedVariants : si(E) ? i(E, { starts: E.starts ? i(E.starts) : null }) : Object.isFrozen(E) ? i(E) : E;
  }
  var Ct = "11.11.1";
  class oi extends Error {
    constructor(B, G) {
      super(B), this.name = "HTMLInjectionError", this.html = G;
    }
  }
  const Vt = t, Tf = i, Pf = Symbol("nomatch"), qk = 7, Af = function(E) {
    const B = /* @__PURE__ */ Object.create(null), G = /* @__PURE__ */ Object.create(null), ge = [];
    let Je = !0;
    const et = "Could not find the language '{}', did you forget to load/include a language module?", re = { disableAutodetect: !0, name: "Plain text", contains: [] };
    let J = {
      ignoreUnescapedHTML: !1,
      throwUnescapedHTML: !1,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: "hljs-",
      cssSelector: "pre code",
      languages: null,
      // beta configuration options, subject to change, welcome to discuss
      // https://github.com/highlightjs/highlight.js/issues/1086
      __emitter: u
    };
    function de(q) {
      return J.noHighlightRe.test(q);
    }
    function ht(q) {
      let le = q.className + " ";
      le += q.parentNode ? q.parentNode.className : "";
      const Qe = J.languageDetectRe.exec(le);
      if (Qe) {
        const Xe = ai(Qe[1]);
        return Xe || (ho(et.replace("{}", Qe[1])), ho("Falling back to no-highlight mode for this block.", q)), Xe ? Qe[1] : "no-highlight";
      }
      return le.split(/\s+/).find((Xe) => de(Xe) || ai(Xe));
    }
    function it(q, le, Qe) {
      let Xe = "", at = "";
      typeof le == "object" ? (Xe = q, Qe = le.ignoreIllegals, at = le.language) : (N("10.7.0", "highlight(lang, code, ...args) has been deprecated."), N("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), at = q, Xe = le), Qe === void 0 && (Qe = !0);
      const pn = {
        code: Xe,
        language: at
      };
      po("before:highlight", pn);
      const li = pn.result ? pn.result : Vr(pn.language, pn.code, Qe);
      return li.code = pn.code, po("after:highlight", li), li;
    }
    function Vr(q, le, Qe, Xe) {
      const at = /* @__PURE__ */ Object.create(null);
      function pn(W, oe) {
        return W.keywords[oe];
      }
      function li() {
        if (!Oe.keywords) {
          gt.addText(qe);
          return;
        }
        let W = 0;
        Oe.keywordPatternRe.lastIndex = 0;
        let oe = Oe.keywordPatternRe.exec(qe), ye = "";
        for (; oe; ) {
          ye += qe.substring(W, oe.index);
          const Ie = Sn.case_insensitive ? oe[0].toLowerCase() : oe[0], kt = pn(Oe, Ie);
          if (kt) {
            const [Un, oS] = kt;
            if (gt.addText(ye), ye = "", at[Ie] = (at[Ie] || 0) + 1, at[Ie] <= qk && (Oo += oS), Un.startsWith("_"))
              ye += oe[0];
            else {
              const aS = Sn.classNameAliases[Un] || Un;
              kn(oe[0], aS);
            }
          } else
            ye += oe[0];
          W = Oe.keywordPatternRe.lastIndex, oe = Oe.keywordPatternRe.exec(qe);
        }
        ye += qe.substring(W), gt.addText(ye);
      }
      function mo() {
        if (qe === "") return;
        let W = null;
        if (typeof Oe.subLanguage == "string") {
          if (!B[Oe.subLanguage]) {
            gt.addText(qe);
            return;
          }
          W = Vr(Oe.subLanguage, qe, !0, Bf[Oe.subLanguage]), Bf[Oe.subLanguage] = /** @type {CompiledMode} */
          W._top;
        } else
          W = xl(qe, Oe.subLanguage.length ? Oe.subLanguage : null);
        Oe.relevance > 0 && (Oo += W.relevance), gt.__addSublanguage(W._emitter, W.language);
      }
      function Yt() {
        Oe.subLanguage != null ? mo() : li(), qe = "";
      }
      function kn(W, oe) {
        W !== "" && (gt.startScope(oe), gt.addText(W), gt.endScope());
      }
      function Nf(W, oe) {
        let ye = 1;
        const Ie = oe.length - 1;
        for (; ye <= Ie; ) {
          if (!W._emit[ye]) {
            ye++;
            continue;
          }
          const kt = Sn.classNameAliases[W[ye]] || W[ye], Un = oe[ye];
          kt ? kn(Un, kt) : (qe = Un, li(), qe = ""), ye++;
        }
      }
      function If(W, oe) {
        return W.scope && typeof W.scope == "string" && gt.openNode(Sn.classNameAliases[W.scope] || W.scope), W.beginScope && (W.beginScope._wrap ? (kn(qe, Sn.classNameAliases[W.beginScope._wrap] || W.beginScope._wrap), qe = "") : W.beginScope._multi && (Nf(W.beginScope, oe), qe = "")), Oe = Object.create(W, { parent: { value: Oe } }), Oe;
      }
      function Lf(W, oe, ye) {
        let Ie = S(W.endRe, ye);
        if (Ie) {
          if (W["on:end"]) {
            const kt = new e(W);
            W["on:end"](oe, kt), kt.isMatchIgnored && (Ie = !1);
          }
          if (Ie) {
            for (; W.endsParent && W.parent; )
              W = W.parent;
            return W;
          }
        }
        if (W.endsWithParent)
          return Lf(W.parent, oe, ye);
      }
      function tS(W) {
        return Oe.matcher.regexIndex === 0 ? (qe += W[0], 1) : (vl = !0, 0);
      }
      function nS(W) {
        const oe = W[0], ye = W.rule, Ie = new e(ye), kt = [ye.__beforeBegin, ye["on:begin"]];
        for (const Un of kt)
          if (Un && (Un(W, Ie), Ie.isMatchIgnored))
            return tS(oe);
        return ye.skip ? qe += oe : (ye.excludeBegin && (qe += oe), Yt(), !ye.returnBegin && !ye.excludeBegin && (qe = oe)), If(ye, W), ye.returnBegin ? 0 : oe.length;
      }
      function iS(W) {
        const oe = W[0], ye = le.substring(W.index), Ie = Lf(Oe, W, ye);
        if (!Ie)
          return Pf;
        const kt = Oe;
        Oe.endScope && Oe.endScope._wrap ? (Yt(), kn(oe, Oe.endScope._wrap)) : Oe.endScope && Oe.endScope._multi ? (Yt(), Nf(Oe.endScope, W)) : kt.skip ? qe += oe : (kt.returnEnd || kt.excludeEnd || (qe += oe), Yt(), kt.excludeEnd && (qe = oe));
        do
          Oe.scope && gt.closeNode(), !Oe.skip && !Oe.subLanguage && (Oo += Oe.relevance), Oe = Oe.parent;
        while (Oe !== Ie.parent);
        return Ie.starts && If(Ie.starts, W), kt.returnEnd ? 0 : oe.length;
      }
      function rS() {
        const W = [];
        for (let oe = Oe; oe !== Sn; oe = oe.parent)
          oe.scope && W.unshift(oe.scope);
        W.forEach((oe) => gt.openNode(oe));
      }
      let go = {};
      function Df(W, oe) {
        const ye = oe && oe[0];
        if (qe += W, ye == null)
          return Yt(), 0;
        if (go.type === "begin" && oe.type === "end" && go.index === oe.index && ye === "") {
          if (qe += le.slice(oe.index, oe.index + 1), !Je) {
            const Ie = new Error(`0 width match regex (${q})`);
            throw Ie.languageName = q, Ie.badRule = go.rule, Ie;
          }
          return 1;
        }
        if (go = oe, oe.type === "begin")
          return nS(oe);
        if (oe.type === "illegal" && !Qe) {
          const Ie = new Error('Illegal lexeme "' + ye + '" for mode "' + (Oe.scope || "<unnamed>") + '"');
          throw Ie.mode = Oe, Ie;
        } else if (oe.type === "end") {
          const Ie = iS(oe);
          if (Ie !== Pf)
            return Ie;
        }
        if (oe.type === "illegal" && ye === "")
          return qe += `
`, 1;
        if (wl > 1e5 && wl > oe.index * 3)
          throw new Error("potential infinite loop, way more iterations than matches");
        return qe += ye, ye.length;
      }
      const Sn = ai(q);
      if (!Sn)
        throw Yn(et.replace("{}", q)), new Error('Unknown language: "' + q + '"');
      const sS = dn(Sn);
      let Sl = "", Oe = Xe || sS;
      const Bf = {}, gt = new J.__emitter(J);
      rS();
      let qe = "", Oo = 0, _i = 0, wl = 0, vl = !1;
      try {
        if (Sn.__emitTokens)
          Sn.__emitTokens(le, gt);
        else {
          for (Oe.matcher.considerAll(); ; ) {
            wl++, vl ? vl = !1 : Oe.matcher.considerAll(), Oe.matcher.lastIndex = _i;
            const W = Oe.matcher.exec(le);
            if (!W) break;
            const oe = le.substring(_i, W.index), ye = Df(oe, W);
            _i = W.index + ye;
          }
          Df(le.substring(_i));
        }
        return gt.finalize(), Sl = gt.toHTML(), {
          language: q,
          value: Sl,
          relevance: Oo,
          illegal: !1,
          _emitter: gt,
          _top: Oe
        };
      } catch (W) {
        if (W.message && W.message.includes("Illegal"))
          return {
            language: q,
            value: Vt(le),
            illegal: !0,
            relevance: 0,
            _illegalBy: {
              message: W.message,
              index: _i,
              context: le.slice(_i - 100, _i + 100),
              mode: W.mode,
              resultSoFar: Sl
            },
            _emitter: gt
          };
        if (Je)
          return {
            language: q,
            value: Vt(le),
            illegal: !1,
            relevance: 0,
            errorRaised: W,
            _emitter: gt,
            _top: Oe
          };
        throw W;
      }
    }
    function yl(q) {
      const le = {
        value: Vt(q),
        illegal: !1,
        relevance: 0,
        _top: re,
        _emitter: new J.__emitter(J)
      };
      return le._emitter.addText(q), le;
    }
    function xl(q, le) {
      le = le || J.languages || Object.keys(B);
      const Qe = yl(q), Xe = le.filter(ai).filter(Mf).map(
        (Yt) => Vr(Yt, q, !1)
      );
      Xe.unshift(Qe);
      const at = Xe.sort((Yt, kn) => {
        if (Yt.relevance !== kn.relevance) return kn.relevance - Yt.relevance;
        if (Yt.language && kn.language) {
          if (ai(Yt.language).supersetOf === kn.language)
            return 1;
          if (ai(kn.language).supersetOf === Yt.language)
            return -1;
        }
        return 0;
      }), [pn, li] = at, mo = pn;
      return mo.secondBest = li, mo;
    }
    function Vk(q, le, Qe) {
      const Xe = le && G[le] || Qe;
      q.classList.add("hljs"), q.classList.add(`language-${Xe}`);
    }
    function kl(q) {
      let le = null;
      const Qe = ht(q);
      if (de(Qe)) return;
      if (po(
        "before:highlightElement",
        { el: q, language: Qe }
      ), q.dataset.highlighted) {
        console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", q);
        return;
      }
      if (q.children.length > 0 && (J.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(q)), J.throwUnescapedHTML))
        throw new oi(
          "One of your code blocks includes unescaped HTML.",
          q.innerHTML
        );
      le = q;
      const Xe = le.textContent, at = Qe ? it(Xe, { language: Qe, ignoreIllegals: !0 }) : xl(Xe);
      q.innerHTML = at.value, q.dataset.highlighted = "yes", Vk(q, Qe, at.language), q.result = {
        language: at.language,
        // TODO: remove with version 11.0
        re: at.relevance,
        relevance: at.relevance
      }, at.secondBest && (q.secondBest = {
        language: at.secondBest.language,
        relevance: at.secondBest.relevance
      }), po("after:highlightElement", { el: q, result: at, text: Xe });
    }
    function Yk(q) {
      J = Tf(J, q);
    }
    const Fk = () => {
      fo(), N("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
    };
    function Uk() {
      fo(), N("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
    }
    let $f = !1;
    function fo() {
      function q() {
        fo();
      }
      if (document.readyState === "loading") {
        $f || window.addEventListener("DOMContentLoaded", q, !1), $f = !0;
        return;
      }
      document.querySelectorAll(J.cssSelector).forEach(kl);
    }
    function Gk(q, le) {
      let Qe = null;
      try {
        Qe = le(E);
      } catch (Xe) {
        if (Yn("Language definition for '{}' could not be registered.".replace("{}", q)), Je)
          Yn(Xe);
        else
          throw Xe;
        Qe = re;
      }
      Qe.name || (Qe.name = q), B[q] = Qe, Qe.rawDefinition = le.bind(null, E), Qe.aliases && Rf(Qe.aliases, { languageName: q });
    }
    function Wk(q) {
      delete B[q];
      for (const le of Object.keys(G))
        G[le] === q && delete G[le];
    }
    function jk() {
      return Object.keys(B);
    }
    function ai(q) {
      return q = (q || "").toLowerCase(), B[q] || B[G[q]];
    }
    function Rf(q, { languageName: le }) {
      typeof q == "string" && (q = [q]), q.forEach((Qe) => {
        G[Qe.toLowerCase()] = le;
      });
    }
    function Mf(q) {
      const le = ai(q);
      return le && !le.disableAutodetect;
    }
    function Hk(q) {
      q["before:highlightBlock"] && !q["before:highlightElement"] && (q["before:highlightElement"] = (le) => {
        q["before:highlightBlock"](
          Object.assign({ block: le.el }, le)
        );
      }), q["after:highlightBlock"] && !q["after:highlightElement"] && (q["after:highlightElement"] = (le) => {
        q["after:highlightBlock"](
          Object.assign({ block: le.el }, le)
        );
      });
    }
    function Kk(q) {
      Hk(q), ge.push(q);
    }
    function Jk(q) {
      const le = ge.indexOf(q);
      le !== -1 && ge.splice(le, 1);
    }
    function po(q, le) {
      const Qe = q;
      ge.forEach(function(Xe) {
        Xe[Qe] && Xe[Qe](le);
      });
    }
    function eS(q) {
      return N("10.7.0", "highlightBlock will be removed entirely in v12.0"), N("10.7.0", "Please use highlightElement now."), kl(q);
    }
    Object.assign(E, {
      highlight: it,
      highlightAuto: xl,
      highlightAll: fo,
      highlightElement: kl,
      // TODO: Remove with v12 API
      highlightBlock: eS,
      configure: Yk,
      initHighlighting: Fk,
      initHighlightingOnLoad: Uk,
      registerLanguage: Gk,
      unregisterLanguage: Wk,
      listLanguages: jk,
      getLanguage: ai,
      registerAliases: Rf,
      autoDetection: Mf,
      inherit: Tf,
      addPlugin: Kk,
      removePlugin: Jk
    }), E.debugMode = function() {
      Je = !1;
    }, E.safeMode = function() {
      Je = !0;
    }, E.versionString = Ct, E.regex = {
      concat: m,
      lookahead: f,
      either: g,
      optional: p,
      anyNumberOfTimes: d
    };
    for (const q in je)
      typeof je[q] == "object" && n(je[q]);
    return Object.assign(E, je), E;
  }, Ui = Af({});
  return Ui.newInstance = () => Af({}), Fl = Ui, Ui.HighlightJS = Ui, Ui.default = Ui, Fl;
}
var TP = /* @__PURE__ */ CP();
const PP = /* @__PURE__ */ hh(TP), ep = {}, AP = "hljs-";
function $P(n) {
  const e = PP.newInstance();
  return n && s(n), {
    highlight: t,
    highlightAuto: i,
    listLanguages: r,
    register: s,
    registerAlias: o,
    registered: a
  };
  function t(l, c, u) {
    const h = u || ep, f = typeof h.prefix == "string" ? h.prefix : AP;
    if (!e.getLanguage(l))
      throw new Error("Unknown language: `" + l + "` is not registered");
    e.configure({ __emitter: RP, classPrefix: f });
    const d = (
      /** @type {HighlightResult & {_emitter: HastEmitter}} */
      e.highlight(c, { ignoreIllegals: !0, language: l })
    );
    if (d.errorRaised)
      throw new Error("Could not highlight with `Highlight.js`", {
        cause: d.errorRaised
      });
    const p = d._emitter.root, m = (
      /** @type {RootData} */
      p.data
    );
    return m.language = d.language, m.relevance = d.relevance, p;
  }
  function i(l, c) {
    const h = (c || ep).subset || r();
    let f = -1, d = 0, p;
    for (; ++f < h.length; ) {
      const m = h[f];
      if (!e.getLanguage(m)) continue;
      const O = t(m, l, c);
      O.data && O.data.relevance !== void 0 && O.data.relevance > d && (d = O.data.relevance, p = O);
    }
    return p || {
      type: "root",
      children: [],
      data: { language: void 0, relevance: d }
    };
  }
  function r() {
    return e.listLanguages();
  }
  function s(l, c) {
    if (typeof l == "string")
      e.registerLanguage(l, c);
    else {
      let u;
      for (u in l)
        Object.hasOwn(l, u) && e.registerLanguage(u, l[u]);
    }
  }
  function o(l, c) {
    if (typeof l == "string")
      e.registerAliases(
        // Note: copy needed because hljs doesn’t accept readonly arrays yet.
        typeof c == "string" ? c : [...c],
        { languageName: l }
      );
    else {
      let u;
      for (u in l)
        if (Object.hasOwn(l, u)) {
          const h = l[u];
          e.registerAliases(
            // Note: copy needed because hljs doesn’t accept readonly arrays yet.
            typeof h == "string" ? h : [...h],
            { languageName: u }
          );
        }
    }
  }
  function a(l) {
    return !!e.getLanguage(l);
  }
}
class RP {
  /**
   * @param {Readonly<HljsOptions>} options
   *   Configuration.
   * @returns
   *   Instance.
   */
  constructor(e) {
    this.options = e, this.root = {
      type: "root",
      children: [],
      data: { language: void 0, relevance: 0 }
    }, this.stack = [this.root];
  }
  /**
   * @param {string} value
   *   Text to add.
   * @returns {undefined}
   *   Nothing.
   *
   */
  addText(e) {
    if (e === "") return;
    const t = this.stack[this.stack.length - 1], i = t.children[t.children.length - 1];
    i && i.type === "text" ? i.value += e : t.children.push({ type: "text", value: e });
  }
  /**
   *
   * @param {unknown} rawName
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  startScope(e) {
    this.openNode(String(e));
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  endScope() {
    this.closeNode();
  }
  /**
   * @param {HastEmitter} other
   *   Other emitter.
   * @param {string} name
   *   Name of the sublanguage.
   * @returns {undefined}
   *   Nothing.
   */
  __addSublanguage(e, t) {
    const i = this.stack[this.stack.length - 1], r = (
      /** @type {Array<ElementContent>} */
      e.root.children
    );
    t ? i.children.push({
      type: "element",
      tagName: "span",
      properties: { className: [t] },
      children: r
    }) : i.children.push(...r);
  }
  /**
   * @param {string} name
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  openNode(e) {
    const t = this, i = e.split(".").map(function(o, a) {
      return a ? o + "_".repeat(a) : t.options.classPrefix + o;
    }), r = this.stack[this.stack.length - 1], s = {
      type: "element",
      tagName: "span",
      properties: { className: i },
      children: []
    };
    r.children.push(s), this.stack.push(s);
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  closeNode() {
    this.stack.pop();
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  finalize() {
  }
  /**
   * @returns {string}
   *   Nothing.
   */
  toHTML() {
    return "";
  }
}
const MP = {};
function NP(n) {
  const e = n || MP, t = e.aliases, i = e.detect || !1, r = e.languages || QP, s = e.plainText, o = e.prefix, a = e.subset;
  let l = "hljs";
  const c = $P(r);
  if (t && c.registerAlias(t), o) {
    const u = o.indexOf("-");
    l = u === -1 ? o : o.slice(0, u);
  }
  return function(u, h) {
    Pr(u, "element", function(f, d, p) {
      if (f.tagName !== "code" || !p || p.type !== "element" || p.tagName !== "pre")
        return;
      const m = IP(f);
      if (m === !1 || !m && !i || m && s && s.includes(m))
        return;
      Array.isArray(f.properties.className) || (f.properties.className = []), f.properties.className.includes(l) || f.properties.className.unshift(l);
      const O = uT(f, { whitespace: "pre" });
      let g;
      try {
        g = m ? c.highlight(m, O, { prefix: o }) : c.highlightAuto(O, { prefix: o, subset: a });
      } catch (y) {
        const S = (
          /** @type {Error} */
          y
        );
        if (m && /Unknown language/.test(S.message)) {
          h.message(
            "Cannot highlight as `" + m + "`, it’s not registered",
            {
              ancestors: [p, f],
              cause: S,
              place: f.position,
              ruleId: "missing-language",
              source: "rehype-highlight"
            }
          );
          return;
        }
        throw S;
      }
      !m && g.data && g.data.language && f.properties.className.push("language-" + g.data.language), g.children.length > 0 && (f.children = /** @type {Array<ElementContent>} */
      g.children);
    });
  };
}
function IP(n) {
  const e = n.properties.className;
  let t = -1;
  if (!Array.isArray(e))
    return;
  let i;
  for (; ++t < e.length; ) {
    const r = String(e[t]);
    if (r === "no-highlight" || r === "nohighlight")
      return !1;
    !i && r.slice(0, 5) === "lang-" && (i = r.slice(5)), !i && r.slice(0, 9) === "language-" && (i = r.slice(9));
  }
  return i;
}
const LP = {
  javascript: Kc,
  js: Kc,
  typescript: tu,
  ts: tu,
  python: eu,
  py: eu,
  java: hb,
  html: Pb,
  css: cb,
  json: mb,
  bash: Hc,
  sh: Hc,
  sql: bb,
  markdown: Jc,
  md: Jc
}, DP = [
  "javascript",
  "typescript",
  "python",
  "java",
  "html",
  "css",
  "json",
  "bash",
  "sql",
  "markdown"
], BP = ({
  content: n = "",
  typingSpeed: e = 80,
  disabled: t = !1
} = {}) => {
  const [i, r] = He(""), [s, o] = He(!1), [a, l] = He(!1), c = ft([]), u = ft(0), h = ft(null), f = ft(!0), d = ft(""), p = Kt(() => {
    h.current && (clearTimeout(h.current), h.current = null);
  }, []), m = ft([
    { pattern: /\?\[[^\]]*\]/, type: "custom-tag" },
    { pattern: /```[\s\S]*?```/, type: "code-block" },
    { pattern: /^#{1,6}\s[^\n]*$/m, type: "header" },
    { pattern: /\*\*\*[^*]+\*\*\*/, type: "bold-italic" },
    { pattern: /\*\*[^*]+\*\*/, type: "bold" },
    { pattern: new RegExp("(?<!\\*)\\*[^*]+\\*(?!\\*)"), type: "italic" },
    { pattern: /~~[^~]+~~/, type: "strikethrough" },
    { pattern: /`[^`]+`/, type: "inline-code" },
    { pattern: /!\[[^\]]*\]\([^\)]*\)/, type: "image" },
    { pattern: new RegExp("(?<!\\!)\\[[^\\]]*\\]\\([^\\)]*\\)"), type: "link" },
    { pattern: /^(>\s*)+[^\n]*$/m, type: "blockquote" },
    { pattern: /^[-*]{3,}$/m, type: "hr" },
    { pattern: /^[*-]\s+[^\n]*$/m, type: "list-item" },
    { pattern: /^\d+\.\s+[^\n]*$/m, type: "ordered-list-item" }
  ]).current, O = Kt((_) => {
    const v = [];
    let x = _ || "";
    for (; x.length > 0; ) {
      let C = !1, T = null, A = 1 / 0;
      for (const Q of m) {
        const M = Q.pattern.exec(x);
        M && M.index < A && (A = M.index, T = { match: M, pattern: Q });
      }
      if (T && A >= 0) {
        if (A > 0) {
          const Q = x.substring(0, A);
          v.push(...Array.from(Q).map((M) => ({
            content: M,
            isMarkdown: !1
          }))), x = x.substring(A);
        }
        v.push({
          content: T.match[0],
          isMarkdown: !0,
          type: T.pattern.type
        }), x = x.substring(T.match[0].length), C = !0;
      }
      C || (v.push({
        content: x[0],
        isMarkdown: !1
      }), x = x.substring(1));
    }
    return v;
  }, [m]), g = Kt(() => {
    if (f.current)
      if (u.current < c.current.length) {
        const _ = c.current[u.current];
        r((v) => v + (_?.content || "")), u.current++, f.current && (h.current = setTimeout(g, e));
      } else
        o(!1), l(!0);
  }, [e]);
  dt(() => {
    const _ = n || "", v = d.current;
    if (_ === v)
      return;
    if (t) {
      p();
      const C = O(_);
      r(C.map((T) => T.content).join("")), o(!1), l(!0), d.current = _;
      return;
    }
    if (_.length >= v.length && _.startsWith(v) && v) {
      const C = O(_), T = c.current.length;
      c.current = C;
      const A = u.current >= C.length;
      l(A), !A && (!s || u.current >= T) && (o(!0), g());
    } else {
      p(), r("");
      const C = O(_);
      c.current = C, u.current = 0;
      const T = C.length === 0;
      l(T), !T && _ && f.current && (o(!0), g());
    }
    d.current = _;
  }, [n, t, p, O, g, s]), dt(() => (f.current = !0, () => {
    f.current = !1, p();
  }), [p]);
  const y = Kt(() => {
    p(), r(""), c.current = [], u.current = 0, o(!1), l(!1), d.current = "";
  }, [p]), S = Kt(() => {
    p(), u.current = 0, r(""), o(!0), l(!1), g();
  }, [p, g]);
  return {
    displayContent: i,
    isTyping: s,
    isComplete: a,
    // 新增：返回完成状态
    reset: y,
    start: S,
    getSegments: () => c.current
  };
};
function zP(n) {
  NO(n, [/\r?\n|\r/g, ZP]);
}
function ZP() {
  return { type: "break" };
}
function XP() {
  return function(n) {
    zP(n);
  };
}
const qP = (n) => {
  const e = {
    "\\\\": "\\",
    // 反斜杠
    "\\n": `
`,
    // 换行符
    "\\r": "\r",
    // 回车符
    "\\t": "	",
    // 制表符
    '\\"': '"',
    // 双引号
    "\\'": "'",
    // 单引号
    "\\b": "\b",
    // 退格符
    "\\f": "\f"
    // 换页符
  }, t = /\\[\\nrt"'bf]|\\u([0-9a-fA-F]{4})/g;
  return n.replace(
    t,
    (i, r) => r ? String.fromCharCode(parseInt(r, 16)) : e[i] || i
  );
}, VP = (n) => {
  let e = qP(n);
  return e = e.replace(/\\\\n/g, `
`).replace(/\\\\t/g, "	"), e = e.replace(/\r\n/g, `
`), e = e.replace(/\n{3,}/g, `

`), e = e.replace(/&nbsp;|\u00A0/g, " "), e || "";
}, YP = ({
  content: n,
  customRenderBar: e,
  onSend: t,
  typingSpeed: i = 30,
  disableTyping: r = !0,
  defaultButtonText: s,
  defaultInputText: o,
  readonly: a = !1,
  onTypeFinished: l
}) => {
  const { displayContent: c, isComplete: u } = BP({
    content: VP(n),
    typingSpeed: i,
    disabled: r
  }), h = {
    "custom-variable": (d) => /* @__PURE__ */ ce.jsx(
      W_,
      {
        ...d,
        readonly: a,
        defaultButtonText: s,
        defaultInputText: o,
        onSend: t
      }
    ),
    "custom-button": (d) => /* @__PURE__ */ ce.jsx(
      A_,
      {
        ...d,
        readonly: a,
        defaultButtonText: s,
        onSend: t
      }
    ),
    code: (d) => {
      const { inline: p, className: m, children: O, ...g } = d, y = /language-(\w+)/.exec(m || "");
      return !p && y ? /* @__PURE__ */ ce.jsx("code", { className: m, ...g, children: O }) : /* @__PURE__ */ ce.jsx("code", { className: m, ...g, children: O });
    },
    table: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("div", { className: "content-render-table-container", children: /* @__PURE__ */ ce.jsx("table", { className: "content-render-table", ...p }) }),
    th: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("th", { className: "content-render-th", ...p }),
    td: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("td", { className: "content-render-td", ...p }),
    tr: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("tr", { className: "content-render-tr", ...p }),
    li: ({ node: d, ...p }) => {
      const m = d?.properties?.className;
      return typeof m == "string" && m.includes("task-list-item") || Array.isArray(m) && m.includes("task-list-item") ? /* @__PURE__ */ ce.jsx("li", { className: "content-render-task-list-item", ...p }) : /* @__PURE__ */ ce.jsx("li", { ...p });
    },
    ol: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("ol", { className: "content-render-ol", ...p }),
    ul: ({ node: d, ...p }) => /* @__PURE__ */ ce.jsx("ul", { className: "content-render-ul", ...p }),
    input: ({ node: d, ...p }) => p.type === "checkbox" ? /* @__PURE__ */ ce.jsx(
      "input",
      {
        type: "checkbox",
        className: "content-render-checkbox",
        disabled: !0,
        ...p
      }
    ) : /* @__PURE__ */ ce.jsx("input", { ...p })
  }, f = ft(!1);
  return dt(() => {
    u && !f.current && (console.log("[ContentRender] Typing is complete, calling onTypeFinished"), f.current = !0, l?.());
  }, [u, l]), dt(() => {
    f.current = !1;
  }, [n]), /* @__PURE__ */ ce.jsxs("div", { className: "content-render markdown-body", children: [
    /* @__PURE__ */ ce.jsx(
      ME,
      {
        remarkPlugins: [
          iT,
          I_,
          zE,
          XP
        ],
        rehypePlugins: [
          [
            NP,
            {
              languages: LP,
              subset: DP
            }
          ]
        ],
        components: h,
        children: c
      }
    ),
    e && ch.createElement(e, {
      content: n,
      displayContent: c,
      onSend: t
    })
  ] });
}, FP = ({
  initialContentList: n = [],
  customRenderBar: e,
  onSend: t,
  typingSpeed: i,
  disableTyping: r,
  onBlockComplete: s
}) => /* @__PURE__ */ ce.jsx("div", { className: "markdown-flow", children: n.map((o, a) => {
  const l = o.isFinished ?? !1, c = l || r, u = l ? void 0 : t, h = l ? void 0 : i;
  return /* @__PURE__ */ ce.jsx(
    YP,
    {
      content: o.content,
      defaultInputText: o.defaultInputText,
      defaultButtonText: o.defaultButtonText,
      readonly: o.readonly,
      disableTyping: c,
      customRenderBar: o.customRenderBar || e,
      onSend: u,
      typingSpeed: h,
      onTypeFinished: () => {
        console.log(`Block ${a} typing finished`), s?.(a);
      }
    },
    a
  );
}) }), UP = (n, e = [], t = {}) => {
  const {
    behavior: i = "smooth",
    autoScrollOnInit: r = !0,
    scrollDelay: s = 100,
    scrollThreshold: o = 10
  } = t, [a, l] = He(!1), [c, u] = He(!0), h = ft(!0), f = ft(!0), d = ft({
    scroll: null,
    init: null,
    content: null
  }), p = Kt(() => {
    Object.values(d.current).forEach((S) => {
      S && clearTimeout(S);
    });
  }, []), m = Kt(() => {
    const S = n.current;
    if (!S) return !0;
    const { scrollTop: _, scrollHeight: v, clientHeight: x } = S;
    return _ + x >= v - o;
  }, [n, o]), O = Kt(() => {
    const S = n.current;
    S && S.scrollTo({
      top: S.scrollHeight,
      behavior: i
    });
  }, [n, i]), g = Kt(() => {
    const S = m();
    return u(S), l(!S), S;
  }, [m]), y = Kt(() => {
    O(), h.current = !0, l(!1), u(!0);
  }, [O]);
  return dt(() => {
    const S = n.current;
    if (!S) return;
    const _ = () => {
      d.current.scroll && clearTimeout(d.current.scroll), d.current.scroll = setTimeout(() => {
        g() ? h.current = !0 : h.current = !1;
      }, 150);
    };
    return S.addEventListener("scroll", _), g(), () => {
      S.removeEventListener("scroll", _), d.current.scroll && clearTimeout(d.current.scroll);
    };
  }, [n, g]), dt(() => (r && f.current && (d.current.init = setTimeout(() => {
    O(), u(!0), l(!1), h.current = !0, f.current = !1;
  }, s)), () => {
    d.current.init && clearTimeout(d.current.init);
  }), [r, O, s]), dt(() => {
    if (!f.current)
      return d.current.content = setTimeout(() => {
        h.current ? (O(), u(!0), l(!1)) : g();
      }, 50), () => {
        d.current.content && clearTimeout(d.current.content);
      };
  }, [...e, O, g]), dt(() => () => {
    p();
  }, [p]), {
    showScrollToBottom: a,
    scrollToBottom: y,
    handleUserScrollToBottom: y,
    isAtBottom: c,
    followNewContent: h.current
  };
}, GP = ({
  initialContentList: n = [],
  customRenderBar: e,
  onSend: t,
  onBlockComplete: i,
  typingSpeed: r,
  disableTyping: s,
  height: o = "100%",
  className: a = "",
  ...l
}) => {
  const c = ft(null), { showScrollToBottom: u, handleUserScrollToBottom: h } = UP(
    c,
    [
      n?.length >= 1 ? JSON.stringify(n[n?.length - 1]) : null
    ],
    {
      // 监听内容数量变化
      behavior: "smooth",
      autoScrollOnInit: !0,
      scrollDelay: 100
    }
  );
  return /* @__PURE__ */ ce.jsxs(
    "div",
    {
      className: `scrollable-markdown-container ${a}`,
      style: { height: o, position: "relative" },
      ...l,
      children: [
        /* @__PURE__ */ ce.jsx("div", { ref: c, style: { height: "100%", overflow: "auto" }, children: /* @__PURE__ */ ce.jsx(
          FP,
          {
            initialContentList: n,
            customRenderBar: e,
            onSend: t,
            typingSpeed: r,
            disableTyping: !1,
            onBlockComplete: i
          }
        ) }),
        u && /* @__PURE__ */ ce.jsx(
          ka,
          {
            className: "h-6 w-6 border hover:bg-gray-200 scroll-to-bottom-btn",
            type: "button",
            variant: "ghost",
            size: "icon",
            onClick: h,
            "aria-label": "滚动到底部",
            children: /* @__PURE__ */ ce.jsx(V_, {})
          }
        )
      ]
    }
  );
}, Nz = ({
  defaultContent: n,
  defaultVariables: e = {},
  defaultDocumentPrompt: t = "",
  styles: i = {},
  sseUrl: r = "https://play.dev.pillowai.cn/api/v1/playground/generate",
  sessionId: s,
  disableTyping: o
}) => {
  const { data: a, loading: l } = wS(n), { block_count: c = 0, interaction_blocks: u = [] } = a || {}, [h, f] = He(0), [d, p] = He([]), [m, O] = He(null), [g, y] = He({
    content: n,
    block_index: 0,
    context: [{ role: "assistant", content: "" }],
    variables: e,
    user_input: null,
    document_prompt: t,
    interaction_prompt: null,
    interaction_error_prompt: null,
    model: null
  }), S = () => JSON.stringify(g), _ = (P) => {
    const $ = [...g.context];
    for (; $.length <= h; )
      $.push({ role: "assistant", content: "" });
    return $[h] = {
      ...$[h],
      content: P
    }, $.length <= h + 1 && $.push({ role: "assistant", content: "" }), $;
  }, v = (P) => {
    const $ = [...d];
    for (; $.length <= h; )
      $.push({ content: "" });
    return $[h] = {
      ...$[h],
      content: P
    }, m === h && O(null), $;
  }, x = (P) => {
    const $ = [...d], Y = $.length - 1;
    return Y >= 0 && ($[Y] = {
      ...$[Y],
      readonly: !0,
      defaultButtonText: P.buttonText,
      defaultInputText: P.inputText
    }), $;
  }, C = (P) => {
    const $ = h + 1, Y = u.includes(h);
    if (P && Y || (u.includes($) && $ < c && O($), $ >= c))
      return;
    const D = _(P);
    y((ee) => ({
      ...ee,
      user_input: null,
      block_index: $,
      context: D
    })), f($);
  }, T = () => {
    const P = [...d];
    if (m !== null) {
      for (; P.length <= m; )
        P.push({ content: "" });
      P[m] = {
        ...P[m],
        customRenderBar: M
      };
    }
    return P;
  }, { data: A, connect: Q } = SS(r, {
    method: "POST",
    body: S(),
    headers: s ? { "session-id": s } : {},
    autoConnect: !!a && !l,
    onFinish: C
  });
  dt(() => {
    a && !l && Q();
  }, [a, l, Q]), dt(() => {
    if (A)
      try {
        const P = v(A);
        p(P);
      } catch (P) {
        console.error("Error processing SSE message:", P);
      }
  }, [A]);
  const M = ({ content: P, displayContent: $, onSend: Y }) => /* @__PURE__ */ ce.jsxs("span", { className: "flex gap-[10px] items-center", children: [
    /* @__PURE__ */ ce.jsx(F_, { className: "animate-spin", style: { width: "15px", height: "15px" } }),
    "请稍等..."
  ] }), R = (P) => {
    const $ = P.inputText || P.buttonText || "", Y = [...g.context];
    Y[h] && (Y[h] = {
      ...Y[h],
      content: $,
      role: "user"
    }), y((D) => ({
      ...D,
      context: Y,
      user_input: $ ?? null,
      variables: {
        ...D.variables,
        [P.variableName || ""]: $
      }
    }));
    const ie = x(P);
    p(ie);
  }, L = () => T().map((P) => ({
    content: P.content,
    customRenderBar: P.customRenderBar || (() => null),
    defaultButtonText: P.defaultButtonText,
    defaultInputText: P.defaultInputText,
    readonly: P.readonly
  }));
  return /* @__PURE__ */ ce.jsx("div", { style: i, children: /* @__PURE__ */ ce.jsx(GP, { initialContentList: L(), onSend: R, disableTyping: o }) });
};
function nu() {
  return nu = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var i in t) ({}).hasOwnProperty.call(t, i) && (n[i] = t[i]);
    }
    return n;
  }, nu.apply(null, arguments);
}
function WP(n, e) {
  if (n == null) return {};
  var t = {};
  for (var i in n) if ({}.hasOwnProperty.call(n, i)) {
    if (e.indexOf(i) !== -1) continue;
    t[i] = n[i];
  }
  return t;
}
let iu = [], Ab = [];
(() => {
  let n = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e) => e ? parseInt(e, 36) : 1);
  for (let e = 0, t = 0; e < n.length; e++)
    (e % 2 ? Ab : iu).push(t = t + n[e]);
})();
function jP(n) {
  if (n < 768) return !1;
  for (let e = 0, t = iu.length; ; ) {
    let i = e + t >> 1;
    if (n < iu[i]) t = i;
    else if (n >= Ab[i]) e = i + 1;
    else return !0;
    if (e == t) return !1;
  }
}
function tp(n) {
  return n >= 127462 && n <= 127487;
}
const np = 8205;
function HP(n, e, t = !0, i = !0) {
  return (t ? $b : KP)(n, e, i);
}
function $b(n, e, t) {
  if (e == n.length) return e;
  e && Rb(n.charCodeAt(e)) && Mb(n.charCodeAt(e - 1)) && e--;
  let i = Ul(n, e);
  for (e += ip(i); e < n.length; ) {
    let r = Ul(n, e);
    if (i == np || r == np || t && jP(r))
      e += ip(r), i = r;
    else if (tp(r)) {
      let s = 0, o = e - 2;
      for (; o >= 0 && tp(Ul(n, o)); )
        s++, o -= 2;
      if (s % 2 == 0) break;
      e += 2;
    } else
      break;
  }
  return e;
}
function KP(n, e, t) {
  for (; e > 0; ) {
    let i = $b(n, e - 2, t);
    if (i < e) return i;
    e--;
  }
  return 0;
}
function Ul(n, e) {
  let t = n.charCodeAt(e);
  if (!Mb(t) || e + 1 == n.length) return t;
  let i = n.charCodeAt(e + 1);
  return Rb(i) ? (t - 55296 << 10) + (i - 56320) + 65536 : t;
}
function Rb(n) {
  return n >= 56320 && n < 57344;
}
function Mb(n) {
  return n >= 55296 && n < 56320;
}
function ip(n) {
  return n < 65536 ? 1 : 2;
}
class Te {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, i) {
    [e, t] = mr(this, e, t);
    let r = [];
    return this.decompose(
      0,
      e,
      r,
      2
      /* Open.To */
    ), i.length && i.decompose(
      0,
      i.length,
      r,
      3
      /* Open.To */
    ), this.decompose(
      t,
      this.length,
      r,
      1
      /* Open.From */
    ), Tn.from(r, this.length - (t - e) + i.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    [e, t] = mr(this, e, t);
    let i = [];
    return this.decompose(e, t, i, 0), Tn.from(i, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), i = this.length - this.scanIdentical(e, -1), r = new gs(this), s = new gs(e);
    for (let o = t, a = t; ; ) {
      if (r.next(o), s.next(o), o = 0, r.lineBreak != s.lineBreak || r.done != s.done || r.value != s.value)
        return !1;
      if (a += r.value.length, r.done || a >= i)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new gs(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new Nb(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let i;
    if (e == null)
      i = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let r = this.line(e).from;
      i = this.iterRange(r, Math.max(r, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new Ib(i);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? Te.empty : e.length <= 32 ? new tt(e) : Tn.from(tt.split(e, []));
  }
}
class tt extends Te {
  constructor(e, t = JP(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.text[s], a = r + o.length;
      if ((t ? i : a) >= e)
        return new eA(r, a, i, o);
      r = a + 1, i++;
    }
  }
  decompose(e, t, i, r) {
    let s = e <= 0 && t >= this.length ? this : new tt(rp(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (r & 1) {
      let o = i.pop(), a = ia(s.text, o.text.slice(), 0, s.length);
      if (a.length <= 32)
        i.push(new tt(a, o.length + s.length));
      else {
        let l = a.length >> 1;
        i.push(new tt(a.slice(0, l)), new tt(a.slice(l)));
      }
    } else
      i.push(s);
  }
  replace(e, t, i) {
    if (!(i instanceof tt))
      return super.replace(e, t, i);
    [e, t] = mr(this, e, t);
    let r = ia(this.text, ia(i.text, rp(this.text, 0, e)), t), s = this.length + i.length - (t - e);
    return r.length <= 32 ? new tt(r, s) : Tn.from(tt.split(r, []), s);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = mr(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s <= t && o < this.text.length; o++) {
      let a = this.text[o], l = s + a.length;
      s > e && o && (r += i), e < l && t > s && (r += a.slice(Math.max(0, e - s), t - s)), s = l + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let i = [], r = -1;
    for (let s of e)
      i.push(s), r += s.length + 1, i.length == 32 && (t.push(new tt(i, r)), i = [], r = -1);
    return r > -1 && t.push(new tt(i, r)), t;
  }
}
class Tn extends Te {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let i of e)
      this.lines += i.lines;
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.children[s], a = r + o.length, l = i + o.lines - 1;
      if ((t ? l : a) >= e)
        return o.lineInner(e, t, i, r);
      r = a + 1, i = l + 1;
    }
  }
  decompose(e, t, i, r) {
    for (let s = 0, o = 0; o <= t && s < this.children.length; s++) {
      let a = this.children[s], l = o + a.length;
      if (e <= l && t >= o) {
        let c = r & ((o <= e ? 1 : 0) | (l >= t ? 2 : 0));
        o >= e && l <= t && !c ? i.push(a) : a.decompose(e - o, t - o, i, c);
      }
      o = l + 1;
    }
  }
  replace(e, t, i) {
    if ([e, t] = mr(this, e, t), i.lines < this.lines)
      for (let r = 0, s = 0; r < this.children.length; r++) {
        let o = this.children[r], a = s + o.length;
        if (e >= s && t <= a) {
          let l = o.replace(e - s, t - s, i), c = this.lines - o.lines + l.lines;
          if (l.lines < c >> 4 && l.lines > c >> 6) {
            let u = this.children.slice();
            return u[r] = l, new Tn(u, this.length - (t - e) + i.length);
          }
          return super.replace(s, a, l);
        }
        s = a + 1;
      }
    return super.replace(e, t, i);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = mr(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s < this.children.length && o <= t; s++) {
      let a = this.children[s], l = o + a.length;
      o > e && s && (r += i), e < l && t > o && (r += a.sliceString(e - o, t - o, i)), o = l + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof Tn))
      return 0;
    let i = 0, [r, s, o, a] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; r += t, s += t) {
      if (r == o || s == a)
        return i;
      let l = this.children[r], c = e.children[s];
      if (l != c)
        return i + l.scanIdentical(c, t);
      i += l.length + 1;
    }
  }
  static from(e, t = e.reduce((i, r) => i + r.length + 1, -1)) {
    let i = 0;
    for (let d of e)
      i += d.lines;
    if (i < 32) {
      let d = [];
      for (let p of e)
        p.flatten(d);
      return new tt(d, t);
    }
    let r = Math.max(
      32,
      i >> 5
      /* Tree.BranchShift */
    ), s = r << 1, o = r >> 1, a = [], l = 0, c = -1, u = [];
    function h(d) {
      let p;
      if (d.lines > s && d instanceof Tn)
        for (let m of d.children)
          h(m);
      else d.lines > o && (l > o || !l) ? (f(), a.push(d)) : d instanceof tt && l && (p = u[u.length - 1]) instanceof tt && d.lines + p.lines <= 32 ? (l += d.lines, c += d.length + 1, u[u.length - 1] = new tt(p.text.concat(d.text), p.length + 1 + d.length)) : (l + d.lines > r && f(), l += d.lines, c += d.length + 1, u.push(d));
    }
    function f() {
      l != 0 && (a.push(u.length == 1 ? u[0] : Tn.from(u, c)), c = -1, l = u.length = 0);
    }
    for (let d of e)
      h(d);
    return f(), a.length == 1 ? a[0] : new Tn(a, t);
  }
}
Te.empty = /* @__PURE__ */ new tt([""], 0);
function JP(n) {
  let e = -1;
  for (let t of n)
    e += t.length + 1;
  return e;
}
function ia(n, e, t = 0, i = 1e9) {
  for (let r = 0, s = 0, o = !0; s < n.length && r <= i; s++) {
    let a = n[s], l = r + a.length;
    l >= t && (l > i && (a = a.slice(0, i - r)), r < t && (a = a.slice(t - r)), o ? (e[e.length - 1] += a, o = !1) : e.push(a)), r = l + 1;
  }
  return e;
}
function rp(n, e, t) {
  return ia(n, [""], e, t);
}
class gs {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof tt ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let i = this.nodes.length - 1, r = this.nodes[i], s = this.offsets[i], o = s >> 1, a = r instanceof tt ? r.text.length : r.children.length;
      if (o == (t > 0 ? a : 0)) {
        if (i == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[i - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[i] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (r instanceof tt) {
        let l = r.text[o + (t < 0 ? -1 : 0)];
        if (this.offsets[i] += t, l.length > Math.max(0, e))
          return this.value = e == 0 ? l : t > 0 ? l.slice(e) : l.slice(0, l.length - e), this;
        e -= l.length;
      } else {
        let l = r.children[o + (t < 0 ? -1 : 0)];
        e > l.length ? (e -= l.length, this.offsets[i] += t) : (t < 0 && this.offsets[i]--, this.nodes.push(l), this.offsets.push(t > 0 ? 1 : (l instanceof tt ? l.text.length : l.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class Nb {
  constructor(e, t, i) {
    this.value = "", this.done = !1, this.cursor = new gs(e, t > i ? -1 : 1), this.pos = t > i ? e.length : 0, this.from = Math.min(t, i), this.to = Math.max(t, i);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let i = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > i && (e = i), i -= e;
    let { value: r } = this.cursor.next(e);
    return this.pos += (r.length + e) * t, this.value = r.length <= i ? r : t < 0 ? r.slice(r.length - i) : r.slice(0, i), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class Ib {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: i, value: r } = this.inner.next(e);
    return t && this.afterBreak ? (this.value = "", this.afterBreak = !1) : t ? (this.done = !0, this.value = "") : i ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = r, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (Te.prototype[Symbol.iterator] = function() {
  return this.iter();
}, gs.prototype[Symbol.iterator] = Nb.prototype[Symbol.iterator] = Ib.prototype[Symbol.iterator] = function() {
  return this;
});
let eA = class {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.number = i, this.text = r;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function mr(n, e, t) {
  return e = Math.max(0, Math.min(n.length, e)), [e, Math.max(e, Math.min(n.length, t))];
}
function xt(n, e, t = !0, i = !0) {
  return HP(n, e, t, i);
}
function tA(n) {
  return n >= 56320 && n < 57344;
}
function nA(n) {
  return n >= 55296 && n < 56320;
}
function Lt(n, e) {
  let t = n.charCodeAt(e);
  if (!nA(t) || e + 1 == n.length)
    return t;
  let i = n.charCodeAt(e + 1);
  return tA(i) ? (t - 55296 << 10) + (i - 56320) + 65536 : t;
}
function Rh(n) {
  return n <= 65535 ? String.fromCharCode(n) : (n -= 65536, String.fromCharCode((n >> 10) + 55296, (n & 1023) + 56320));
}
function Pn(n) {
  return n < 65536 ? 1 : 2;
}
const ru = /\r\n?|\n/;
var yt = /* @__PURE__ */ function(n) {
  return n[n.Simple = 0] = "Simple", n[n.TrackDel = 1] = "TrackDel", n[n.TrackBefore = 2] = "TrackBefore", n[n.TrackAfter = 3] = "TrackAfter", n;
}(yt || (yt = {}));
class Nn {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t + 1];
      e += i < 0 ? this.sections[t] : i;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, i = 0, r = 0; t < this.sections.length; ) {
      let s = this.sections[t++], o = this.sections[t++];
      o < 0 ? (e(i, r, s), r += s) : r += o, i += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    su(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], r = this.sections[t++];
      r < 0 ? e.push(i, r) : e.push(r, i);
    }
    return new Nn(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : Lb(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : ou(this, e, t);
  }
  mapPos(e, t = -1, i = yt.Simple) {
    let r = 0, s = 0;
    for (let o = 0; o < this.sections.length; ) {
      let a = this.sections[o++], l = this.sections[o++], c = r + a;
      if (l < 0) {
        if (c > e)
          return s + (e - r);
        s += a;
      } else {
        if (i != yt.Simple && c >= e && (i == yt.TrackDel && r < e && c > e || i == yt.TrackBefore && r < e || i == yt.TrackAfter && c > e))
          return null;
        if (c > e || c == e && t < 0 && !a)
          return e == r || t < 0 ? s : s + l;
        s += l;
      }
      r = c;
    }
    if (e > r)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let i = 0, r = 0; i < this.sections.length && r <= t; ) {
      let s = this.sections[i++], o = this.sections[i++], a = r + s;
      if (o >= 0 && r <= t && a >= e)
        return r < e && a > t ? "cover" : !0;
      r = a;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], r = this.sections[t++];
      e += (e ? " " : "") + i + (r >= 0 ? ":" + r : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Nn(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new Nn(e);
  }
}
class ct extends Nn {
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return su(this, (t, i, r, s, o) => e = e.replace(r, r + (i - t), o), !1), e;
  }
  mapDesc(e, t = !1) {
    return ou(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), i = [];
    for (let r = 0, s = 0; r < t.length; r += 2) {
      let o = t[r], a = t[r + 1];
      if (a >= 0) {
        t[r] = a, t[r + 1] = o;
        let l = r >> 1;
        for (; i.length < l; )
          i.push(Te.empty);
        i.push(o ? e.slice(s, s + o) : Te.empty);
      }
      s += o;
    }
    return new ct(t, i);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : Lb(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : ou(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    su(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Nn.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], i = [], r = [], s = new _s(this);
    e: for (let o = 0, a = 0; ; ) {
      let l = o == e.length ? 1e9 : e[o++];
      for (; a < l || a == l && s.len == 0; ) {
        if (s.done)
          break e;
        let u = Math.min(s.len, l - a);
        St(r, u, -1);
        let h = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
        St(t, u, h), h > 0 && pi(i, t, s.text), s.forward(u), a += u;
      }
      let c = e[o++];
      for (; a < c; ) {
        if (s.done)
          break e;
        let u = Math.min(s.len, c - a);
        St(t, u, -1), St(r, u, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(u), a += u;
      }
    }
    return {
      changes: new ct(t, i),
      filtered: Nn.create(r)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t], r = this.sections[t + 1];
      r < 0 ? e.push(i) : r == 0 ? e.push([i]) : e.push([i].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, i) {
    let r = [], s = [], o = 0, a = null;
    function l(u = !1) {
      if (!u && !r.length)
        return;
      o < t && St(r, t - o, -1);
      let h = new ct(r, s);
      a = a ? a.compose(h.map(a)) : h, r = [], s = [], o = 0;
    }
    function c(u) {
      if (Array.isArray(u))
        for (let h of u)
          c(h);
      else if (u instanceof ct) {
        if (u.length != t)
          throw new RangeError(`Mismatched change set length (got ${u.length}, expected ${t})`);
        l(), a = a ? a.compose(u.map(a)) : u;
      } else {
        let { from: h, to: f = h, insert: d } = u;
        if (h > f || h < 0 || f > t)
          throw new RangeError(`Invalid change range ${h} to ${f} (in doc of length ${t})`);
        let p = d ? typeof d == "string" ? Te.of(d.split(i || ru)) : d : Te.empty, m = p.length;
        if (h == f && m == 0)
          return;
        h < o && l(), h > o && St(r, h - o, -1), St(r, f - h, m), pi(s, r, p), o = f;
      }
    }
    return c(e), l(!a), a;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new ct(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], i = [];
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      if (typeof s == "number")
        t.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((o, a) => a && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          t.push(s[0], 0);
        else {
          for (; i.length < r; )
            i.push(Te.empty);
          i[r] = Te.of(s.slice(1)), t.push(s[0], i[r].length);
        }
      }
    }
    return new ct(t, i);
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new ct(e, t);
  }
}
function St(n, e, t, i = !1) {
  if (e == 0 && t <= 0)
    return;
  let r = n.length - 2;
  r >= 0 && t <= 0 && t == n[r + 1] ? n[r] += e : r >= 0 && e == 0 && n[r] == 0 ? n[r + 1] += t : i ? (n[r] += e, n[r + 1] += t) : n.push(e, t);
}
function pi(n, e, t) {
  if (t.length == 0)
    return;
  let i = e.length - 2 >> 1;
  if (i < n.length)
    n[n.length - 1] = n[n.length - 1].append(t);
  else {
    for (; n.length < i; )
      n.push(Te.empty);
    n.push(t);
  }
}
function su(n, e, t) {
  let i = n.inserted;
  for (let r = 0, s = 0, o = 0; o < n.sections.length; ) {
    let a = n.sections[o++], l = n.sections[o++];
    if (l < 0)
      r += a, s += a;
    else {
      let c = r, u = s, h = Te.empty;
      for (; c += a, u += l, l && i && (h = h.append(i[o - 2 >> 1])), !(t || o == n.sections.length || n.sections[o + 1] < 0); )
        a = n.sections[o++], l = n.sections[o++];
      e(r, c, s, u, h), r = c, s = u;
    }
  }
}
function ou(n, e, t, i = !1) {
  let r = [], s = i ? [] : null, o = new _s(n), a = new _s(e);
  for (let l = -1; ; ) {
    if (o.done && a.len || a.done && o.len)
      throw new Error("Mismatched change set lengths");
    if (o.ins == -1 && a.ins == -1) {
      let c = Math.min(o.len, a.len);
      St(r, c, -1), o.forward(c), a.forward(c);
    } else if (a.ins >= 0 && (o.ins < 0 || l == o.i || o.off == 0 && (a.len < o.len || a.len == o.len && !t))) {
      let c = a.len;
      for (St(r, a.ins, -1); c; ) {
        let u = Math.min(o.len, c);
        o.ins >= 0 && l < o.i && o.len <= u && (St(r, 0, o.ins), s && pi(s, r, o.text), l = o.i), o.forward(u), c -= u;
      }
      a.next();
    } else if (o.ins >= 0) {
      let c = 0, u = o.len;
      for (; u; )
        if (a.ins == -1) {
          let h = Math.min(u, a.len);
          c += h, u -= h, a.forward(h);
        } else if (a.ins == 0 && a.len < u)
          u -= a.len, a.next();
        else
          break;
      St(r, c, l < o.i ? o.ins : 0), s && l < o.i && pi(s, r, o.text), l = o.i, o.forward(o.len - u);
    } else {
      if (o.done && a.done)
        return s ? ct.createSet(r, s) : Nn.create(r);
      throw new Error("Mismatched change set lengths");
    }
  }
}
function Lb(n, e, t = !1) {
  let i = [], r = t ? [] : null, s = new _s(n), o = new _s(e);
  for (let a = !1; ; ) {
    if (s.done && o.done)
      return r ? ct.createSet(i, r) : Nn.create(i);
    if (s.ins == 0)
      St(i, s.len, 0, a), s.next();
    else if (o.len == 0 && !o.done)
      St(i, 0, o.ins, a), r && pi(r, i, o.text), o.next();
    else {
      if (s.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let l = Math.min(s.len2, o.len), c = i.length;
        if (s.ins == -1) {
          let u = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          St(i, l, u, a), r && u && pi(r, i, o.text);
        } else o.ins == -1 ? (St(i, s.off ? 0 : s.len, l, a), r && pi(r, i, s.textBit(l))) : (St(i, s.off ? 0 : s.len, o.off ? 0 : o.ins, a), r && !o.off && pi(r, i, o.text));
        a = (s.ins > l || o.ins >= 0 && o.len > l) && (a || i.length > c), s.forward2(l), o.forward(l);
      }
    }
  }
}
class _s {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? Te.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, i = this.i - 2 >> 1;
    return i >= t.length && !e ? Te.empty : t[i].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class Ri {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.flags = i;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let i, r;
    return this.empty ? i = r = e.mapPos(this.from, t) : (i = e.mapPos(this.from, 1), r = e.mapPos(this.to, -1)), i == this.from && r == this.to ? this : new Ri(i, r, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return I.range(e, t);
    let i = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return I.range(this.anchor, i);
  }
  /**
  Compare this range to another range.
  */
  eq(e, t = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return I.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Ri(e, t, i);
  }
}
class I {
  constructor(e, t) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : I.create(this.ranges.map((i) => i.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, t = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(e.ranges[i], t))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new I([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return I.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let i = this.ranges.slice();
    return i[t] = e, I.create(i, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new I(e.ranges.map((t) => Ri.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new I([I.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i = 0, r = 0; r < e.length; r++) {
      let s = e[r];
      if (s.empty ? s.from <= i : s.from < i)
        return I.normalized(e.slice(), t);
      i = s.to;
    }
    return new I(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, i, r) {
    return Ri.create(e, e, (t == 0 ? 0 : t < 0 ? 8 : 16) | (i == null ? 7 : Math.min(6, i)) | (r ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, t, i, r) {
    let s = (i ?? 16777215) << 6 | (r == null ? 7 : Math.min(6, r));
    return t < e ? Ri.create(t, e, 48 | s) : Ri.create(e, t, (t > e ? 8 : 0) | s);
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let i = e[t];
    e.sort((r, s) => r.from - s.from), t = e.indexOf(i);
    for (let r = 1; r < e.length; r++) {
      let s = e[r], o = e[r - 1];
      if (s.empty ? s.from <= o.to : s.from < o.to) {
        let a = o.from, l = Math.max(s.to, o.to);
        r <= t && t--, e.splice(--r, 2, s.anchor > s.head ? I.range(l, a) : I.range(a, l));
      }
    }
    return new I(e, t);
  }
}
function Db(n, e) {
  for (let t of n.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let Mh = 0;
class K {
  constructor(e, t, i, r, s) {
    this.combine = e, this.compareInput = t, this.compare = i, this.isStatic = r, this.id = Mh++, this.default = e([]), this.extensions = typeof s == "function" ? s(this) : s;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new K(e.combine || ((t) => t), e.compareInput || ((t, i) => t === i), e.compare || (e.combine ? (t, i) => t === i : Nh), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new ra([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new ra(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new ra(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (i) => i), this.compute([e], (i) => t(i.field(e)));
  }
}
function Nh(n, e) {
  return n == e || n.length == e.length && n.every((t, i) => t === e[i]);
}
class ra {
  constructor(e, t, i, r) {
    this.dependencies = e, this.facet = t, this.type = i, this.value = r, this.id = Mh++;
  }
  dynamicSlot(e) {
    var t;
    let i = this.value, r = this.facet.compareInput, s = this.id, o = e[s] >> 1, a = this.type == 2, l = !1, c = !1, u = [];
    for (let h of this.dependencies)
      h == "doc" ? l = !0 : h == "selection" ? c = !0 : (((t = e[h.id]) !== null && t !== void 0 ? t : 1) & 1) == 0 && u.push(e[h.id]);
    return {
      create(h) {
        return h.values[o] = i(h), 1;
      },
      update(h, f) {
        if (l && f.docChanged || c && (f.docChanged || f.selection) || au(h, u)) {
          let d = i(h);
          if (a ? !sp(d, h.values[o], r) : !r(d, h.values[o]))
            return h.values[o] = d, 1;
        }
        return 0;
      },
      reconfigure: (h, f) => {
        let d, p = f.config.address[s];
        if (p != null) {
          let m = _a(f, p);
          if (this.dependencies.every((O) => O instanceof K ? f.facet(O) === h.facet(O) : O instanceof mt ? f.field(O, !1) == h.field(O, !1) : !0) || (a ? sp(d = i(h), m, r) : r(d = i(h), m)))
            return h.values[o] = m, 0;
        } else
          d = i(h);
        return h.values[o] = d, 1;
      }
    };
  }
}
function sp(n, e, t) {
  if (n.length != e.length)
    return !1;
  for (let i = 0; i < n.length; i++)
    if (!t(n[i], e[i]))
      return !1;
  return !0;
}
function au(n, e) {
  let t = !1;
  for (let i of e)
    Os(n, i) & 1 && (t = !0);
  return t;
}
function iA(n, e, t) {
  let i = t.map((l) => n[l.id]), r = t.map((l) => l.type), s = i.filter((l) => !(l & 1)), o = n[e.id] >> 1;
  function a(l) {
    let c = [];
    for (let u = 0; u < i.length; u++) {
      let h = _a(l, i[u]);
      if (r[u] == 2)
        for (let f of h)
          c.push(f);
      else
        c.push(h);
    }
    return e.combine(c);
  }
  return {
    create(l) {
      for (let c of i)
        Os(l, c);
      return l.values[o] = a(l), 1;
    },
    update(l, c) {
      if (!au(l, s))
        return 0;
      let u = a(l);
      return e.compare(u, l.values[o]) ? 0 : (l.values[o] = u, 1);
    },
    reconfigure(l, c) {
      let u = au(l, i), h = c.config.facets[e.id], f = c.facet(e);
      if (h && !u && Nh(t, h))
        return l.values[o] = f, 0;
      let d = a(l);
      return e.compare(d, f) ? (l.values[o] = f, 0) : (l.values[o] = d, 1);
    }
  };
}
const Po = /* @__PURE__ */ K.define({ static: !0 });
class mt {
  constructor(e, t, i, r, s) {
    this.id = e, this.createF = t, this.updateF = i, this.compareF = r, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new mt(Mh++, e.create, e.update, e.compare || ((i, r) => i === r), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(Po).find((i) => i.field == this);
    return (t?.create || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (i) => (i.values[t] = this.create(i), 1),
      update: (i, r) => {
        let s = i.values[t], o = this.updateF(s, r);
        return this.compareF(s, o) ? 0 : (i.values[t] = o, 1);
      },
      reconfigure: (i, r) => {
        let s = i.facet(Po), o = r.facet(Po), a;
        return (a = s.find((l) => l.field == this)) && a != o.find((l) => l.field == this) ? (i.values[t] = a.create(i), 1) : r.config.address[this.id] != null ? (i.values[t] = r.field(this), 0) : (i.values[t] = this.create(i), 1);
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, Po.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const Ai = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Jr(n) {
  return (e) => new Bb(e, n);
}
const ri = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Jr(Ai.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Jr(Ai.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Jr(Ai.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Jr(Ai.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Jr(Ai.lowest)
};
class Bb {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}
class sl {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new lu(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return sl.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class lu {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}
class Ea {
  constructor(e, t, i, r, s, o) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = i, this.address = r, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < i.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, i) {
    let r = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let f of rA(e, t, o))
      f instanceof mt ? r.push(f) : (s[f.facet.id] || (s[f.facet.id] = [])).push(f);
    let a = /* @__PURE__ */ Object.create(null), l = [], c = [];
    for (let f of r)
      a[f.id] = c.length << 1, c.push((d) => f.slot(d));
    let u = i?.config.facets;
    for (let f in s) {
      let d = s[f], p = d[0].facet, m = u && u[f] || [];
      if (d.every(
        (O) => O.type == 0
        /* Provider.Static */
      ))
        if (a[p.id] = l.length << 1 | 1, Nh(m, d))
          l.push(i.facet(p));
        else {
          let O = p.combine(d.map((g) => g.value));
          l.push(i && p.compare(O, i.facet(p)) ? i.facet(p) : O);
        }
      else {
        for (let O of d)
          O.type == 0 ? (a[O.id] = l.length << 1 | 1, l.push(O.value)) : (a[O.id] = c.length << 1, c.push((g) => O.dynamicSlot(g)));
        a[p.id] = c.length << 1, c.push((O) => iA(O, p, d));
      }
    }
    let h = c.map((f) => f(a));
    return new Ea(e, o, h, a, l, s);
  }
}
function rA(n, e, t) {
  let i = [[], [], [], [], []], r = /* @__PURE__ */ new Map();
  function s(o, a) {
    let l = r.get(o);
    if (l != null) {
      if (l <= a)
        return;
      let c = i[l].indexOf(o);
      c > -1 && i[l].splice(c, 1), o instanceof lu && t.delete(o.compartment);
    }
    if (r.set(o, a), Array.isArray(o))
      for (let c of o)
        s(c, a);
    else if (o instanceof lu) {
      if (t.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let c = e.get(o.compartment) || o.inner;
      t.set(o.compartment, c), s(c, a);
    } else if (o instanceof Bb)
      s(o.inner, o.prec);
    else if (o instanceof mt)
      i[a].push(o), o.provides && s(o.provides, a);
    else if (o instanceof ra)
      i[a].push(o), o.facet.extensions && s(o.facet.extensions, Ai.default);
    else {
      let c = o.extension;
      if (!c)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(c, a);
    }
  }
  return s(n, Ai.default), i.reduce((o, a) => o.concat(a));
}
function Os(n, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, i = n.status[t];
  if (i == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i & 2)
    return i;
  n.status[t] = 4;
  let r = n.computeSlot(n, n.config.dynamicSlots[t]);
  return n.status[t] = 2 | r;
}
function _a(n, e) {
  return e & 1 ? n.config.staticValues[e >> 1] : n.values[e >> 1];
}
const zb = /* @__PURE__ */ K.define(), cu = /* @__PURE__ */ K.define({
  combine: (n) => n.some((e) => e),
  static: !0
}), Zb = /* @__PURE__ */ K.define({
  combine: (n) => n.length ? n[0] : void 0,
  static: !0
}), Xb = /* @__PURE__ */ K.define(), qb = /* @__PURE__ */ K.define(), Vb = /* @__PURE__ */ K.define(), Yb = /* @__PURE__ */ K.define({
  combine: (n) => n.length ? n[0] : !1
});
class Bn {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new sA();
  }
}
class sA {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new Bn(this, e);
  }
}
class oA {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new me(this, e);
  }
}
class me {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new me(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new oA(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let i = [];
    for (let r of e) {
      let s = r.map(t);
      s && i.push(s);
    }
    return i;
  }
}
me.reconfigure = /* @__PURE__ */ me.define();
me.appendConfig = /* @__PURE__ */ me.define();
class ot {
  constructor(e, t, i, r, s, o) {
    this.startState = e, this.changes = t, this.selection = i, this.effects = r, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, i && Db(i, t.newLength), s.some((a) => a.type == ot.time) || (this.annotations = s.concat(ot.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, t, i, r, s, o) {
    return new ot(e, t, i, r, s, o);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(ot.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
}
ot.time = /* @__PURE__ */ Bn.define();
ot.userEvent = /* @__PURE__ */ Bn.define();
ot.addToHistory = /* @__PURE__ */ Bn.define();
ot.remote = /* @__PURE__ */ Bn.define();
function aA(n, e) {
  let t = [];
  for (let i = 0, r = 0; ; ) {
    let s, o;
    if (i < n.length && (r == e.length || e[r] >= n[i]))
      s = n[i++], o = n[i++];
    else if (r < e.length)
      s = e[r++], o = e[r++];
    else
      return t;
    !t.length || t[t.length - 1] < s ? t.push(s, o) : t[t.length - 1] < o && (t[t.length - 1] = o);
  }
}
function Fb(n, e, t) {
  var i;
  let r, s, o;
  return t ? (r = e.changes, s = ct.empty(e.changes.length), o = n.changes.compose(e.changes)) : (r = e.changes.map(n.changes), s = n.changes.mapDesc(e.changes, !0), o = n.changes.compose(r)), {
    changes: o,
    selection: e.selection ? e.selection.map(s) : (i = n.selection) === null || i === void 0 ? void 0 : i.map(r),
    effects: me.mapEffects(n.effects, r).concat(me.mapEffects(e.effects, s)),
    annotations: n.annotations.length ? n.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: n.scrollIntoView || e.scrollIntoView
  };
}
function uu(n, e, t) {
  let i = e.selection, r = lr(e.annotations);
  return e.userEvent && (r = r.concat(ot.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof ct ? e.changes : ct.of(e.changes || [], t, n.facet(Zb)),
    selection: i && (i instanceof I ? i : I.single(i.anchor, i.head)),
    effects: lr(e.effects),
    annotations: r,
    scrollIntoView: !!e.scrollIntoView
  };
}
function Ub(n, e, t) {
  let i = uu(n, e.length ? e[0] : {}, n.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1);
    let o = !!e[s].sequential;
    i = Fb(i, uu(n, e[s], o ? i.changes.newLength : n.doc.length), o);
  }
  let r = ot.create(n, i.changes, i.selection, i.effects, i.annotations, i.scrollIntoView);
  return cA(t ? lA(r) : r);
}
function lA(n) {
  let e = n.startState, t = !0;
  for (let r of e.facet(Xb)) {
    let s = r(n);
    if (s === !1) {
      t = !1;
      break;
    }
    Array.isArray(s) && (t = t === !0 ? s : aA(t, s));
  }
  if (t !== !0) {
    let r, s;
    if (t === !1)
      s = n.changes.invertedDesc, r = ct.empty(e.doc.length);
    else {
      let o = n.changes.filter(t);
      r = o.changes, s = o.filtered.mapDesc(o.changes).invertedDesc;
    }
    n = ot.create(e, r, n.selection && n.selection.map(s), me.mapEffects(n.effects, s), n.annotations, n.scrollIntoView);
  }
  let i = e.facet(qb);
  for (let r = i.length - 1; r >= 0; r--) {
    let s = i[r](n);
    s instanceof ot ? n = s : Array.isArray(s) && s.length == 1 && s[0] instanceof ot ? n = s[0] : n = Ub(e, lr(s), !1);
  }
  return n;
}
function cA(n) {
  let e = n.startState, t = e.facet(Vb), i = n;
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r](n);
    s && Object.keys(s).length && (i = Fb(i, uu(e, s, n.changes.newLength), !0));
  }
  return i == n ? n : ot.create(e, n.changes, n.selection, i.effects, i.annotations, i.scrollIntoView);
}
const uA = [];
function lr(n) {
  return n == null ? uA : Array.isArray(n) ? n : [n];
}
var We = /* @__PURE__ */ function(n) {
  return n[n.Word = 0] = "Word", n[n.Space = 1] = "Space", n[n.Other = 2] = "Other", n;
}(We || (We = {}));
const hA = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let hu;
try {
  hu = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function fA(n) {
  if (hu)
    return hu.test(n);
  for (let e = 0; e < n.length; e++) {
    let t = n[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || hA.test(t)))
      return !0;
  }
  return !1;
}
function dA(n) {
  return (e) => {
    if (!/\S/.test(e))
      return We.Space;
    if (fA(e))
      return We.Word;
    for (let t = 0; t < n.length; t++)
      if (e.indexOf(n[t]) > -1)
        return We.Word;
    return We.Other;
  };
}
class we {
  constructor(e, t, i, r, s, o) {
    this.config = e, this.doc = t, this.selection = i, this.values = r, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);
    for (let a = 0; a < this.config.dynamicSlots.length; a++)
      Os(this, a << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let i = this.config.address[e.id];
    if (i == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return Os(this, i), _a(this, i);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return Ub(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: i, compartments: r } = t;
    for (let a of e.effects)
      a.is(sl.reconfigure) ? (t && (r = /* @__PURE__ */ new Map(), t.compartments.forEach((l, c) => r.set(c, l)), t = null), r.set(a.value.compartment, a.value.extension)) : a.is(me.reconfigure) ? (t = null, i = a.value) : a.is(me.appendConfig) && (t = null, i = lr(i).concat(a.value));
    let s;
    t ? s = e.startState.values.slice() : (t = Ea.resolve(i, r, this), s = new we(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (l, c) => c.reconfigure(l, this), null).values);
    let o = e.startState.facet(cu) ? e.newSelection : e.newSelection.asSingle();
    new we(t, e.newDoc, o, s, (a, l) => l.update(a, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: I.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, i = e(t.ranges[0]), r = this.changes(i.changes), s = [i.range], o = lr(i.effects);
    for (let a = 1; a < t.ranges.length; a++) {
      let l = e(t.ranges[a]), c = this.changes(l.changes), u = c.map(r);
      for (let f = 0; f < a; f++)
        s[f] = s[f].map(u);
      let h = r.mapDesc(c, !0);
      s.push(l.range.map(h)), r = r.compose(u), o = me.mapEffects(o, u).concat(me.mapEffects(lr(l.effects), h));
    }
    return {
      changes: r,
      selection: I.create(s, t.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof ct ? e : ct.of(e, this.doc.length, this.facet(we.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return Te.of(e.split(this.facet(we.lineSeparator) || ru));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (Os(this, t), _a(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let i in e) {
        let r = e[i];
        r instanceof mt && this.config.address[r.id] != null && (t[i] = r.spec.toJSON(this.field(e[i]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, i) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let r = [];
    if (i) {
      for (let s in i)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let o = i[s], a = e[s];
          r.push(o.init((l) => o.spec.fromJSON(a, l)));
        }
    }
    return we.create({
      doc: e.doc,
      selection: I.fromJSON(e.selection),
      extensions: t.extensions ? r.concat([t.extensions]) : r
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = Ea.resolve(e.extensions || [], /* @__PURE__ */ new Map()), i = e.doc instanceof Te ? e.doc : Te.of((e.doc || "").split(t.staticFacet(we.lineSeparator) || ru)), r = e.selection ? e.selection instanceof I ? e.selection : I.single(e.selection.anchor, e.selection.head) : I.single(0);
    return Db(r, i.length), t.staticFacet(cu) || (r = r.asSingle()), new we(t, i, r, t.dynamicSlots.map(() => null), (s, o) => o.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(we.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(we.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(Yb);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let i of this.facet(we.phrases))
      if (Object.prototype.hasOwnProperty.call(i, e)) {
        e = i[e];
        break;
      }
    return t.length && (e = e.replace(/\$(\$|\d*)/g, (i, r) => {
      if (r == "$")
        return "$";
      let s = +(r || 1);
      return !s || s > t.length ? i : t[s - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, i = -1) {
    let r = [];
    for (let s of this.facet(zb))
      for (let o of s(this, t, i))
        Object.prototype.hasOwnProperty.call(o, e) && r.push(o[e]);
    return r;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return dA(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: i, length: r } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - i, a = e - i;
    for (; o > 0; ) {
      let l = xt(t, o, !1);
      if (s(t.slice(l, o)) != We.Word)
        break;
      o = l;
    }
    for (; a < r; ) {
      let l = xt(t, a);
      if (s(t.slice(a, l)) != We.Word)
        break;
      a = l;
    }
    return o == a ? null : I.range(o + i, a + i);
  }
}
we.allowMultipleSelections = cu;
we.tabSize = /* @__PURE__ */ K.define({
  combine: (n) => n.length ? n[0] : 4
});
we.lineSeparator = Zb;
we.readOnly = Yb;
we.phrases = /* @__PURE__ */ K.define({
  compare(n, e) {
    let t = Object.keys(n), i = Object.keys(e);
    return t.length == i.length && t.every((r) => n[r] == e[r]);
  }
});
we.languageData = zb;
we.changeFilter = Xb;
we.transactionFilter = qb;
we.transactionExtender = Vb;
sl.reconfigure = /* @__PURE__ */ me.define();
function zn(n, e, t = {}) {
  let i = {};
  for (let r of n)
    for (let s of Object.keys(r)) {
      let o = r[s], a = i[s];
      if (a === void 0)
        i[s] = o;
      else if (!(a === o || o === void 0)) if (Object.hasOwnProperty.call(t, s))
        i[s] = t[s](a, o);
      else
        throw new Error("Config merge conflict for field " + s);
    }
  for (let r in e)
    i[r] === void 0 && (i[r] = e[r]);
  return i;
}
class Di {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return fu.create(e, t, this);
  }
}
Di.prototype.startSide = Di.prototype.endSide = 0;
Di.prototype.point = !1;
Di.prototype.mapMode = yt.TrackDel;
let fu = class Gb {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.value = i;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Gb(e, t, i);
  }
};
function du(n, e) {
  return n.from - e.from || n.value.startSide - e.value.startSide;
}
class Ih {
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.value = i, this.maxPoint = r;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, i, r = 0) {
    let s = i ? this.to : this.from;
    for (let o = r, a = s.length; ; ) {
      if (o == a)
        return o;
      let l = o + a >> 1, c = s[l] - e || (i ? this.value[l].endSide : this.value[l].startSide) - t;
      if (l == o)
        return c >= 0 ? o : a;
      c >= 0 ? a = l : o = l + 1;
    }
  }
  between(e, t, i, r) {
    for (let s = this.findIndex(t, -1e9, !0), o = this.findIndex(i, 1e9, !1, s); s < o; s++)
      if (r(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, t) {
    let i = [], r = [], s = [], o = -1, a = -1;
    for (let l = 0; l < this.value.length; l++) {
      let c = this.value[l], u = this.from[l] + e, h = this.to[l] + e, f, d;
      if (u == h) {
        let p = t.mapPos(u, c.startSide, c.mapMode);
        if (p == null || (f = d = p, c.startSide != c.endSide && (d = t.mapPos(u, c.endSide), d < f)))
          continue;
      } else if (f = t.mapPos(u, c.startSide), d = t.mapPos(h, c.endSide), f > d || f == d && c.startSide > 0 && c.endSide <= 0)
        continue;
      (d - f || c.endSide - c.startSide) < 0 || (o < 0 && (o = f), c.point && (a = Math.max(a, d - f)), i.push(c), r.push(f - o), s.push(d - o));
    }
    return { mapped: i.length ? new Ih(r, s, i, a) : null, pos: o };
  }
}
class $e {
  constructor(e, t, i, r) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = i, this.maxPoint = r;
  }
  /**
  @internal
  */
  static create(e, t, i, r) {
    return new $e(e, t, i, r);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: i = !1, filterFrom: r = 0, filterTo: s = this.length } = e, o = e.filter;
    if (t.length == 0 && !o)
      return this;
    if (i && (t = t.slice().sort(du)), this.isEmpty)
      return t.length ? $e.of(t) : this;
    let a = new Wb(this, null, -1).goto(0), l = 0, c = [], u = new ei();
    for (; a.value || l < t.length; )
      if (l < t.length && (a.from - t[l].from || a.startSide - t[l].value.startSide) >= 0) {
        let h = t[l++];
        u.addInner(h.from, h.to, h.value) || c.push(h);
      } else a.rangeIndex == 1 && a.chunkIndex < this.chunk.length && (l == t.length || this.chunkEnd(a.chunkIndex) < t[l].from) && (!o || r > this.chunkEnd(a.chunkIndex) || s < this.chunkPos[a.chunkIndex]) && u.addChunk(this.chunkPos[a.chunkIndex], this.chunk[a.chunkIndex]) ? a.nextChunk() : ((!o || r > a.to || s < a.from || o(a.from, a.to, a.value)) && (u.addInner(a.from, a.to, a.value) || c.push(fu.create(a.from, a.to, a.value))), a.next());
    return u.finishInner(this.nextLayer.isEmpty && !c.length ? $e.empty : this.nextLayer.update({ add: c, filter: o, filterFrom: r, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], i = [], r = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let a = this.chunkPos[o], l = this.chunk[o], c = e.touchesRange(a, a + l.length);
      if (c === !1)
        r = Math.max(r, l.maxPoint), t.push(l), i.push(e.mapPos(a));
      else if (c === !0) {
        let { mapped: u, pos: h } = l.map(a, e);
        u && (r = Math.max(r, u.maxPoint), t.push(u), i.push(h));
      }
    }
    let s = this.nextLayer.map(e);
    return t.length == 0 ? s : new $e(i, t, s || $e.empty, r);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, i) {
    if (!this.isEmpty) {
      for (let r = 0; r < this.chunk.length; r++) {
        let s = this.chunkPos[r], o = this.chunk[r];
        if (t >= s && e <= s + o.length && o.between(s, e - s, t - s, i) === !1)
          return;
      }
      this.nextLayer.between(e, t, i);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return Qs.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return Qs.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, i, r, s = -1) {
    let o = e.filter((h) => h.maxPoint > 0 || !h.isEmpty && h.maxPoint >= s), a = t.filter((h) => h.maxPoint > 0 || !h.isEmpty && h.maxPoint >= s), l = op(o, a, i), c = new es(o, l, s), u = new es(a, l, s);
    i.iterGaps((h, f, d) => ap(c, h, u, f, d, r)), i.empty && i.length == 0 && ap(c, 0, u, 0, 0, r);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, i = 0, r) {
    r == null && (r = 999999999);
    let s = e.filter((u) => !u.isEmpty && t.indexOf(u) < 0), o = t.filter((u) => !u.isEmpty && e.indexOf(u) < 0);
    if (s.length != o.length)
      return !1;
    if (!s.length)
      return !0;
    let a = op(s, o), l = new es(s, a, 0).goto(i), c = new es(o, a, 0).goto(i);
    for (; ; ) {
      if (l.to != c.to || !pu(l.active, c.active) || l.point && (!c.point || !l.point.eq(c.point)))
        return !1;
      if (l.to > r)
        return !0;
      l.next(), c.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, i, r, s = -1) {
    let o = new es(e, null, s).goto(t), a = t, l = o.openStart;
    for (; ; ) {
      let c = Math.min(o.to, i);
      if (o.point) {
        let u = o.activeForPoint(o.to), h = o.pointFrom < t ? u.length + 1 : o.point.startSide < 0 ? u.length : Math.min(u.length, l);
        r.point(a, c, o.point, u, h, o.pointRank), l = Math.min(o.openEnd(c), u.length);
      } else c > a && (r.span(a, c, o.active, l), l = o.openEnd(c));
      if (o.to > i)
        return l + (o.point && o.to > i ? 1 : 0);
      a = o.to, o.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let i = new ei();
    for (let r of e instanceof fu ? [e] : t ? pA(e) : e)
      i.add(r.from, r.to, r.value);
    return i.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return $e.empty;
    let t = e[e.length - 1];
    for (let i = e.length - 2; i >= 0; i--)
      for (let r = e[i]; r != $e.empty; r = r.nextLayer)
        t = new $e(r.chunkPos, r.chunk, t, Math.max(r.maxPoint, t.maxPoint));
    return t;
  }
}
$e.empty = /* @__PURE__ */ new $e([], [], null, -1);
function pA(n) {
  if (n.length > 1)
    for (let e = n[0], t = 1; t < n.length; t++) {
      let i = n[t];
      if (du(e, i) > 0)
        return n.slice().sort(du);
      e = i;
    }
  return n;
}
$e.empty.nextLayer = $e.empty;
class ei {
  finishChunk(e) {
    this.chunks.push(new Ih(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, i) {
    this.addInner(e, t, i) || (this.nextLayer || (this.nextLayer = new ei())).add(e, t, i);
  }
  /**
  @internal
  */
  addInner(e, t, i) {
    let r = e - this.lastTo || i.startSide - this.last.endSide;
    if (r <= 0 && (e - this.lastFrom || i.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return r < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = i, this.lastFrom = e, this.lastTo = t, this.value.push(i), i.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let i = t.value.length - 1;
    return this.last = t.value[i], this.lastFrom = t.from[i] + e, this.lastTo = t.to[i] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner($e.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = $e.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
}
function op(n, e, t) {
  let i = /* @__PURE__ */ new Map();
  for (let s of n)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && i.set(s.chunk[o], s.chunkPos[o]);
  let r = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let a = i.get(s.chunk[o]);
      a != null && (t ? t.mapPos(a) : a) == s.chunkPos[o] && !t?.touchesRange(a, a + s.chunk[o].length) && r.add(s.chunk[o]);
    }
  return r;
}
class Wb {
  constructor(e, t, i, r = 0) {
    this.layer = e, this.skip = t, this.minPoint = i, this.rank = r;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, i) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let r = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(r) || this.layer.chunkEnd(this.chunkIndex) < e || r.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let r = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!i || this.rangeIndex < r) && this.setRangeIndex(r);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], i = e + t.from[this.rangeIndex];
        if (this.from = i, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class Qs {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, i = -1) {
    let r = [];
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= i && r.push(new Wb(o, t, i, s));
    return r.length == 1 ? r[0] : new Qs(r);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let i of this.heap)
      i.goto(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      Gl(this.heap, i);
    return this.next(), this;
  }
  forward(e, t) {
    for (let i of this.heap)
      i.forward(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      Gl(this.heap, i);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), Gl(this.heap, 0);
    }
  }
}
function Gl(n, e) {
  for (let t = n[e]; ; ) {
    let i = (e << 1) + 1;
    if (i >= n.length)
      break;
    let r = n[i];
    if (i + 1 < n.length && r.compare(n[i + 1]) >= 0 && (r = n[i + 1], i++), t.compare(r) < 0)
      break;
    n[i] = t, n[e] = r, e = i;
  }
}
class es {
  constructor(e, t, i) {
    this.minPoint = i, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Qs.from(e, t, i);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    Ao(this.active, e), Ao(this.activeTo, e), Ao(this.activeRank, e), this.minActive = lp(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: i, to: r, rank: s } = this.cursor;
    for (; t < this.activeRank.length && (s - this.activeRank[t] || r - this.activeTo[t]) > 0; )
      t++;
    $o(this.active, t, i), $o(this.activeTo, t, r), $o(this.activeRank, t, s), e && $o(e, t, this.cursor.from), this.minActive = lp(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let i = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let r = this.minActive;
      if (r > -1 && (this.activeTo[r] - this.cursor.from || this.active[r].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[r] > e) {
          this.to = this.activeTo[r], this.endSide = this.active[r].endSide;
          break;
        }
        this.removeActive(r), i && Ao(i, r);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let s = this.cursor.value;
          if (!s.point)
            this.addActive(i), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i) {
      this.openStart = 0;
      for (let r = i.length - 1; r >= 0 && i[r] < e; r--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let i = this.active.length - 1; i >= 0 && !(this.activeRank[i] < this.pointRank); i--)
      (this.activeTo[i] > e || this.activeTo[i] == e && this.active[i].endSide >= this.point.endSide) && t.push(this.active[i]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > e; i--)
      t++;
    return t;
  }
}
function ap(n, e, t, i, r, s) {
  n.goto(e), t.goto(i);
  let o = i + r, a = i, l = i - e;
  for (; ; ) {
    let c = n.to + l - t.to, u = c || n.endSide - t.endSide, h = u < 0 ? n.to + l : t.to, f = Math.min(h, o);
    if (n.point || t.point ? n.point && t.point && (n.point == t.point || n.point.eq(t.point)) && pu(n.activeForPoint(n.to), t.activeForPoint(t.to)) || s.comparePoint(a, f, n.point, t.point) : f > a && !pu(n.active, t.active) && s.compareRange(a, f, n.active, t.active), h > o)
      break;
    (c || n.openEnd != t.openEnd) && s.boundChange && s.boundChange(h), a = h, u <= 0 && n.next(), u >= 0 && t.next();
  }
}
function pu(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] != e[t] && !n[t].eq(e[t]))
      return !1;
  return !0;
}
function Ao(n, e) {
  for (let t = e, i = n.length - 1; t < i; t++)
    n[t] = n[t + 1];
  n.pop();
}
function $o(n, e, t) {
  for (let i = n.length - 1; i >= e; i--)
    n[i + 1] = n[i];
  n[e] = t;
}
function lp(n, e) {
  let t = -1, i = 1e9;
  for (let r = 0; r < e.length; r++)
    (e[r] - i || n[r].endSide - n[t].endSide) < 0 && (t = r, i = e[r]);
  return t;
}
function gn(n, e, t = n.length) {
  let i = 0;
  for (let r = 0; r < t && r < n.length; )
    n.charCodeAt(r) == 9 ? (i += e - i % e, r++) : (i++, r = xt(n, r));
  return i;
}
function mu(n, e, t, i) {
  for (let r = 0, s = 0; ; ) {
    if (s >= e)
      return r;
    if (r == n.length)
      break;
    s += n.charCodeAt(r) == 9 ? t - s % t : 1, r = xt(n, r);
  }
  return i === !0 ? -1 : n.length;
}
const gu = "ͼ", cp = typeof Symbol > "u" ? "__" + gu : Symbol.for(gu), Ou = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), up = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class bi {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = [];
    let { finish: i } = t || {};
    function r(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/);
    }
    function s(o, a, l, c) {
      let u = [], h = /^@(\w+)\b/.exec(o[0]), f = h && h[1] == "keyframes";
      if (h && a == null) return l.push(o[0] + ";");
      for (let d in a) {
        let p = a[d];
        if (/&/.test(d))
          s(
            d.split(/,\s*/).map((m) => o.map((O) => m.replace(/&/, O))).reduce((m, O) => m.concat(O)),
            p,
            l
          );
        else if (p && typeof p == "object") {
          if (!h) throw new RangeError("The value of a property (" + d + ") should be a primitive value.");
          s(r(d), p, u, f);
        } else p != null && u.push(d.replace(/_.*/, "").replace(/[A-Z]/g, (m) => "-" + m.toLowerCase()) + ": " + p + ";");
      }
      (u.length || f) && l.push((i && !h && !c ? o.map(i) : o).join(", ") + " {" + u.join(" ") + "}");
    }
    for (let o in e) s(r(o), e[o], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = up[cp] || 1;
    return up[cp] = e + 1, gu + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, i) {
    let r = e[Ou], s = i && i.nonce;
    r ? s && r.setNonce(s) : r = new mA(e, s), r.mount(Array.isArray(t) ? t : [t], e);
  }
}
let hp = /* @__PURE__ */ new Map();
class mA {
  constructor(e, t) {
    let i = e.ownerDocument || e, r = i.defaultView;
    if (!e.head && e.adoptedStyleSheets && r.CSSStyleSheet) {
      let s = hp.get(i);
      if (s) return e[Ou] = s;
      this.sheet = new r.CSSStyleSheet(), hp.set(i, this);
    } else
      this.styleTag = i.createElement("style"), t && this.styleTag.setAttribute("nonce", t);
    this.modules = [], e[Ou] = this;
  }
  mount(e, t) {
    let i = this.sheet, r = 0, s = 0;
    for (let o = 0; o < e.length; o++) {
      let a = e[o], l = this.modules.indexOf(a);
      if (l < s && l > -1 && (this.modules.splice(l, 1), s--, l = -1), l == -1) {
        if (this.modules.splice(s++, 0, a), i) for (let c = 0; c < a.rules.length; c++)
          i.insertRule(a.rules[c], r++);
      } else {
        for (; s < l; ) r += this.modules[s++].rules.length;
        r += a.rules.length, s++;
      }
    }
    if (i)
      t.adoptedStyleSheets.indexOf(this.sheet) < 0 && (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
    else {
      let o = "";
      for (let l = 0; l < this.modules.length; l++)
        o += this.modules[l].getRules() + `
`;
      this.styleTag.textContent = o;
      let a = t.head || t;
      this.styleTag.parentNode != a && a.insertBefore(this.styleTag, a.firstChild);
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var yi = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, Cs = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, gA = typeof navigator < "u" && /Mac/.test(navigator.platform), OA = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var bt = 0; bt < 10; bt++) yi[48 + bt] = yi[96 + bt] = String(bt);
for (var bt = 1; bt <= 24; bt++) yi[bt + 111] = "F" + bt;
for (var bt = 65; bt <= 90; bt++)
  yi[bt] = String.fromCharCode(bt + 32), Cs[bt] = String.fromCharCode(bt);
for (var Wl in yi) Cs.hasOwnProperty(Wl) || (Cs[Wl] = yi[Wl]);
function bA(n) {
  var e = gA && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || OA && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? Cs : yi)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
function De() {
  var n = arguments[0];
  typeof n == "string" && (n = document.createElement(n));
  var e = 1, t = arguments[1];
  if (t && typeof t == "object" && t.nodeType == null && !Array.isArray(t)) {
    for (var i in t) if (Object.prototype.hasOwnProperty.call(t, i)) {
      var r = t[i];
      typeof r == "string" ? n.setAttribute(i, r) : r != null && (n[i] = r);
    }
    e++;
  }
  for (; e < arguments.length; e++) jb(n, arguments[e]);
  return n;
}
function jb(n, e) {
  if (typeof e == "string")
    n.appendChild(document.createTextNode(e));
  else if (e != null) if (e.nodeType != null)
    n.appendChild(e);
  else if (Array.isArray(e))
    for (var t = 0; t < e.length; t++) jb(n, e[t]);
  else
    throw new RangeError("Unsupported child node: " + e);
}
function Ts(n) {
  let e;
  return n.nodeType == 11 ? e = n.getSelection ? n : n.ownerDocument : e = n, e.getSelection();
}
function bu(n, e) {
  return e ? n == e || n.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function sa(n, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return bu(n, e.anchorNode);
  } catch {
    return !1;
  }
}
function gr(n) {
  return n.nodeType == 3 ? zi(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function bs(n, e, t, i) {
  return t ? fp(n, e, t, i, -1) || fp(n, e, t, i, 1) : !1;
}
function Bi(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}
function Qa(n) {
  return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
function fp(n, e, t, i, r) {
  for (; ; ) {
    if (n == t && e == i)
      return !0;
    if (e == (r < 0 ? 0 : Ln(n))) {
      if (n.nodeName == "DIV")
        return !1;
      let s = n.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = Bi(n) + (r < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (r < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false")
        return !1;
      e = r < 0 ? Ln(n) : 0;
    } else
      return !1;
  }
}
function Ln(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function Js(n, e) {
  let t = e ? n.left : n.right;
  return { left: t, right: t, top: n.top, bottom: n.bottom };
}
function yA(n) {
  let e = n.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  };
}
function Hb(n, e) {
  let t = e.width / n.offsetWidth, i = e.height / n.offsetHeight;
  return (t > 0.995 && t < 1.005 || !isFinite(t) || Math.abs(e.width - n.offsetWidth) < 1) && (t = 1), (i > 0.995 && i < 1.005 || !isFinite(i) || Math.abs(e.height - n.offsetHeight) < 1) && (i = 1), { scaleX: t, scaleY: i };
}
function xA(n, e, t, i, r, s, o, a) {
  let l = n.ownerDocument, c = l.defaultView || window;
  for (let u = n, h = !1; u && !h; )
    if (u.nodeType == 1) {
      let f, d = u == l.body, p = 1, m = 1;
      if (d)
        f = yA(c);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(u).position) && (h = !0), u.scrollHeight <= u.clientHeight && u.scrollWidth <= u.clientWidth) {
          u = u.assignedSlot || u.parentNode;
          continue;
        }
        let y = u.getBoundingClientRect();
        ({ scaleX: p, scaleY: m } = Hb(u, y)), f = {
          left: y.left,
          right: y.left + u.clientWidth * p,
          top: y.top,
          bottom: y.top + u.clientHeight * m
        };
      }
      let O = 0, g = 0;
      if (r == "nearest")
        e.top < f.top ? (g = e.top - (f.top + o), t > 0 && e.bottom > f.bottom + g && (g = e.bottom - f.bottom + o)) : e.bottom > f.bottom && (g = e.bottom - f.bottom + o, t < 0 && e.top - g < f.top && (g = e.top - (f.top + o)));
      else {
        let y = e.bottom - e.top, S = f.bottom - f.top;
        g = (r == "center" && y <= S ? e.top + y / 2 - S / 2 : r == "start" || r == "center" && t < 0 ? e.top - o : e.bottom - S + o) - f.top;
      }
      if (i == "nearest" ? e.left < f.left ? (O = e.left - (f.left + s), t > 0 && e.right > f.right + O && (O = e.right - f.right + s)) : e.right > f.right && (O = e.right - f.right + s, t < 0 && e.left < f.left + O && (O = e.left - (f.left + s))) : O = (i == "center" ? e.left + (e.right - e.left) / 2 - (f.right - f.left) / 2 : i == "start" == a ? e.left - s : e.right - (f.right - f.left) + s) - f.left, O || g)
        if (d)
          c.scrollBy(O, g);
        else {
          let y = 0, S = 0;
          if (g) {
            let _ = u.scrollTop;
            u.scrollTop += g / m, S = (u.scrollTop - _) * m;
          }
          if (O) {
            let _ = u.scrollLeft;
            u.scrollLeft += O / p, y = (u.scrollLeft - _) * p;
          }
          e = {
            left: e.left - y,
            top: e.top - S,
            right: e.right - y,
            bottom: e.bottom - S
          }, y && Math.abs(y - O) < 1 && (i = "nearest"), S && Math.abs(S - g) < 1 && (r = "nearest");
        }
      if (d)
        break;
      (e.top < f.top || e.bottom > f.bottom || e.left < f.left || e.right > f.right) && (e = {
        left: Math.max(e.left, f.left),
        right: Math.min(e.right, f.right),
        top: Math.max(e.top, f.top),
        bottom: Math.min(e.bottom, f.bottom)
      }), u = u.assignedSlot || u.parentNode;
    } else if (u.nodeType == 11)
      u = u.host;
    else
      break;
}
function kA(n) {
  let e = n.ownerDocument, t, i;
  for (let r = n.parentNode; r && !(r == e.body || t && i); )
    if (r.nodeType == 1)
      !i && r.scrollHeight > r.clientHeight && (i = r), !t && r.scrollWidth > r.clientWidth && (t = r), r = r.assignedSlot || r.parentNode;
    else if (r.nodeType == 11)
      r = r.host;
    else
      break;
  return { x: t, y: i };
}
class SA {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: t, focusNode: i } = e;
    this.set(t, Math.min(e.anchorOffset, t ? Ln(t) : 0), i, Math.min(e.focusOffset, i ? Ln(i) : 0));
  }
  set(e, t, i, r) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = i, this.focusOffset = r;
  }
}
let Hi = null;
function Kb(n) {
  if (n.setActive)
    return n.setActive();
  if (Hi)
    return n.focus(Hi);
  let e = [];
  for (let t = n; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (n.focus(Hi == null ? {
    get preventScroll() {
      return Hi = { preventScroll: !0 }, !0;
    }
  } : void 0), !Hi) {
    Hi = !1;
    for (let t = 0; t < e.length; ) {
      let i = e[t++], r = e[t++], s = e[t++];
      i.scrollTop != r && (i.scrollTop = r), i.scrollLeft != s && (i.scrollLeft = s);
    }
  }
}
let dp;
function zi(n, e, t = e) {
  let i = dp || (dp = document.createRange());
  return i.setEnd(n, t), i.setStart(n, e), i;
}
function cr(n, e, t, i) {
  let r = { key: e, code: e, keyCode: t, which: t, cancelable: !0 };
  i && ({ altKey: r.altKey, ctrlKey: r.ctrlKey, shiftKey: r.shiftKey, metaKey: r.metaKey } = i);
  let s = new KeyboardEvent("keydown", r);
  s.synthetic = !0, n.dispatchEvent(s);
  let o = new KeyboardEvent("keyup", r);
  return o.synthetic = !0, n.dispatchEvent(o), s.defaultPrevented || o.defaultPrevented;
}
function wA(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host))
      return n;
    n = n.assignedSlot || n.parentNode;
  }
  return null;
}
function Jb(n) {
  for (; n.attributes.length; )
    n.removeAttributeNode(n.attributes[0]);
}
function vA(n, e) {
  let t = e.focusNode, i = e.focusOffset;
  if (!t || e.anchorNode != t || e.anchorOffset != i)
    return !1;
  for (i = Math.min(i, Ln(t)); ; )
    if (i) {
      if (t.nodeType != 1)
        return !1;
      let r = t.childNodes[i - 1];
      r.contentEditable == "false" ? i-- : (t = r, i = Ln(t));
    } else {
      if (t == n)
        return !0;
      i = Bi(t), t = t.parentNode;
    }
}
function ey(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4);
}
function ty(n, e) {
  for (let t = n, i = e; ; ) {
    if (t.nodeType == 3 && i > 0)
      return { node: t, offset: i };
    if (t.nodeType == 1 && i > 0) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[i - 1], i = Ln(t);
    } else if (t.parentNode && !Qa(t))
      i = Bi(t), t = t.parentNode;
    else
      return null;
  }
}
function ny(n, e) {
  for (let t = n, i = e; ; ) {
    if (t.nodeType == 3 && i < t.nodeValue.length)
      return { node: t, offset: i };
    if (t.nodeType == 1 && i < t.childNodes.length) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[i], i = 0;
    } else if (t.parentNode && !Qa(t))
      i = Bi(t) + 1, t = t.parentNode;
    else
      return null;
  }
}
class wt {
  constructor(e, t, i = !0) {
    this.node = e, this.offset = t, this.precise = i;
  }
  static before(e, t) {
    return new wt(e.parentNode, Bi(e), t);
  }
  static after(e, t) {
    return new wt(e.parentNode, Bi(e) + 1, t);
  }
}
const Lh = [];
class ze {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let i of this.children) {
      if (i == e)
        return t;
      t += i.length + i.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, t) {
    if (this.flags & 2) {
      let i = this.dom, r = null, s;
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (s = r ? r.nextSibling : i.firstChild)) {
            let a = ze.get(s);
            (!a || !a.parent && a.canReuseDOM(o)) && o.reuseDOM(s);
          }
          o.sync(e, t), o.flags &= -8;
        }
        if (s = r ? r.nextSibling : i.firstChild, t && !t.written && t.node == i && s != o.dom && (t.written = !0), o.dom.parentNode == i)
          for (; s && s != o.dom; )
            s = pp(s);
        else
          i.insertBefore(o.dom, s);
        r = o.dom;
      }
      for (s = r ? r.nextSibling : i.firstChild, s && t && t.node == i && (t.written = !0); s; )
        s = pp(s);
    } else if (this.flags & 1)
      for (let i of this.children)
        i.flags & 7 && (i.sync(e, t), i.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let i;
    if (e == this.dom)
      i = this.dom.childNodes[t];
    else {
      let r = Ln(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        r == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? r = -1 : r = 1), e = s;
      }
      r < 0 ? i = e : i = e.nextSibling;
    }
    if (i == this.dom.firstChild)
      return 0;
    for (; i && !ze.get(i); )
      i = i.nextSibling;
    if (!i)
      return this.length;
    for (let r = 0, s = 0; ; r++) {
      let o = this.children[r];
      if (o.dom == i)
        return s;
      s += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, t, i = 0) {
    let r = -1, s = -1, o = -1, a = -1;
    for (let l = 0, c = i, u = i; l < this.children.length; l++) {
      let h = this.children[l], f = c + h.length;
      if (c < e && f > t)
        return h.domBoundsAround(e, t, c);
      if (f >= e && r == -1 && (r = l, s = c), c > t && h.dom.parentNode == this.dom) {
        o = l, a = u;
        break;
      }
      u = f, c = f + h.breakAfter;
    }
    return {
      from: s,
      to: a < 0 ? i + this.length : a,
      startDOM: (r ? this.children[r - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.flags |= 2), t.flags & 1)
        return;
      t.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, i = Lh) {
    this.markDirty();
    for (let r = e; r < t; r++) {
      let s = this.children[r];
      s.parent == this && i.indexOf(s) < 0 && s.destroy();
    }
    i.length < 250 ? this.children.splice(e, t - e, ...i) : this.children = [].concat(this.children.slice(0, e), i, this.children.slice(t));
    for (let r = 0; r < i.length; r++)
      i[r].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new iy(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, t, i, r, s, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
}
ze.prototype.breakAfter = 0;
function pp(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class iy {
  constructor(e, t, i) {
    this.children = e, this.pos = t, this.i = i, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let i = this.children[--this.i];
      this.pos -= i.length + i.breakAfter;
    }
  }
}
function ry(n, e, t, i, r, s, o, a, l) {
  let { children: c } = n, u = c.length ? c[e] : null, h = s.length ? s[s.length - 1] : null, f = h ? h.breakAfter : o;
  if (!(e == i && u && !o && !f && s.length < 2 && u.merge(t, r, s.length ? h : null, t == 0, a, l))) {
    if (i < c.length) {
      let d = c[i];
      d && (r < d.length || d.breakAfter && h?.breakAfter) ? (e == i && (d = d.split(r), r = 0), !f && h && d.merge(0, r, h, !0, 0, l) ? s[s.length - 1] = d : ((r || d.children.length && !d.children[0].length) && d.merge(0, r, null, !1, 0, l), s.push(d))) : d?.breakAfter && (h ? h.breakAfter = 1 : o = 1), i++;
    }
    for (u && (u.breakAfter = o, t > 0 && (!o && s.length && u.merge(t, u.length, s[0], !1, a, 0) ? u.breakAfter = s.shift().breakAfter : (t < u.length || u.children.length && u.children[u.children.length - 1].length == 0) && u.merge(t, u.length, null, !1, a, 0), e++)); e < i && s.length; )
      if (c[i - 1].become(s[s.length - 1]))
        i--, s.pop(), l = s.length ? 0 : a;
      else if (c[e].become(s[0]))
        e++, s.shift(), a = s.length ? 0 : l;
      else
        break;
    !s.length && e && i < c.length && !c[e - 1].breakAfter && c[i].merge(0, 0, c[e - 1], !1, a, l) && e--, (e < i || s.length) && n.replaceChildren(e, i, s);
  }
}
function sy(n, e, t, i, r, s) {
  let o = n.childCursor(), { i: a, off: l } = o.findPos(t, 1), { i: c, off: u } = o.findPos(e, -1), h = e - t;
  for (let f of i)
    h += f.length;
  n.length += h, ry(n, c, u, a, l, i, 0, r, s);
}
let Dt = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, yu = typeof document < "u" ? document : { documentElement: { style: {} } };
const xu = /* @__PURE__ */ /Edge\/(\d+)/.exec(Dt.userAgent), oy = /* @__PURE__ */ /MSIE \d/.test(Dt.userAgent), ku = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Dt.userAgent), ol = !!(oy || ku || xu), mp = !ol && /* @__PURE__ */ /gecko\/(\d+)/i.test(Dt.userAgent), jl = !ol && /* @__PURE__ */ /Chrome\/(\d+)/.exec(Dt.userAgent), EA = "webkitFontSmoothing" in yu.documentElement.style, ay = !ol && /* @__PURE__ */ /Apple Computer/.test(Dt.vendor), gp = ay && (/* @__PURE__ */ /Mobile\/\w+/.test(Dt.userAgent) || Dt.maxTouchPoints > 2);
var H = {
  mac: gp || /* @__PURE__ */ /Mac/.test(Dt.platform),
  windows: /* @__PURE__ */ /Win/.test(Dt.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(Dt.platform),
  ie: ol,
  ie_version: oy ? yu.documentMode || 6 : ku ? +ku[1] : xu ? +xu[1] : 0,
  gecko: mp,
  gecko_version: mp ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(Dt.userAgent) || [0, 0])[1] : 0,
  chrome: !!jl,
  chrome_version: jl ? +jl[1] : 0,
  ios: gp,
  android: /* @__PURE__ */ /Android\b/.test(Dt.userAgent),
  safari: ay,
  webkit_version: EA ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(Dt.userAgent) || [0, 0])[1] : 0,
  tabSize: yu.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const _A = 256;
class On extends ze {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, t) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, i) {
    return this.flags & 8 || i && (!(i instanceof On) || this.length - (t - e) + i.length > _A || i.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (i ? i.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new On(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t.flags |= this.flags & 8, t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new wt(this.dom, e);
  }
  domBoundsAround(e, t, i) {
    return { from: i, to: i + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return QA(this.dom, e, t);
  }
}
class ti extends ze {
  constructor(e, t = [], i = 0) {
    super(), this.mark = e, this.children = t, this.length = i;
    for (let r of t)
      r.setParent(this);
  }
  setAttrs(e) {
    if (Jb(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, t);
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof ti && i.mark.eq(this.mark)) || e && s <= 0 || t < this.length && o <= 0) ? !1 : (sy(this, e, t, i ? i.children.slice() : [], s - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], i = 0, r = -1, s = 0;
    for (let a of this.children) {
      let l = i + a.length;
      l > e && t.push(i < e ? a.split(e - i) : a), r < 0 && i >= e && (r = s), i = l, s++;
    }
    let o = this.length - e;
    return this.length = e, r > -1 && (this.children.length = r, this.markDirty()), new ti(this.mark, t, o);
  }
  domAtPos(e) {
    return ly(this, e);
  }
  coordsAt(e, t) {
    return uy(this, e, t);
  }
}
function QA(n, e, t) {
  let i = n.nodeValue.length;
  e > i && (e = i);
  let r = e, s = e, o = 0;
  e == 0 && t < 0 || e == i && t >= 0 ? H.chrome || H.gecko || (e ? (r--, o = 1) : s < i && (s++, o = -1)) : t < 0 ? r-- : s < i && s++;
  let a = zi(n, r, s).getClientRects();
  if (!a.length)
    return null;
  let l = a[(o ? o < 0 : t >= 0) ? 0 : a.length - 1];
  return H.safari && !o && l.width == 0 && (l = Array.prototype.find.call(a, (c) => c.width) || l), o ? Js(l, o < 0) : l || null;
}
class mi extends ze {
  static create(e, t, i) {
    return new mi(e, t, i);
  }
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.side = i, this.prevWidget = null;
  }
  split(e) {
    let t = mi.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof mi) || !this.widget.compare(i.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e instanceof mi && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Te.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: t } = e, i = t && t.state.doc, r = this.posAtStart;
    return i ? i.slice(r, r + this.length) : Te.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? wt.before(this.dom) : wt.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t);
    if (i)
      return i;
    let r = this.dom.getClientRects(), s = null;
    if (!r.length)
      return null;
    let o = this.side ? this.side < 0 : e > 0;
    for (let a = o ? r.length - 1 : 0; s = r[a], !(e > 0 ? a == 0 : a == r.length - 1 || s.top < s.bottom); a += o ? -1 : 1)
      ;
    return Js(s, !o);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Or extends ze {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof Or && e.side == this.side;
  }
  split() {
    return new Or(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? wt.before(this.dom) : wt.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Te.empty;
  }
  get isHidden() {
    return !0;
  }
}
On.prototype.children = mi.prototype.children = Or.prototype.children = Lh;
function ly(n, e) {
  let t = n.dom, { children: i } = n, r = 0;
  for (let s = 0; r < i.length; r++) {
    let o = i[r], a = s + o.length;
    if (!(a == s && o.getSide() <= 0)) {
      if (e > s && e < a && o.dom.parentNode == t)
        return o.domAtPos(e - s);
      if (e <= s)
        break;
      s = a;
    }
  }
  for (let s = r; s > 0; s--) {
    let o = i[s - 1];
    if (o.dom.parentNode == t)
      return o.domAtPos(o.length);
  }
  for (let s = r; s < i.length; s++) {
    let o = i[s];
    if (o.dom.parentNode == t)
      return o.domAtPos(0);
  }
  return new wt(t, 0);
}
function cy(n, e, t) {
  let i, { children: r } = n;
  t > 0 && e instanceof ti && r.length && (i = r[r.length - 1]) instanceof ti && i.mark.eq(e.mark) ? cy(i, e.children[0], t - 1) : (r.push(e), e.setParent(n)), n.length += e.length;
}
function uy(n, e, t) {
  let i = null, r = -1, s = null, o = -1;
  function a(c, u) {
    for (let h = 0, f = 0; h < c.children.length && f <= u; h++) {
      let d = c.children[h], p = f + d.length;
      p >= u && (d.children.length ? a(d, u - f) : (!s || s.isHidden && (t > 0 || TA(s, d))) && (p > u || f == p && d.getSide() > 0) ? (s = d, o = u - f) : (f < u || f == p && d.getSide() < 0 && !d.isHidden) && (i = d, r = u - f)), f = p;
    }
  }
  a(n, e);
  let l = (t < 0 ? i : s) || i || s;
  return l ? l.coordsAt(Math.max(0, l == i ? r : o), t) : CA(n);
}
function CA(n) {
  let e = n.dom.lastChild;
  if (!e)
    return n.dom.getBoundingClientRect();
  let t = gr(e);
  return t[t.length - 1] || null;
}
function TA(n, e) {
  let t = n.coordsAt(0, 1), i = e.coordsAt(0, 1);
  return t && i && i.top < t.bottom;
}
function Su(n, e) {
  for (let t in n)
    t == "class" && e.class ? e.class += " " + n.class : t == "style" && e.style ? e.style += ";" + n.style : e[t] = n[t];
  return e;
}
const Op = /* @__PURE__ */ Object.create(null);
function Ca(n, e, t) {
  if (n == e)
    return !0;
  n || (n = Op), e || (e = Op);
  let i = Object.keys(n), r = Object.keys(e);
  if (i.length - (t && i.indexOf(t) > -1 ? 1 : 0) != r.length - (t && r.indexOf(t) > -1 ? 1 : 0))
    return !1;
  for (let s of i)
    if (s != t && (r.indexOf(s) == -1 || n[s] !== e[s]))
      return !1;
  return !0;
}
function wu(n, e, t) {
  let i = !1;
  if (e)
    for (let r in e)
      t && r in t || (i = !0, r == "style" ? n.style.cssText = "" : n.removeAttribute(r));
  if (t)
    for (let r in t)
      e && e[r] == t[r] || (i = !0, r == "style" ? n.style.cssText = t[r] : n.setAttribute(r, t[r]));
  return i;
}
function PA(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t = 0; t < n.attributes.length; t++) {
    let i = n.attributes[t];
    e[i.name] = i.value;
  }
  return e;
}
class Zn {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, i) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var At = /* @__PURE__ */ function(n) {
  return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(At || (At = {}));
class ae extends Di {
  constructor(e, t, i, r) {
    super(), this.startSide = e, this.endSide = t, this.widget = i, this.spec = r;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new eo(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)), i = !!e.block;
    return t += i && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new xi(e, t, t, i, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, i, r;
    if (e.isBlockGap)
      i = -5e8, r = 4e8;
    else {
      let { start: s, end: o } = hy(e, t);
      i = (s ? t ? -3e8 : -1 : 5e8) - 1, r = (o ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new xi(e, i, r, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new to(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return $e.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
ae.none = $e.empty;
class eo extends ae {
  constructor(e) {
    let { start: t, end: i } = hy(e);
    super(t ? -1 : 5e8, i ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var t, i;
    return this == e || e instanceof eo && this.tagName == e.tagName && (this.class || ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) == (e.class || ((i = e.attrs) === null || i === void 0 ? void 0 : i.class)) && Ca(this.attrs, e.attrs, "class");
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
}
eo.prototype.point = !1;
class to extends ae {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof to && this.spec.class == e.spec.class && Ca(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
}
to.prototype.mapMode = yt.TrackBefore;
to.prototype.point = !0;
class xi extends ae {
  constructor(e, t, i, r, s, o) {
    super(t, i, s, e), this.block = r, this.isReplace = o, this.mapMode = r ? t <= 0 ? yt.TrackBefore : yt.TrackAfter : yt.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? At.WidgetRange : this.startSide <= 0 ? At.WidgetBefore : At.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof xi && AA(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
}
xi.prototype.point = !0;
function hy(n, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: i } = n;
  return t == null && (t = n.inclusive), i == null && (i = n.inclusive), { start: t ?? e, end: i ?? e };
}
function AA(n, e) {
  return n == e || !!(n && e && n.compare(e));
}
function oa(n, e, t, i = 0) {
  let r = t.length - 1;
  r >= 0 && t[r] + i >= n ? t[r] = Math.max(t[r], e) : t.push(n, e);
}
class st extends ze {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, i, r, s, o) {
    if (i) {
      if (!(i instanceof st))
        return !1;
      this.dom || i.transferDOM(this);
    }
    return r && this.setDeco(i ? i.attrs : null), sy(this, e, t, i ? i.children.slice() : [], s, o), !0;
  }
  split(e) {
    let t = new st();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i, off: r } = this.childPos(e);
    r && (t.append(this.children[i].split(r), 0), this.children[i].merge(r, this.children[i].length, null, !1, 0, 0), i++);
    for (let s = i; s < this.children.length; s++)
      t.append(this.children[s], 0);
    for (; i > 0 && this.children[i - 1].length == 0; )
      this.children[--i].destroy();
    return this.children.length = i, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    Ca(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    cy(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, i = e.spec.class;
    t && (this.attrs = Su(t, this.attrs || {})), i && (this.attrs = Su({ class: i }, this.attrs || {}));
  }
  domAtPos(e) {
    return ly(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    var i;
    this.dom ? this.flags & 4 && (Jb(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (wu(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, t);
    let r = this.dom.lastChild;
    for (; r && ze.get(r) instanceof ti; )
      r = r.lastChild;
    if (!r || !this.length || r.nodeName != "BR" && ((i = ze.get(r)) === null || i === void 0 ? void 0 : i.isEditable) == !1 && (!H.ios || !this.children.some((s) => s instanceof On))) {
      let s = document.createElement("BR");
      s.cmIgnore = !0, this.dom.appendChild(s);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, t;
    for (let i of this.children) {
      if (!(i instanceof On) || /[^ -~]/.test(i.text))
        return null;
      let r = gr(i.dom);
      if (r.length != 1)
        return null;
      e += r[0].width, t = r[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: t
    } : null;
  }
  coordsAt(e, t) {
    let i = uy(this, e, t);
    if (!this.children.length && i && this.parent) {
      let { heightOracle: r } = this.parent.view.viewState, s = i.bottom - i.top;
      if (Math.abs(s - r.lineHeight) < 2 && r.textHeight < s) {
        let o = (s - r.textHeight) / 2;
        return { top: i.top + o, bottom: i.bottom - o, left: i.left, right: i.left };
      }
    }
    return i;
  }
  become(e) {
    return e instanceof st && this.children.length == 0 && e.children.length == 0 && Ca(this.attrs, e.attrs) && this.breakAfter == e.breakAfter;
  }
  covers() {
    return !0;
  }
  static find(e, t) {
    for (let i = 0, r = 0; i < e.children.length; i++) {
      let s = e.children[i], o = r + s.length;
      if (o >= t) {
        if (s instanceof st)
          return s;
        if (o > t)
          break;
      }
      r = o + s.breakAfter;
    }
    return null;
  }
}
class Kn extends ze {
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.deco = i, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof Kn) || !this.widget.compare(i.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? wt.before(this.dom) : wt.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let i = new Kn(this.widget, t, this.deco);
    return i.breakAfter = this.breakAfter, i;
  }
  get children() {
    return Lh;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Te.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof Kn && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t);
    return i || (this.widget instanceof vu ? null : Js(this.dom.getBoundingClientRect(), this.length ? e == 0 : t <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: t, endSide: i } = this.deco;
    return t == i ? !1 : e < 0 ? t < 0 : i > 0;
  }
}
class vu extends Zn {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}
class ys {
  constructor(e, t, i, r) {
    this.doc = e, this.pos = t, this.end = i, this.disallowBlockEffectsFor = r, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof Kn && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new st()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(Ro(new Or(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Kn) && this.getLine();
  }
  buildText(e, t, i) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: a } = this.cursor.next(this.skip);
        if (this.skip = 0, a)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let r = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(t.slice(t.length - i)), this.getLine().append(Ro(new On(this.text.slice(this.textOff, this.textOff + r)), t), i), this.atCursorPos = !0, this.textOff += r, e -= r, i = 0;
    }
  }
  span(e, t, i, r) {
    this.buildText(t - e, i, r), this.pos = t, this.openStart < 0 && (this.openStart = r);
  }
  point(e, t, i, r, s, o) {
    if (this.disallowBlockEffectsFor[o] && i instanceof xi) {
      if (i.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let a = t - e;
    if (i instanceof xi)
      if (i.block)
        i.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Kn(i.widget || br.block, a, i));
      else {
        let l = mi.create(i.widget || br.inline, a, a ? 0 : i.startSide), c = this.atCursorPos && !l.isEditable && s <= r.length && (e < t || i.startSide > 0), u = !l.isEditable && (e < t || s > r.length || i.startSide <= 0), h = this.getLine();
        this.pendingBuffer == 2 && !c && !l.isEditable && (this.pendingBuffer = 0), this.flushBuffer(r), c && (h.append(Ro(new Or(1), r), s), s = r.length + Math.max(0, s - r.length)), h.append(Ro(l, r), s), this.atCursorPos = u, this.pendingBuffer = u ? e < t || s > r.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = r.slice());
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i);
    a && (this.textOff + a <= this.text.length ? this.textOff += a : (this.skip += a - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = s);
  }
  static build(e, t, i, r, s) {
    let o = new ys(e, t, i, s);
    return o.openEnd = $e.spans(r, t, i, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
}
function Ro(n, e) {
  for (let t of e)
    n = new ti(t, [n], n.length);
  return n;
}
class br extends Zn {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
br.inline = /* @__PURE__ */ new br("span");
br.block = /* @__PURE__ */ new br("div");
var Ge = /* @__PURE__ */ function(n) {
  return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(Ge || (Ge = {}));
const Zi = Ge.LTR, Dh = Ge.RTL;
function fy(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    e.push(1 << +n[t]);
  return e;
}
const $A = /* @__PURE__ */ fy("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), RA = /* @__PURE__ */ fy("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), Eu = /* @__PURE__ */ Object.create(null), wn = [];
for (let n of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ n.charCodeAt(0), t = /* @__PURE__ */ n.charCodeAt(1);
  Eu[e] = t, Eu[t] = -e;
}
function dy(n) {
  return n <= 247 ? $A[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? RA[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8204 ? 256 : 64336 <= n && n <= 65023 ? 4 : 1;
}
const MA = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class gi {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? Dh : Zi;
  }
  /**
  @internal
  */
  constructor(e, t, i) {
    this.from = e, this.to = t, this.level = i;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, t) {
    return e == (this.dir == t);
  }
  /**
  @internal
  */
  static find(e, t, i, r) {
    let s = -1;
    for (let o = 0; o < e.length; o++) {
      let a = e[o];
      if (a.from <= t && a.to >= t) {
        if (a.level == i)
          return o;
        (s < 0 || (r != 0 ? r < 0 ? a.from < t : a.to > t : e[s].level > a.level)) && (s = o);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
}
function py(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++) {
    let i = n[t], r = e[t];
    if (i.from != r.from || i.to != r.to || i.direction != r.direction || !py(i.inner, r.inner))
      return !1;
  }
  return !0;
}
const Be = [];
function NA(n, e, t, i, r) {
  for (let s = 0; s <= i.length; s++) {
    let o = s ? i[s - 1].to : e, a = s < i.length ? i[s].from : t, l = s ? 256 : r;
    for (let c = o, u = l, h = l; c < a; c++) {
      let f = dy(n.charCodeAt(c));
      f == 512 ? f = u : f == 8 && h == 4 && (f = 16), Be[c] = f == 4 ? 2 : f, f & 7 && (h = f), u = f;
    }
    for (let c = o, u = l, h = l; c < a; c++) {
      let f = Be[c];
      if (f == 128)
        c < a - 1 && u == Be[c + 1] && u & 24 ? f = Be[c] = u : Be[c] = 256;
      else if (f == 64) {
        let d = c + 1;
        for (; d < a && Be[d] == 64; )
          d++;
        let p = c && u == 8 || d < t && Be[d] == 8 ? h == 1 ? 1 : 8 : 256;
        for (let m = c; m < d; m++)
          Be[m] = p;
        c = d - 1;
      } else f == 8 && h == 1 && (Be[c] = 1);
      u = f, f & 7 && (h = f);
    }
  }
}
function IA(n, e, t, i, r) {
  let s = r == 1 ? 2 : 1;
  for (let o = 0, a = 0, l = 0; o <= i.length; o++) {
    let c = o ? i[o - 1].to : e, u = o < i.length ? i[o].from : t;
    for (let h = c, f, d, p; h < u; h++)
      if (d = Eu[f = n.charCodeAt(h)])
        if (d < 0) {
          for (let m = a - 3; m >= 0; m -= 3)
            if (wn[m + 1] == -d) {
              let O = wn[m + 2], g = O & 2 ? r : O & 4 ? O & 1 ? s : r : 0;
              g && (Be[h] = Be[wn[m]] = g), a = m;
              break;
            }
        } else {
          if (wn.length == 189)
            break;
          wn[a++] = h, wn[a++] = f, wn[a++] = l;
        }
      else if ((p = Be[h]) == 2 || p == 1) {
        let m = p == r;
        l = m ? 0 : 1;
        for (let O = a - 3; O >= 0; O -= 3) {
          let g = wn[O + 2];
          if (g & 2)
            break;
          if (m)
            wn[O + 2] |= 2;
          else {
            if (g & 4)
              break;
            wn[O + 2] |= 4;
          }
        }
      }
  }
}
function LA(n, e, t, i) {
  for (let r = 0, s = i; r <= t.length; r++) {
    let o = r ? t[r - 1].to : n, a = r < t.length ? t[r].from : e;
    for (let l = o; l < a; ) {
      let c = Be[l];
      if (c == 256) {
        let u = l + 1;
        for (; ; )
          if (u == a) {
            if (r == t.length)
              break;
            u = t[r++].to, a = r < t.length ? t[r].from : e;
          } else if (Be[u] == 256)
            u++;
          else
            break;
        let h = s == 1, f = (u < e ? Be[u] : i) == 1, d = h == f ? h ? 1 : 2 : i;
        for (let p = u, m = r, O = m ? t[m - 1].to : n; p > l; )
          p == O && (p = t[--m].from, O = m ? t[m - 1].to : n), Be[--p] = d;
        l = u;
      } else
        s = c, l++;
    }
  }
}
function _u(n, e, t, i, r, s, o) {
  let a = i % 2 ? 2 : 1;
  if (i % 2 == r % 2)
    for (let l = e, c = 0; l < t; ) {
      let u = !0, h = !1;
      if (c == s.length || l < s[c].from) {
        let m = Be[l];
        m != a && (u = !1, h = m == 16);
      }
      let f = !u && a == 1 ? [] : null, d = u ? i : i + 1, p = l;
      e: for (; ; )
        if (c < s.length && p == s[c].from) {
          if (h)
            break e;
          let m = s[c];
          if (!u)
            for (let O = m.to, g = c + 1; ; ) {
              if (O == t)
                break e;
              if (g < s.length && s[g].from == O)
                O = s[g++].to;
              else {
                if (Be[O] == a)
                  break e;
                break;
              }
            }
          if (c++, f)
            f.push(m);
          else {
            m.from > l && o.push(new gi(l, m.from, d));
            let O = m.direction == Zi != !(d % 2);
            Qu(n, O ? i + 1 : i, r, m.inner, m.from, m.to, o), l = m.to;
          }
          p = m.to;
        } else {
          if (p == t || (u ? Be[p] != a : Be[p] == a))
            break;
          p++;
        }
      f ? _u(n, l, p, i + 1, r, f, o) : l < p && o.push(new gi(l, p, d)), l = p;
    }
  else
    for (let l = t, c = s.length; l > e; ) {
      let u = !0, h = !1;
      if (!c || l > s[c - 1].to) {
        let m = Be[l - 1];
        m != a && (u = !1, h = m == 16);
      }
      let f = !u && a == 1 ? [] : null, d = u ? i : i + 1, p = l;
      e: for (; ; )
        if (c && p == s[c - 1].to) {
          if (h)
            break e;
          let m = s[--c];
          if (!u)
            for (let O = m.from, g = c; ; ) {
              if (O == e)
                break e;
              if (g && s[g - 1].to == O)
                O = s[--g].from;
              else {
                if (Be[O - 1] == a)
                  break e;
                break;
              }
            }
          if (f)
            f.push(m);
          else {
            m.to < l && o.push(new gi(m.to, l, d));
            let O = m.direction == Zi != !(d % 2);
            Qu(n, O ? i + 1 : i, r, m.inner, m.from, m.to, o), l = m.from;
          }
          p = m.from;
        } else {
          if (p == e || (u ? Be[p - 1] != a : Be[p - 1] == a))
            break;
          p--;
        }
      f ? _u(n, p, l, i + 1, r, f, o) : p < l && o.push(new gi(p, l, d)), l = p;
    }
}
function Qu(n, e, t, i, r, s, o) {
  let a = e % 2 ? 2 : 1;
  NA(n, r, s, i, a), IA(n, r, s, i, a), LA(r, s, i, a), _u(n, r, s, e, t, i, o);
}
function DA(n, e, t) {
  if (!n)
    return [new gi(0, 0, e == Dh ? 1 : 0)];
  if (e == Zi && !t.length && !MA.test(n))
    return my(n.length);
  if (t.length)
    for (; n.length > Be.length; )
      Be[Be.length] = 256;
  let i = [], r = e == Zi ? 0 : 1;
  return Qu(n, r, r, t, 0, n.length, i), i;
}
function my(n) {
  return [new gi(0, n, 0)];
}
let gy = "";
function BA(n, e, t, i, r) {
  var s;
  let o = i.head - n.from, a = gi.find(e, o, (s = i.bidiLevel) !== null && s !== void 0 ? s : -1, i.assoc), l = e[a], c = l.side(r, t);
  if (o == c) {
    let f = a += r ? 1 : -1;
    if (f < 0 || f >= e.length)
      return null;
    l = e[a = f], o = l.side(!r, t), c = l.side(r, t);
  }
  let u = xt(n.text, o, l.forward(r, t));
  (u < l.from || u > l.to) && (u = c), gy = n.text.slice(Math.min(o, u), Math.max(o, u));
  let h = a == (r ? e.length - 1 : 0) ? null : e[a + (r ? 1 : -1)];
  return h && u == c && h.level + (r ? 0 : 1) < l.level ? I.cursor(h.side(!r, t) + n.from, h.forward(r, t) ? 1 : -1, h.level) : I.cursor(u + n.from, l.forward(r, t) ? -1 : 1, l.level);
}
function zA(n, e, t) {
  for (let i = e; i < t; i++) {
    let r = dy(n.charCodeAt(i));
    if (r == 1)
      return Zi;
    if (r == 2 || r == 4)
      return Dh;
  }
  return Zi;
}
const Oy = /* @__PURE__ */ K.define(), by = /* @__PURE__ */ K.define(), yy = /* @__PURE__ */ K.define(), xy = /* @__PURE__ */ K.define(), Cu = /* @__PURE__ */ K.define(), ky = /* @__PURE__ */ K.define(), Sy = /* @__PURE__ */ K.define(), Bh = /* @__PURE__ */ K.define(), zh = /* @__PURE__ */ K.define(), wy = /* @__PURE__ */ K.define({
  combine: (n) => n.some((e) => e)
}), vy = /* @__PURE__ */ K.define({
  combine: (n) => n.some((e) => e)
}), Ey = /* @__PURE__ */ K.define();
class ur {
  constructor(e, t = "nearest", i = "nearest", r = 5, s = 5, o = !1) {
    this.range = e, this.y = t, this.x = i, this.yMargin = r, this.xMargin = s, this.isSnapshot = o;
  }
  map(e) {
    return e.empty ? this : new ur(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new ur(I.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const Mo = /* @__PURE__ */ me.define({ map: (n, e) => n.map(e) }), _y = /* @__PURE__ */ me.define();
function zt(n, e, t) {
  let i = n.facet(xy);
  i.length ? i[0](e) : window.onerror && window.onerror(String(e), t, void 0, void 0, e) || (t ? console.error(t + ":", e) : console.error(e));
}
const Hn = /* @__PURE__ */ K.define({ combine: (n) => n.length ? n[0] : !0 });
let ZA = 0;
const rr = /* @__PURE__ */ K.define({
  combine(n) {
    return n.filter((e, t) => {
      for (let i = 0; i < t; i++)
        if (n[i].plugin == e.plugin)
          return !1;
      return !0;
    });
  }
});
class nt {
  constructor(e, t, i, r, s) {
    this.id = e, this.create = t, this.domEventHandlers = i, this.domEventObservers = r, this.baseExtensions = s(this), this.extension = this.baseExtensions.concat(rr.of({ plugin: this, arg: void 0 }));
  }
  /**
  Create an extension for this plugin with the given argument.
  */
  of(e) {
    return this.baseExtensions.concat(rr.of({ plugin: this, arg: e }));
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const { eventHandlers: i, eventObservers: r, provide: s, decorations: o } = t || {};
    return new nt(ZA++, e, i, r, (a) => {
      let l = [];
      return o && l.push(Ps.of((c) => {
        let u = c.plugin(a);
        return u ? o(u) : ae.none;
      })), s && l.push(s(a)), l;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return nt.define((i, r) => new e(i, r), t);
  }
}
class Hl {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  get plugin() {
    return this.spec && this.spec.plugin;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (i) {
            if (zt(t.state, i, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.plugin.create(e, this.spec.arg);
      } catch (t) {
        zt(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (i) {
        zt(e.state, i, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const Qy = /* @__PURE__ */ K.define(), Zh = /* @__PURE__ */ K.define(), Ps = /* @__PURE__ */ K.define(), Cy = /* @__PURE__ */ K.define(), Xh = /* @__PURE__ */ K.define(), Ty = /* @__PURE__ */ K.define();
function bp(n, e) {
  let t = n.state.facet(Ty);
  if (!t.length)
    return t;
  let i = t.map((s) => s instanceof Function ? s(n) : s), r = [];
  return $e.spans(i, e.from, e.to, {
    point() {
    },
    span(s, o, a, l) {
      let c = s - e.from, u = o - e.from, h = r;
      for (let f = a.length - 1; f >= 0; f--, l--) {
        let d = a[f].spec.bidiIsolate, p;
        if (d == null && (d = zA(e.text, c, u)), l > 0 && h.length && (p = h[h.length - 1]).to == c && p.direction == d)
          p.to = u, h = p.inner;
        else {
          let m = { from: c, to: u, direction: d, inner: [] };
          h.push(m), h = m.inner;
        }
      }
    }
  }), r;
}
const Py = /* @__PURE__ */ K.define();
function qh(n) {
  let e = 0, t = 0, i = 0, r = 0;
  for (let s of n.state.facet(Py)) {
    let o = s(n);
    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (t = Math.max(t, o.right)), o.top != null && (i = Math.max(i, o.top)), o.bottom != null && (r = Math.max(r, o.bottom)));
  }
  return { left: e, right: t, top: i, bottom: r };
}
const ls = /* @__PURE__ */ K.define();
class cn {
  constructor(e, t, i, r) {
    this.fromA = e, this.toA = t, this.fromB = i, this.toB = r;
  }
  join(e) {
    return new cn(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, i = this;
    for (; t > 0; t--) {
      let r = e[t - 1];
      if (!(r.fromA > i.toA)) {
        if (r.toA < i.fromA)
          break;
        i = i.join(r), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, i), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let i = [];
    for (let r = 0, s = 0, o = 0, a = 0; ; r++) {
      let l = r == e.length ? null : e[r], c = o - a, u = l ? l.fromB : 1e9;
      for (; s < t.length && t[s] < u; ) {
        let h = t[s], f = t[s + 1], d = Math.max(a, h), p = Math.min(u, f);
        if (d <= p && new cn(d + c, p + c, d, p).addToSet(i), f > u)
          break;
        s += 2;
      }
      if (!l)
        return i;
      new cn(l.fromA, l.toA, l.fromB, l.toB).addToSet(i), o = l.toA, a = l.toB;
    }
  }
}
class Ta {
  constructor(e, t, i) {
    this.view = e, this.state = t, this.transactions = i, this.flags = 0, this.startState = e.state, this.changes = ct.empty(this.startState.doc.length);
    for (let s of i)
      this.changes = this.changes.compose(s.changes);
    let r = [];
    this.changes.iterChangedRanges((s, o, a, l) => r.push(new cn(s, o, a, l))), this.changedRanges = r;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Ta(e, t, i);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 18) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class yp extends ze {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [!1], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = ae.none, this.lastCompositionAfterCursor = !1, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new st()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new cn(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var t;
    let i = e.changedRanges;
    this.minWidth > 0 && i.length && (i.every(({ fromA: c, toA: u }) => u < this.minWidthFrom || c > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(e);
    let r = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((t = this.domChanged) === null || t === void 0) && t.newSel ? r = this.domChanged.newSel.head : !GA(e.changes, this.hasComposition) && !e.selectionSet && (r = e.state.selection.main.head));
    let s = r > -1 ? qA(this.view, e.changes, r) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: c, to: u } = this.hasComposition;
      i = new cn(c, u, e.changes.mapPos(c, -1), e.changes.mapPos(u, 1)).addToSet(i.slice());
    }
    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (H.ie || H.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let o = this.decorations, a = this.updateDeco(), l = FA(o, a, e.changes);
    return i = cn.extendWithRanges(i, l), !(this.flags & 7) && i.length == 0 ? !1 : (this.updateInner(i, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, i) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t, i);
    let { observer: r } = this.view;
    r.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o = H.chrome || H.ios ? { node: r.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, o), this.flags &= -8, o && (o.written || r.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o) => o.flags &= -9
      /* ViewFlag.Composition */
    );
    let s = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o of this.children)
        o instanceof Kn && o.widget instanceof vu && s.push(o.dom);
    r.updateGaps(s);
  }
  updateChildren(e, t, i) {
    let r = i ? i.range.addToSet(e.slice()) : e, s = this.childCursor(t);
    for (let o = r.length - 1; ; o--) {
      let a = o >= 0 ? r[o] : null;
      if (!a)
        break;
      let { fromA: l, toA: c, fromB: u, toB: h } = a, f, d, p, m;
      if (i && i.range.fromB < h && i.range.toB > u) {
        let _ = ys.build(this.view.state.doc, u, i.range.fromB, this.decorations, this.dynamicDecorationMap), v = ys.build(this.view.state.doc, i.range.toB, h, this.decorations, this.dynamicDecorationMap);
        d = _.breakAtStart, p = _.openStart, m = v.openEnd;
        let x = this.compositionView(i);
        v.breakAtStart ? x.breakAfter = 1 : v.content.length && x.merge(x.length, x.length, v.content[0], !1, v.openStart, 0) && (x.breakAfter = v.content[0].breakAfter, v.content.shift()), _.content.length && x.merge(0, 0, _.content[_.content.length - 1], !0, 0, _.openEnd) && _.content.pop(), f = _.content.concat(x).concat(v.content);
      } else
        ({ content: f, breakAtStart: d, openStart: p, openEnd: m } = ys.build(this.view.state.doc, u, h, this.decorations, this.dynamicDecorationMap));
      let { i: O, off: g } = s.findPos(c, 1), { i: y, off: S } = s.findPos(l, -1);
      ry(this, y, S, O, g, f, d, p, m);
    }
    i && this.fixCompositionDOM(i);
  }
  updateEditContextFormatting(e) {
    this.editContextFormatting = this.editContextFormatting.map(e.changes);
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(_y) && (this.editContextFormatting = i.value);
  }
  compositionView(e) {
    let t = new On(e.text.nodeValue);
    t.flags |= 8;
    for (let { deco: r } of e.marks)
      t = new ti(r, [t], t.length);
    let i = new st();
    return i.append(t, 0), i;
  }
  fixCompositionDOM(e) {
    let t = (s, o) => {
      o.flags |= 8 | (o.children.some(
        (l) => l.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o);
      let a = ze.get(s);
      a && a != o && (a.dom = null), o.setDOM(s);
    }, i = this.childPos(e.range.fromB, 1), r = this.children[i.i];
    t(e.line, r);
    for (let s = e.marks.length - 1; s >= -1; s--)
      i = r.childPos(i.off, 1), r = r.children[i.i], t(s >= 0 ? e.marks[s].node : e.text, r);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i = this.view.root.activeElement, r = i == this.dom, s = !r && !(this.view.state.facet(Hn) || this.dom.tabIndex > -1) && sa(this.dom, this.view.observer.selectionRange) && !(i && this.dom.contains(i));
    if (!(r || t || s))
      return;
    let o = this.forceSelection;
    this.forceSelection = !1;
    let a = this.view.state.selection.main, l = this.moveToLine(this.domAtPos(a.anchor)), c = a.empty ? l : this.moveToLine(this.domAtPos(a.head));
    if (H.gecko && a.empty && !this.hasComposition && XA(l)) {
      let h = document.createTextNode("");
      this.view.observer.ignore(() => l.node.insertBefore(h, l.node.childNodes[l.offset] || null)), l = c = new wt(h, 0), o = !0;
    }
    let u = this.view.observer.selectionRange;
    (o || !u.focusNode || (!bs(l.node, l.offset, u.anchorNode, u.anchorOffset) || !bs(c.node, c.offset, u.focusNode, u.focusOffset)) && !this.suppressWidgetCursorChange(u, a)) && (this.view.observer.ignore(() => {
      H.android && H.chrome && this.dom.contains(u.focusNode) && UA(u.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let h = Ts(this.view.root);
      if (h) if (a.empty) {
        if (H.gecko) {
          let f = VA(l.node, l.offset);
          if (f && f != 3) {
            let d = (f == 1 ? ty : ny)(l.node, l.offset);
            d && (l = new wt(d.node, d.offset));
          }
        }
        h.collapse(l.node, l.offset), a.bidiLevel != null && h.caretBidiLevel !== void 0 && (h.caretBidiLevel = a.bidiLevel);
      } else if (h.extend) {
        h.collapse(l.node, l.offset);
        try {
          h.extend(c.node, c.offset);
        } catch {
        }
      } else {
        let f = document.createRange();
        a.anchor > a.head && ([l, c] = [c, l]), f.setEnd(c.node, c.offset), f.setStart(l.node, l.offset), h.removeAllRanges(), h.addRange(f);
      }
      s && this.view.root.activeElement == this.dom && (this.dom.blur(), i && i.focus());
    }), this.view.observer.setSelectionRange(l, c)), this.impreciseAnchor = l.precise ? null : new wt(u.anchorNode, u.anchorOffset), this.impreciseHead = c.precise ? null : new wt(u.focusNode, u.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, t) {
    return this.hasComposition && t.empty && bs(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, t = e.state.selection.main, i = Ts(e.root), { anchorNode: r, anchorOffset: s } = e.observer.selectionRange;
    if (!i || !t.empty || !t.assoc || !i.modify)
      return;
    let o = st.find(this, t.head);
    if (!o)
      return;
    let a = o.posAtStart;
    if (t.head == a || t.head == a + o.length)
      return;
    let l = this.coordsAt(t.head, -1), c = this.coordsAt(t.head, 1);
    if (!l || !c || l.bottom > c.top)
      return;
    let u = this.domAtPos(t.head + t.assoc);
    i.collapse(u.node, u.offset), i.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let h = e.observer.selectionRange;
    e.docView.posFromDOM(h.anchorNode, h.anchorOffset) != t.from && i.collapse(r, s);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom, i;
    if (e.node != t)
      return e;
    for (let r = e.offset; !i && r < t.childNodes.length; r++) {
      let s = ze.get(t.childNodes[r]);
      s instanceof st && (i = s.domAtPos(0));
    }
    for (let r = e.offset - 1; !i && r >= 0; r--) {
      let s = ze.get(t.childNodes[r]);
      s instanceof st && (i = s.domAtPos(s.length));
    }
    return i ? new wt(i.node, i.offset, !0) : e;
  }
  nearest(e) {
    for (let t = e; t; ) {
      let i = ze.get(t);
      if (i && i.rootView == this)
        return i;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let i = this.nearest(e);
    if (!i)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i.localPosFromDOM(e, t) + i.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: i } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let r = this.children[t];
      if (i < r.length || r instanceof st)
        break;
      t++, i = 0;
    }
    return this.children[t].domAtPos(i);
  }
  coordsAt(e, t) {
    let i = null, r = 0;
    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {
      let a = this.children[o], l = s - a.breakAfter, c = l - a.length;
      if (l < e)
        break;
      if (c <= e && (c < e || a.covers(-1)) && (l > e || a.covers(1)) && (!i || a instanceof st && !(i instanceof st && t >= 0)))
        i = a, r = c;
      else if (i && c == e && l == e && a instanceof Kn && Math.abs(t) < 2) {
        if (a.deco.startSide < 0)
          break;
        o && (i = null);
      }
      s = c;
    }
    return i ? i.coordsAt(e - r, t) : null;
  }
  coordsForChar(e) {
    let { i: t, off: i } = this.childPos(e, 1), r = this.children[t];
    if (!(r instanceof st))
      return null;
    for (; r.children.length; ) {
      let { i: a, off: l } = r.childPos(i, 1);
      for (; ; a++) {
        if (a == r.children.length)
          return null;
        if ((r = r.children[a]).length)
          break;
      }
      i = l;
    }
    if (!(r instanceof On))
      return null;
    let s = xt(r.text, i);
    if (s == i)
      return null;
    let o = zi(r.dom, i, s).getClientRects();
    for (let a = 0; a < o.length; a++) {
      let l = o[a];
      if (a == o.length - 1 || l.top < l.bottom && l.left < l.right)
        return l;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let t = [], { from: i, to: r } = e, s = this.view.contentDOM.clientWidth, o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, a = -1, l = this.view.textDirection == Ge.LTR;
    for (let c = 0, u = 0; u < this.children.length; u++) {
      let h = this.children[u], f = c + h.length;
      if (f > r)
        break;
      if (c >= i) {
        let d = h.dom.getBoundingClientRect();
        if (t.push(d.height), o) {
          let p = h.dom.lastChild, m = p ? gr(p) : [];
          if (m.length) {
            let O = m[m.length - 1], g = l ? O.right - d.left : d.right - O.left;
            g > a && (a = g, this.minWidth = s, this.minWidthFrom = c, this.minWidthTo = f);
          }
        }
      }
      c = f + h.breakAfter;
    }
    return t;
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1);
    return getComputedStyle(this.children[t].dom).direction == "rtl" ? Ge.RTL : Ge.LTR;
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof st) {
        let o = s.measureTextSize();
        if (o)
          return o;
      }
    let e = document.createElement("div"), t, i, r;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let s = gr(e.firstChild)[0];
      t = e.getBoundingClientRect().height, i = s ? s.width / 27 : 7, r = s ? s.height : t, e.remove();
    }), { lineHeight: t, charWidth: i, textHeight: r };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new iy(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let i = 0, r = 0; ; r++) {
      let s = r == t.viewports.length ? null : t.viewports[r], o = s ? s.from - 1 : this.length;
      if (o > i) {
        let a = (t.lineBlockAt(o).bottom - t.lineBlockAt(i).top) / this.view.scaleY;
        e.push(ae.replace({
          widget: new vu(a),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(i, o));
      }
      if (!s)
        break;
      i = s.to + 1;
    }
    return ae.set(e);
  }
  updateDeco() {
    let e = 1, t = this.view.state.facet(Ps).map((s) => (this.dynamicDecorationMap[e++] = typeof s == "function") ? s(this.view) : s), i = !1, r = this.view.state.facet(Cy).map((s, o) => {
      let a = typeof s == "function";
      return a && (i = !0), a ? s(this.view) : s;
    });
    for (r.length && (this.dynamicDecorationMap[e++] = i, t.push($e.join(r))), this.decorations = [
      this.editContextFormatting,
      ...t,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ]; e < this.decorations.length; )
      this.dynamicDecorationMap[e++] = !1;
    return this.decorations;
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let c = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = c.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    for (let c of this.view.state.facet(Ey))
      try {
        if (c(this.view, e.range, e))
          return !0;
      } catch (u) {
        zt(this.view.state, u, "scroll handler");
      }
    let { range: t } = e, i = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), r;
    if (!i)
      return;
    !t.empty && (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (i = {
      left: Math.min(i.left, r.left),
      top: Math.min(i.top, r.top),
      right: Math.max(i.right, r.right),
      bottom: Math.max(i.bottom, r.bottom)
    });
    let s = qh(this.view), o = {
      left: i.left - s.left,
      top: i.top - s.top,
      right: i.right + s.right,
      bottom: i.bottom + s.bottom
    }, { offsetWidth: a, offsetHeight: l } = this.view.scrollDOM;
    xA(this.view.scrollDOM, o, t.head < t.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, a), -a), Math.max(Math.min(e.yMargin, l), -l), this.view.textDirection == Ge.LTR);
  }
}
function XA(n) {
  return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
function Ay(n, e) {
  let t = n.observer.selectionRange;
  if (!t.focusNode)
    return null;
  let i = ty(t.focusNode, t.focusOffset), r = ny(t.focusNode, t.focusOffset), s = i || r;
  if (r && i && r.node != i.node) {
    let a = ze.get(r.node);
    if (!a || a instanceof On && a.text != r.node.nodeValue)
      s = r;
    else if (n.docView.lastCompositionAfterCursor) {
      let l = ze.get(i.node);
      !l || l instanceof On && l.text != i.node.nodeValue || (s = r);
    }
  }
  if (n.docView.lastCompositionAfterCursor = s != i, !s)
    return null;
  let o = e - s.offset;
  return { from: o, to: o + s.node.nodeValue.length, node: s.node };
}
function qA(n, e, t) {
  let i = Ay(n, t);
  if (!i)
    return null;
  let { node: r, from: s, to: o } = i, a = r.nodeValue;
  if (/[\n\r]/.test(a) || n.state.doc.sliceString(i.from, i.to) != a)
    return null;
  let l = e.invertedDesc, c = new cn(l.mapPos(s), l.mapPos(o), s, o), u = [];
  for (let h = r.parentNode; ; h = h.parentNode) {
    let f = ze.get(h);
    if (f instanceof ti)
      u.push({ node: h, deco: f.mark });
    else {
      if (f instanceof st || h.nodeName == "DIV" && h.parentNode == n.contentDOM)
        return { range: c, text: r, marks: u, line: h };
      if (h != n.contentDOM)
        u.push({ node: h, deco: new eo({
          inclusive: !0,
          attributes: PA(h),
          tagName: h.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function VA(n, e) {
  return n.nodeType != 1 ? 0 : (e && n.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < n.childNodes.length && n.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let YA = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    oa(e, t, this.changes);
  }
  comparePoint(e, t) {
    oa(e, t, this.changes);
  }
  boundChange(e) {
    oa(e, e, this.changes);
  }
};
function FA(n, e, t) {
  let i = new YA();
  return $e.compare(n, e, t, i), i.changes;
}
function UA(n, e) {
  for (let t = n; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function GA(n, e) {
  let t = !1;
  return e && n.iterChangedRanges((i, r) => {
    i < e.to && r > e.from && (t = !0);
  }), t;
}
function WA(n, e, t = 1) {
  let i = n.charCategorizer(e), r = n.doc.lineAt(e), s = e - r.from;
  if (r.length == 0)
    return I.cursor(e);
  s == 0 ? t = 1 : s == r.length && (t = -1);
  let o = s, a = s;
  t < 0 ? o = xt(r.text, s, !1) : a = xt(r.text, s);
  let l = i(r.text.slice(o, a));
  for (; o > 0; ) {
    let c = xt(r.text, o, !1);
    if (i(r.text.slice(c, o)) != l)
      break;
    o = c;
  }
  for (; a < r.length; ) {
    let c = xt(r.text, a);
    if (i(r.text.slice(a, c)) != l)
      break;
    a = c;
  }
  return I.range(o + r.from, a + r.from);
}
function jA(n, e) {
  return e.left > n ? e.left - n : Math.max(0, n - e.right);
}
function HA(n, e) {
  return e.top > n ? e.top - n : Math.max(0, n - e.bottom);
}
function Kl(n, e) {
  return n.top < e.bottom - 1 && n.bottom > e.top + 1;
}
function xp(n, e) {
  return e < n.top ? { top: e, left: n.left, right: n.right, bottom: n.bottom } : n;
}
function kp(n, e) {
  return e > n.bottom ? { top: n.top, left: n.left, right: n.right, bottom: e } : n;
}
function Tu(n, e, t) {
  let i, r, s, o, a = !1, l, c, u, h;
  for (let p = n.firstChild; p; p = p.nextSibling) {
    let m = gr(p);
    for (let O = 0; O < m.length; O++) {
      let g = m[O];
      r && Kl(r, g) && (g = xp(kp(g, r.bottom), r.top));
      let y = jA(e, g), S = HA(t, g);
      if (y == 0 && S == 0)
        return p.nodeType == 3 ? Sp(p, e, t) : Tu(p, e, t);
      (!i || o > S || o == S && s > y) && (i = p, r = g, s = y, o = S, a = y ? e < g.left ? O > 0 : O < m.length - 1 : !0), y == 0 ? t > g.bottom && (!u || u.bottom < g.bottom) ? (l = p, u = g) : t < g.top && (!h || h.top > g.top) && (c = p, h = g) : u && Kl(u, g) ? u = kp(u, g.bottom) : h && Kl(h, g) && (h = xp(h, g.top));
    }
  }
  if (u && u.bottom >= t ? (i = l, r = u) : h && h.top <= t && (i = c, r = h), !i)
    return { node: n, offset: 0 };
  let f = Math.max(r.left, Math.min(r.right, e));
  if (i.nodeType == 3)
    return Sp(i, f, t);
  if (a && i.contentEditable != "false")
    return Tu(i, f, t);
  let d = Array.prototype.indexOf.call(n.childNodes, i) + (e >= (r.left + r.right) / 2 ? 1 : 0);
  return { node: n, offset: d };
}
function Sp(n, e, t) {
  let i = n.nodeValue.length, r = -1, s = 1e9, o = 0;
  for (let a = 0; a < i; a++) {
    let l = zi(n, a, a + 1).getClientRects();
    for (let c = 0; c < l.length; c++) {
      let u = l[c];
      if (u.top == u.bottom)
        continue;
      o || (o = e - u.left);
      let h = (u.top > t ? u.top - t : t - u.bottom) - 1;
      if (u.left - 1 <= e && u.right + 1 >= e && h < s) {
        let f = e >= (u.left + u.right) / 2, d = f;
        if ((H.chrome || H.gecko) && zi(n, a).getBoundingClientRect().left == u.right && (d = !f), h <= 0)
          return { node: n, offset: a + (d ? 1 : 0) };
        r = a + (d ? 1 : 0), s = h;
      }
    }
  }
  return { node: n, offset: r > -1 ? r : o > 0 ? n.nodeValue.length : 0 };
}
function $y(n, e, t, i = -1) {
  var r, s;
  let o = n.contentDOM.getBoundingClientRect(), a = o.top + n.viewState.paddingTop, l, { docHeight: c } = n.viewState, { x: u, y: h } = e, f = h - a;
  if (f < 0)
    return 0;
  if (f > c)
    return n.state.doc.length;
  for (let _ = n.viewState.heightOracle.textHeight / 2, v = !1; l = n.elementAtHeight(f), l.type != At.Text; )
    for (; f = i > 0 ? l.bottom + _ : l.top - _, !(f >= 0 && f <= c); ) {
      if (v)
        return t ? null : 0;
      v = !0, i = -i;
    }
  h = a + f;
  let d = l.from;
  if (d < n.viewport.from)
    return n.viewport.from == 0 ? 0 : t ? null : wp(n, o, l, u, h);
  if (d > n.viewport.to)
    return n.viewport.to == n.state.doc.length ? n.state.doc.length : t ? null : wp(n, o, l, u, h);
  let p = n.dom.ownerDocument, m = n.root.elementFromPoint ? n.root : p, O = m.elementFromPoint(u, h);
  O && !n.contentDOM.contains(O) && (O = null), O || (u = Math.max(o.left + 1, Math.min(o.right - 1, u)), O = m.elementFromPoint(u, h), O && !n.contentDOM.contains(O) && (O = null));
  let g, y = -1;
  if (O && ((r = n.docView.nearest(O)) === null || r === void 0 ? void 0 : r.isEditable) != !1) {
    if (p.caretPositionFromPoint) {
      let _ = p.caretPositionFromPoint(u, h);
      _ && ({ offsetNode: g, offset: y } = _);
    } else if (p.caretRangeFromPoint) {
      let _ = p.caretRangeFromPoint(u, h);
      _ && ({ startContainer: g, startOffset: y } = _, (!n.contentDOM.contains(g) || H.safari && KA(g, y, u) || H.chrome && JA(g, y, u)) && (g = void 0));
    }
    g && (y = Math.min(Ln(g), y));
  }
  if (!g || !n.docView.dom.contains(g)) {
    let _ = st.find(n.docView, d);
    if (!_)
      return f > l.top + l.height / 2 ? l.to : l.from;
    ({ node: g, offset: y } = Tu(_.dom, u, h));
  }
  let S = n.docView.nearest(g);
  if (!S)
    return null;
  if (S.isWidget && ((s = S.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {
    let _ = S.dom.getBoundingClientRect();
    return e.y < _.top || e.y <= _.bottom && e.x <= (_.left + _.right) / 2 ? S.posAtStart : S.posAtEnd;
  } else
    return S.localPosFromDOM(g, y) + S.posAtStart;
}
function wp(n, e, t, i, r) {
  let s = Math.round((i - e.left) * n.defaultCharacterWidth);
  if (n.lineWrapping && t.height > n.defaultLineHeight * 1.5) {
    let a = n.viewState.heightOracle.textHeight, l = Math.floor((r - t.top - (n.defaultLineHeight - a) * 0.5) / a);
    s += l * n.viewState.heightOracle.lineLength;
  }
  let o = n.state.sliceDoc(t.from, t.to);
  return t.from + mu(o, s, n.state.tabSize);
}
function KA(n, e, t) {
  let i, r = n;
  if (n.nodeType != 3 || e != (i = n.nodeValue.length))
    return !1;
  for (; ; ) {
    let s = r.nextSibling;
    if (s) {
      if (s.nodeName == "BR")
        break;
      return !1;
    } else {
      let o = r.parentNode;
      if (!o || o.nodeName == "DIV")
        break;
      r = o;
    }
  }
  return zi(n, i - 1, i).getBoundingClientRect().right > t;
}
function JA(n, e, t) {
  if (e != 0)
    return !1;
  for (let r = n; ; ) {
    let s = r.parentNode;
    if (!s || s.nodeType != 1 || s.firstChild != r)
      return !1;
    if (s.classList.contains("cm-line"))
      break;
    r = s;
  }
  let i = n.nodeType == 1 ? n.getBoundingClientRect() : zi(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect();
  return t - i.left > 5;
}
function Pu(n, e, t) {
  let i = n.lineBlockAt(e);
  if (Array.isArray(i.type)) {
    let r;
    for (let s of i.type) {
      if (s.from > e)
        break;
      if (!(s.to < e)) {
        if (s.from < e && s.to > e)
          return s;
        (!r || s.type == At.Text && (r.type != s.type || (t < 0 ? s.from < e : s.to > e))) && (r = s);
      }
    }
    return r || i;
  }
  return i;
}
function e$(n, e, t, i) {
  let r = Pu(n, e.head, e.assoc || -1), s = !i || r.type != At.Text || !(n.lineWrapping || r.widgetLineBreaks) ? null : n.coordsAtPos(e.assoc < 0 && e.head > r.from ? e.head - 1 : e.head);
  if (s) {
    let o = n.dom.getBoundingClientRect(), a = n.textDirectionAt(r.from), l = n.posAtCoords({
      x: t == (a == Ge.LTR) ? o.right - 1 : o.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (l != null)
      return I.cursor(l, t ? -1 : 1);
  }
  return I.cursor(t ? r.to : r.from, t ? -1 : 1);
}
function vp(n, e, t, i) {
  let r = n.state.doc.lineAt(e.head), s = n.bidiSpans(r), o = n.textDirectionAt(r.from);
  for (let a = e, l = null; ; ) {
    let c = BA(r, s, o, a, t), u = gy;
    if (!c) {
      if (r.number == (t ? n.state.doc.lines : 1))
        return a;
      u = `
`, r = n.state.doc.line(r.number + (t ? 1 : -1)), s = n.bidiSpans(r), c = n.visualLineSide(r, !t);
    }
    if (l) {
      if (!l(u))
        return a;
    } else {
      if (!i)
        return c;
      l = i(u);
    }
    a = c;
  }
}
function t$(n, e, t) {
  let i = n.state.charCategorizer(e), r = i(t);
  return (s) => {
    let o = i(s);
    return r == We.Space && (r = o), r == o;
  };
}
function n$(n, e, t, i) {
  let r = e.head, s = t ? 1 : -1;
  if (r == (t ? n.state.doc.length : 0))
    return I.cursor(r, e.assoc);
  let o = e.goalColumn, a, l = n.contentDOM.getBoundingClientRect(), c = n.coordsAtPos(r, e.assoc || -1), u = n.documentTop;
  if (c)
    o == null && (o = c.left - l.left), a = s < 0 ? c.top : c.bottom;
  else {
    let d = n.viewState.lineBlockAt(r);
    o == null && (o = Math.min(l.right - l.left, n.defaultCharacterWidth * (r - d.from))), a = (s < 0 ? d.top : d.bottom) + u;
  }
  let h = l.left + o, f = i ?? n.viewState.heightOracle.textHeight >> 1;
  for (let d = 0; ; d += 10) {
    let p = a + (f + d) * s, m = $y(n, { x: h, y: p }, !1, s);
    if (p < l.top || p > l.bottom || (s < 0 ? m < r : m > r)) {
      let O = n.docView.coordsForChar(m), g = !O || p < O.top ? -1 : 1;
      return I.cursor(m, g, void 0, o);
    }
  }
}
function aa(n, e, t) {
  for (; ; ) {
    let i = 0;
    for (let r of n)
      r.between(e - 1, e + 1, (s, o, a) => {
        if (e > s && e < o) {
          let l = i || t || (e - s < o - e ? -1 : 1);
          e = l < 0 ? s : o, i = l;
        }
      });
    if (!i)
      return e;
  }
}
function Jl(n, e, t) {
  let i = aa(n.state.facet(Xh).map((r) => r(n)), t.from, e.head > t.from ? -1 : 1);
  return i == t.from ? t : I.cursor(i, i < t.from ? 1 : -1);
}
const cs = "￿";
class i$ {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(we.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += cs;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let i = e.parentNode;
    for (let r = e; ; ) {
      this.findPointBefore(i, r);
      let s = this.text.length;
      this.readNode(r);
      let o = r.nextSibling;
      if (o == t)
        break;
      let a = ze.get(r), l = ze.get(o);
      (a && l ? a.breakAfter : (a ? a.breakAfter : Qa(r)) || Qa(o) && (r.nodeName != "BR" || r.cmIgnore) && this.text.length > s) && this.lineBreak(), r = o;
    }
    return this.findPointBefore(i, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let i of this.points)
      i.node == e && (i.pos = this.text.length + Math.min(i.offset, t.length));
    for (let i = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, o = 1, a;
      if (this.lineSeparator ? (s = t.indexOf(this.lineSeparator, i), o = this.lineSeparator.length) : (a = r.exec(t)) && (s = a.index, o = a[0].length), this.append(t.slice(i, s < 0 ? t.length : s)), s < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let l of this.points)
          l.node == e && l.pos > this.text.length && (l.pos -= o - 1);
      i = s + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = ze.get(e), i = t && t.overrideDOMText;
    if (i != null) {
      this.findPointInside(e, i.length);
      for (let r = i.iter(); !r.next().done; )
        r.lineBreak ? this.lineBreak() : this.append(r.value);
    } else e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let i of this.points)
      i.node == e && e.childNodes[i.offset] == t && (i.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let i of this.points)
      (e.nodeType == 3 ? i.node == e : e.contains(i.node)) && (i.pos = this.text.length + (r$(e, i.node, i.offset) ? t : 0));
  }
}
function r$(n, e, t) {
  for (; ; ) {
    if (!e || t < Ln(e))
      return !1;
    if (e == n)
      return !0;
    t = Bi(e) + 1, e = e.parentNode;
  }
}
class Ep {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
}
class s$ {
  constructor(e, t, i, r) {
    this.typeOver = r, this.bounds = null, this.text = "", this.domChanged = t > -1;
    let { impreciseHead: s, impreciseAnchor: o } = e.docView;
    if (e.state.readOnly && t > -1)
      this.newSel = null;
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, i, 0))) {
      let a = s || o ? [] : l$(e), l = new i$(a, e.state);
      l.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = l.text, this.newSel = c$(a, this.bounds.from);
    } else {
      let a = e.observer.selectionRange, l = s && s.node == a.focusNode && s.offset == a.focusOffset || !bu(e.contentDOM, a.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(a.focusNode, a.focusOffset), c = o && o.node == a.anchorNode && o.offset == a.anchorOffset || !bu(e.contentDOM, a.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(a.anchorNode, a.anchorOffset), u = e.viewport;
      if ((H.ios || H.chrome) && e.state.selection.main.empty && l != c && (u.from > 0 || u.to < e.state.doc.length)) {
        let h = Math.min(l, c), f = Math.max(l, c), d = u.from - h, p = u.to - f;
        (d == 0 || d == 1 || h == 0) && (p == 0 || p == -1 || f == e.state.doc.length) && (l = 0, c = e.state.doc.length);
      }
      this.newSel = I.single(c, l);
    }
  }
}
function Ry(n, e) {
  let t, { newSel: i } = e, r = n.state.selection.main, s = n.inputState.lastKeyTime > Date.now() - 100 ? n.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: o, to: a } = e.bounds, l = r.from, c = null;
    (s === 8 || H.android && e.text.length < a - o) && (l = r.to, c = "end");
    let u = a$(n.state.doc.sliceString(o, a, cs), e.text, l - o, c);
    u && (H.chrome && s == 13 && u.toB == u.from + 2 && e.text.slice(u.from, u.toB) == cs + cs && u.toB--, t = {
      from: o + u.from,
      to: o + u.toA,
      insert: Te.of(e.text.slice(u.from, u.toB).split(cs))
    });
  } else i && (!n.hasFocus && n.state.facet(Hn) || i.main.eq(r)) && (i = null);
  if (!t && !i)
    return !1;
  if (!t && e.typeOver && !r.empty && i && i.main.empty ? t = { from: r.from, to: r.to, insert: n.state.doc.slice(r.from, r.to) } : (H.mac || H.android) && t && t.from == t.to && t.from == r.head - 1 && /^\. ?$/.test(t.insert.toString()) && n.contentDOM.getAttribute("autocorrect") == "off" ? (i && t.insert.length == 2 && (i = I.single(i.main.anchor - 1, i.main.head - 1)), t = { from: t.from, to: t.to, insert: Te.of([t.insert.toString().replace(".", " ")]) }) : t && t.from >= r.from && t.to <= r.to && (t.from != r.from || t.to != r.to) && r.to - r.from - (t.to - t.from) <= 4 ? t = {
    from: r.from,
    to: r.to,
    insert: n.state.doc.slice(r.from, t.from).append(t.insert).append(n.state.doc.slice(t.to, r.to))
  } : H.chrome && t && t.from == t.to && t.from == r.head && t.insert.toString() == `
 ` && n.lineWrapping && (i && (i = I.single(i.main.anchor - 1, i.main.head - 1)), t = { from: r.from, to: r.to, insert: Te.of([" "]) }), t)
    return Vh(n, t, i, s);
  if (i && !i.main.eq(r)) {
    let o = !1, a = "select";
    return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (o = !0), a = n.inputState.lastSelectionOrigin), n.dispatch({ selection: i, scrollIntoView: o, userEvent: a }), !0;
  } else
    return !1;
}
function Vh(n, e, t, i = -1) {
  if (H.ios && n.inputState.flushIOSKey(e))
    return !0;
  let r = n.state.selection.main;
  if (H.android && (e.to == r.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (e.from == r.from || e.from == r.from - 1 && n.state.sliceDoc(e.from, r.from) == " ") && e.insert.length == 1 && e.insert.lines == 2 && cr(n.contentDOM, "Enter", 13) || (e.from == r.from - 1 && e.to == r.to && e.insert.length == 0 || i == 8 && e.insert.length < e.to - e.from && e.to > r.head) && cr(n.contentDOM, "Backspace", 8) || e.from == r.from && e.to == r.to + 1 && e.insert.length == 0 && cr(n.contentDOM, "Delete", 46)))
    return !0;
  let s = e.insert.toString();
  n.inputState.composing >= 0 && n.inputState.composing++;
  let o, a = () => o || (o = o$(n, e, t));
  return n.state.facet(ky).some((l) => l(n, e.from, e.to, s, a)) || n.dispatch(a()), !0;
}
function o$(n, e, t) {
  let i, r = n.state, s = r.selection.main;
  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!t || t.main.empty && t.main.from == e.from + e.insert.length) && n.inputState.composing < 0) {
    let a = s.from < e.from ? r.sliceDoc(s.from, e.from) : "", l = s.to > e.to ? r.sliceDoc(e.to, s.to) : "";
    i = r.replaceSelection(n.state.toText(a + e.insert.sliceString(0, void 0, n.state.lineBreak) + l));
  } else {
    let a = r.changes(e), l = t && t.main.to <= a.newLength ? t.main : void 0;
    if (r.selection.ranges.length > 1 && n.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {
      let c = n.state.sliceDoc(e.from, e.to), u, h = t && Ay(n, t.main.head);
      if (h) {
        let p = e.insert.length - (e.to - e.from);
        u = { from: h.from, to: h.to - p };
      } else
        u = n.state.doc.lineAt(s.head);
      let f = s.to - e.to, d = s.to - s.from;
      i = r.changeByRange((p) => {
        if (p.from == s.from && p.to == s.to)
          return { changes: a, range: l || p.map(a) };
        let m = p.to - f, O = m - c.length;
        if (p.to - p.from != d || n.state.sliceDoc(O, m) != c || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        p.to >= u.from && p.from <= u.to)
          return { range: p };
        let g = r.changes({ from: O, to: m, insert: e.insert }), y = p.to - s.to;
        return {
          changes: g,
          range: l ? I.range(Math.max(0, l.anchor + y), Math.max(0, l.head + y)) : p.map(g)
        };
      });
    } else
      i = {
        changes: a,
        selection: l && r.selection.replaceRange(l)
      };
  }
  let o = "input.type";
  return (n.composing || n.inputState.compositionPendingChange && n.inputState.compositionEndedAt > Date.now() - 50) && (n.inputState.compositionPendingChange = !1, o += ".compose", n.inputState.compositionFirstChange && (o += ".start", n.inputState.compositionFirstChange = !1)), r.update(i, { userEvent: o, scrollIntoView: !0 });
}
function a$(n, e, t, i) {
  let r = Math.min(n.length, e.length), s = 0;
  for (; s < r && n.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == r && n.length == e.length)
    return null;
  let o = n.length, a = e.length;
  for (; o > 0 && a > 0 && n.charCodeAt(o - 1) == e.charCodeAt(a - 1); )
    o--, a--;
  if (i == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    t -= o + l - s;
  }
  if (o < s && n.length < e.length) {
    let l = t <= s && t >= o ? s - t : 0;
    s -= l, a = s + (a - o), o = s;
  } else if (a < s) {
    let l = t <= s && t >= a ? s - t : 0;
    s -= l, o = s + (o - a), a = s;
  }
  return { from: s, toA: o, toB: a };
}
function l$(n) {
  let e = [];
  if (n.root.activeElement != n.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: i, focusNode: r, focusOffset: s } = n.observer.selectionRange;
  return t && (e.push(new Ep(t, i)), (r != t || s != i) && e.push(new Ep(r, s))), e;
}
function c$(n, e) {
  if (n.length == 0)
    return null;
  let t = n[0].pos, i = n.length == 2 ? n[1].pos : t;
  return t > -1 && i > -1 ? I.single(t + e, i + e) : null;
}
class u$ {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, H.safari && e.contentDOM.addEventListener("input", () => null), H.gecko && _$(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !b$(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || (this.view.updateState != 0 ? Promise.resolve().then(() => this.runHandlers(e.type, e)) : this.runHandlers(e.type, e));
  }
  runHandlers(e, t) {
    let i = this.handlers[e];
    if (i) {
      for (let r of i.observers)
        r(this.view, t);
      for (let r of i.handlers) {
        if (t.defaultPrevented)
          break;
        if (r(this.view, t)) {
          t.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = h$(e), i = this.handlers, r = this.view.contentDOM;
    for (let s in t)
      if (s != "scroll") {
        let o = !t[s].handlers.length, a = i[s];
        a && o != !a.handlers.length && (r.removeEventListener(s, this.handleEvent), a = null), a || r.addEventListener(s, this.handleEvent, { passive: o });
      }
    for (let s in i)
      s != "scroll" && !t[s] && r.removeEventListener(s, this.handleEvent);
    this.handlers = t;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return !0;
    if (this.tabFocusMode > 0 && e.keyCode != 27 && Ny.indexOf(e.keyCode) < 0 && (this.tabFocusMode = -1), H.android && H.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let t;
    return H.ios && !e.synthetic && !e.altKey && !e.metaKey && ((t = My.find((i) => i.keyCode == e.keyCode)) && !e.ctrlKey || f$.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = t || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey(e) {
    let t = this.pendingIOSKey;
    return !t || t.key == "Enter" && e && e.from < e.to && /^\S+$/.test(e.insert.toString()) ? !1 : (this.pendingIOSKey = void 0, cr(this.view.contentDOM, t.key, t.keyCode, t instanceof KeyboardEvent ? t : void 0));
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : H.safari && !H.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.view.observer.update(e), this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function _p(n, e) {
  return (t, i) => {
    try {
      return e.call(n, i, t);
    } catch (r) {
      zt(t.state, r);
    }
  };
}
function h$(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(i) {
    return e[i] || (e[i] = { observers: [], handlers: [] });
  }
  for (let i of n) {
    let r = i.spec, s = r && r.plugin.domEventHandlers, o = r && r.plugin.domEventObservers;
    if (s)
      for (let a in s) {
        let l = s[a];
        l && t(a).handlers.push(_p(i.value, l));
      }
    if (o)
      for (let a in o) {
        let l = o[a];
        l && t(a).observers.push(_p(i.value, l));
      }
  }
  for (let i in bn)
    t(i).handlers.push(bn[i]);
  for (let i in un)
    t(i).observers.push(un[i]);
  return e;
}
const My = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], f$ = "dthko", Ny = [16, 17, 18, 20, 91, 92, 224, 225], No = 6;
function Io(n) {
  return Math.max(0, n) * 0.7 + 8;
}
function d$(n, e) {
  return Math.max(Math.abs(n.clientX - e.clientX), Math.abs(n.clientY - e.clientY));
}
class p$ {
  constructor(e, t, i, r) {
    this.view = e, this.startEvent = t, this.style = i, this.mustSelect = r, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = t, this.scrollParents = kA(e.contentDOM), this.atoms = e.state.facet(Xh).map((o) => o(e));
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(we.allowMultipleSelections) && m$(e, t), this.dragging = O$(e, t) && Dy(t) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && d$(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let t = 0, i = 0, r = 0, s = 0, o = this.view.win.innerWidth, a = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: r, right: o } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: s, bottom: a } = this.scrollParents.y.getBoundingClientRect());
    let l = qh(this.view);
    e.clientX - l.left <= r + No ? t = -Io(r - e.clientX) : e.clientX + l.right >= o - No && (t = Io(e.clientX - o)), e.clientY - l.top <= s + No ? i = -Io(s - e.clientY) : e.clientY + l.bottom >= a - No && (i = Io(e.clientY - a)), this.setScrollSpeed(t, i);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, t) {
    this.scrollSpeed = { x: e, y: t }, e || t ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: e, y: t } = this.scrollSpeed;
    e && this.scrollParents.x && (this.scrollParents.x.scrollLeft += e, e = 0), t && this.scrollParents.y && (this.scrollParents.y.scrollTop += t, t = 0), (e || t) && this.view.win.scrollBy(e, t), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let t = null;
    for (let i = 0; i < e.ranges.length; i++) {
      let r = e.ranges[i], s = null;
      if (r.empty) {
        let o = aa(this.atoms, r.from, 0);
        o != r.from && (s = I.cursor(o, -1));
      } else {
        let o = aa(this.atoms, r.from, -1), a = aa(this.atoms, r.to, 1);
        (o != r.from || a != r.to) && (s = I.range(r.from == r.anchor ? o : a, r.from == r.head ? o : a));
      }
      s && (t || (t = e.ranges.slice()), t[i] = s);
    }
    return t ? I.create(t, e.mainIndex) : e;
  }
  select(e) {
    let { view: t } = this, i = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !i.eq(t.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: i,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    e.transactions.some((t) => t.isUserEvent("input.type")) ? this.destroy() : this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function m$(n, e) {
  let t = n.state.facet(Oy);
  return t.length ? t[0](e) : H.mac ? e.metaKey : e.ctrlKey;
}
function g$(n, e) {
  let t = n.state.facet(by);
  return t.length ? t[0](e) : H.mac ? !e.altKey : !e.ctrlKey;
}
function O$(n, e) {
  let { main: t } = n.state.selection;
  if (t.empty)
    return !1;
  let i = Ts(n.root);
  if (!i || i.rangeCount == 0)
    return !0;
  let r = i.getRangeAt(0).getClientRects();
  for (let s = 0; s < r.length; s++) {
    let o = r[s];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function b$(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, i; t != n.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (i = ze.get(t)) && i.ignoreEvent(e))
      return !1;
  return !0;
}
const bn = /* @__PURE__ */ Object.create(null), un = /* @__PURE__ */ Object.create(null), Iy = H.ie && H.ie_version < 15 || H.ios && H.webkit_version < 604;
function y$(n) {
  let e = n.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    n.focus(), t.remove(), Ly(n, t.value);
  }, 50);
}
function al(n, e, t) {
  for (let i of n.facet(e))
    t = i(t, n);
  return t;
}
function Ly(n, e) {
  e = al(n.state, Bh, e);
  let { state: t } = n, i, r = 1, s = t.toText(e), o = s.lines == t.selection.ranges.length;
  if (Au != null && t.selection.ranges.every((l) => l.empty) && Au == s.toString()) {
    let l = -1;
    i = t.changeByRange((c) => {
      let u = t.doc.lineAt(c.from);
      if (u.from == l)
        return { range: c };
      l = u.from;
      let h = t.toText((o ? s.line(r++).text : e) + t.lineBreak);
      return {
        changes: { from: u.from, insert: h },
        range: I.cursor(c.from + h.length)
      };
    });
  } else o ? i = t.changeByRange((l) => {
    let c = s.line(r++);
    return {
      changes: { from: l.from, to: l.to, insert: c.text },
      range: I.cursor(l.from + c.length)
    };
  }) : i = t.replaceSelection(s);
  n.dispatch(i, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
un.scroll = (n) => {
  n.inputState.lastScrollTop = n.scrollDOM.scrollTop, n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft;
};
bn.keydown = (n, e) => (n.inputState.setSelectionOrigin("select"), e.keyCode == 27 && n.inputState.tabFocusMode != 0 && (n.inputState.tabFocusMode = Date.now() + 2e3), !1);
un.touchstart = (n, e) => {
  n.inputState.lastTouchTime = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
un.touchmove = (n) => {
  n.inputState.setSelectionOrigin("select.pointer");
};
bn.mousedown = (n, e) => {
  if (n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let t = null;
  for (let i of n.state.facet(yy))
    if (t = i(n, e), t)
      break;
  if (!t && e.button == 0 && (t = S$(n, e)), t) {
    let i = !n.hasFocus;
    n.inputState.startMouseSelection(new p$(n, e, t, i)), i && n.observer.ignore(() => {
      Kb(n.contentDOM);
      let s = n.root.activeElement;
      s && !s.contains(n.contentDOM) && s.blur();
    });
    let r = n.inputState.mouseSelection;
    if (r)
      return r.start(e), r.dragging === !1;
  }
  return !1;
};
function Qp(n, e, t, i) {
  if (i == 1)
    return I.cursor(e, t);
  if (i == 2)
    return WA(n.state, e, t);
  {
    let r = st.find(n.docView, e), s = n.state.doc.lineAt(r ? r.posAtEnd : e), o = r ? r.posAtStart : s.from, a = r ? r.posAtEnd : s.to;
    return a < n.state.doc.length && a == s.to && a++, I.range(o, a);
  }
}
let Cp = (n, e, t) => e >= t.top && e <= t.bottom && n >= t.left && n <= t.right;
function x$(n, e, t, i) {
  let r = st.find(n.docView, e);
  if (!r)
    return 1;
  let s = e - r.posAtStart;
  if (s == 0)
    return 1;
  if (s == r.length)
    return -1;
  let o = r.coordsAt(s, -1);
  if (o && Cp(t, i, o))
    return -1;
  let a = r.coordsAt(s, 1);
  return a && Cp(t, i, a) ? 1 : o && o.bottom >= i ? -1 : 1;
}
function Tp(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: x$(n, t, e.clientX, e.clientY) };
}
const k$ = H.ie && H.ie_version <= 11;
let Pp = null, Ap = 0, $p = 0;
function Dy(n) {
  if (!k$)
    return n.detail;
  let e = Pp, t = $p;
  return Pp = n, $p = Date.now(), Ap = !e || t > Date.now() - 400 && Math.abs(e.clientX - n.clientX) < 2 && Math.abs(e.clientY - n.clientY) < 2 ? (Ap + 1) % 3 : 1;
}
function S$(n, e) {
  let t = Tp(n, e), i = Dy(e), r = n.state.selection;
  return {
    update(s) {
      s.docChanged && (t.pos = s.changes.mapPos(t.pos), r = r.map(s.changes));
    },
    get(s, o, a) {
      let l = Tp(n, s), c, u = Qp(n, l.pos, l.bias, i);
      if (t.pos != l.pos && !o) {
        let h = Qp(n, t.pos, t.bias, i), f = Math.min(h.from, u.from), d = Math.max(h.to, u.to);
        u = f < u.from ? I.range(f, d) : I.range(d, f);
      }
      return o ? r.replaceRange(r.main.extend(u.from, u.to)) : a && i == 1 && r.ranges.length > 1 && (c = w$(r, l.pos)) ? c : a ? r.addRange(u) : I.create([u]);
    }
  };
}
function w$(n, e) {
  for (let t = 0; t < n.ranges.length; t++) {
    let { from: i, to: r } = n.ranges[t];
    if (i <= e && r >= e)
      return I.create(n.ranges.slice(0, t).concat(n.ranges.slice(t + 1)), n.mainIndex == t ? 0 : n.mainIndex - (n.mainIndex > t ? 1 : 0));
  }
  return null;
}
bn.dragstart = (n, e) => {
  let { selection: { main: t } } = n.state;
  if (e.target.draggable) {
    let r = n.docView.nearest(e.target);
    if (r && r.isWidget) {
      let s = r.posAtStart, o = s + r.length;
      (s >= t.to || o <= t.from) && (t = I.range(s, o));
    }
  }
  let { inputState: i } = n;
  return i.mouseSelection && (i.mouseSelection.dragging = !0), i.draggedContent = t, e.dataTransfer && (e.dataTransfer.setData("Text", al(n.state, zh, n.state.sliceDoc(t.from, t.to))), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
bn.dragend = (n) => (n.inputState.draggedContent = null, !1);
function Rp(n, e, t, i) {
  if (t = al(n.state, Bh, t), !t)
    return;
  let r = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = n.inputState, o = i && s && g$(n, e) ? { from: s.from, to: s.to } : null, a = { from: r, insert: t }, l = n.state.changes(o ? [o, a] : a);
  n.focus(), n.dispatch({
    changes: l,
    selection: { anchor: l.mapPos(r, -1), head: l.mapPos(r, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  }), n.inputState.draggedContent = null;
}
bn.drop = (n, e) => {
  if (!e.dataTransfer)
    return !1;
  if (n.state.readOnly)
    return !0;
  let t = e.dataTransfer.files;
  if (t && t.length) {
    let i = Array(t.length), r = 0, s = () => {
      ++r == t.length && Rp(n, e, i.filter((o) => o != null).join(n.state.lineBreak), !1);
    };
    for (let o = 0; o < t.length; o++) {
      let a = new FileReader();
      a.onerror = s, a.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(a.result) || (i[o] = a.result), s();
      }, a.readAsText(t[o]);
    }
    return !0;
  } else {
    let i = e.dataTransfer.getData("Text");
    if (i)
      return Rp(n, e, i, !0), !0;
  }
  return !1;
};
bn.paste = (n, e) => {
  if (n.state.readOnly)
    return !0;
  n.observer.flush();
  let t = Iy ? null : e.clipboardData;
  return t ? (Ly(n, t.getData("text/plain") || t.getData("text/uri-list")), !0) : (y$(n), !1);
};
function v$(n, e) {
  let t = n.dom.parentNode;
  if (!t)
    return;
  let i = t.appendChild(document.createElement("textarea"));
  i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.value = e, i.focus(), i.selectionEnd = e.length, i.selectionStart = 0, setTimeout(() => {
    i.remove(), n.focus();
  }, 50);
}
function E$(n) {
  let e = [], t = [], i = !1;
  for (let r of n.selection.ranges)
    r.empty || (e.push(n.sliceDoc(r.from, r.to)), t.push(r));
  if (!e.length) {
    let r = -1;
    for (let { from: s } of n.selection.ranges) {
      let o = n.doc.lineAt(s);
      o.number > r && (e.push(o.text), t.push({ from: o.from, to: Math.min(n.doc.length, o.to + 1) })), r = o.number;
    }
    i = !0;
  }
  return { text: al(n, zh, e.join(n.lineBreak)), ranges: t, linewise: i };
}
let Au = null;
bn.copy = bn.cut = (n, e) => {
  let { text: t, ranges: i, linewise: r } = E$(n.state);
  if (!t && !r)
    return !1;
  Au = r ? t : null, e.type == "cut" && !n.state.readOnly && n.dispatch({
    changes: i,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let s = Iy ? null : e.clipboardData;
  return s ? (s.clearData(), s.setData("text/plain", t), !0) : (v$(n, t), !1);
};
const By = /* @__PURE__ */ Bn.define();
function zy(n, e) {
  let t = [];
  for (let i of n.facet(Sy)) {
    let r = i(n, e);
    r && t.push(r);
  }
  return t.length ? n.update({ effects: t, annotations: By.of(!0) }) : null;
}
function Zy(n) {
  setTimeout(() => {
    let e = n.hasFocus;
    if (e != n.inputState.notifiedFocused) {
      let t = zy(n.state, e);
      t ? n.dispatch(t) : n.update([]);
    }
  }, 10);
}
un.focus = (n) => {
  n.inputState.lastFocusTime = Date.now(), !n.scrollDOM.scrollTop && (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) && (n.scrollDOM.scrollTop = n.inputState.lastScrollTop, n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft), Zy(n);
};
un.blur = (n) => {
  n.observer.clearSelectionRange(), Zy(n);
};
un.compositionstart = un.compositionupdate = (n) => {
  n.observer.editContext || (n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0));
};
un.compositionend = (n) => {
  n.observer.editContext || (n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionPendingKey = !0, n.inputState.compositionPendingChange = n.observer.pendingRecords().length > 0, n.inputState.compositionFirstChange = null, H.chrome && H.android ? n.observer.flushSoon() : n.inputState.compositionPendingChange ? Promise.resolve().then(() => n.observer.flush()) : setTimeout(() => {
    n.inputState.composing < 0 && n.docView.hasComposition && n.update([]);
  }, 50));
};
un.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now();
};
bn.beforeinput = (n, e) => {
  var t, i;
  if (e.inputType == "insertReplacementText" && n.observer.editContext) {
    let s = (t = e.dataTransfer) === null || t === void 0 ? void 0 : t.getData("text/plain"), o = e.getTargetRanges();
    if (s && o.length) {
      let a = o[0], l = n.posAtDOM(a.startContainer, a.startOffset), c = n.posAtDOM(a.endContainer, a.endOffset);
      return Vh(n, { from: l, to: c, insert: n.state.toText(s) }, null), !0;
    }
  }
  let r;
  if (H.chrome && H.android && (r = My.find((s) => s.inputType == e.inputType)) && (n.observer.delayAndroidKey(r.key, r.keyCode), r.key == "Backspace" || r.key == "Delete")) {
    let s = ((i = window.visualViewport) === null || i === void 0 ? void 0 : i.height) || 0;
    setTimeout(() => {
      var o;
      (((o = window.visualViewport) === null || o === void 0 ? void 0 : o.height) || 0) > s + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
    }, 100);
  }
  return H.ios && e.inputType == "deleteContentForward" && n.observer.flushSoon(), H.safari && e.inputType == "insertText" && n.inputState.composing >= 0 && setTimeout(() => un.compositionend(n, e), 20), !1;
};
const Mp = /* @__PURE__ */ new Set();
function _$(n) {
  Mp.has(n) || (Mp.add(n), n.addEventListener("copy", () => {
  }), n.addEventListener("cut", () => {
  }));
}
const Np = ["pre-wrap", "normal", "pre-line", "break-spaces"];
let yr = !1;
function Ip() {
  yr = !1;
}
class Q$ {
  constructor(e) {
    this.lineWrapping = e, this.doc = Te.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(e, t) {
    let i = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (i += Math.max(0, Math.ceil((t - e - i * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / Math.max(1, this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return Np.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let i = 0; i < e.length; i++) {
      let r = e[i];
      r < 0 ? i++ : this.heightSamples[Math.floor(r * 10)] || (t = !0, this.heightSamples[Math.floor(r * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, i, r, s, o) {
    let a = Np.indexOf(e) > -1, l = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != a;
    if (this.lineWrapping = a, this.lineHeight = t, this.charWidth = i, this.textHeight = r, this.lineLength = s, l) {
      this.heightSamples = {};
      for (let c = 0; c < o.length; c++) {
        let u = o[c];
        u < 0 ? c++ : this.heightSamples[Math.floor(u * 10)] = !0;
      }
    }
    return l;
  }
}
class C$ {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class An {
  /**
  @internal
  */
  constructor(e, t, i, r, s) {
    this.from = e, this.length = t, this.top = i, this.height = r, this._content = s;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? At.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof xi ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new An(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
}
var Ue = /* @__PURE__ */ function(n) {
  return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}(Ue || (Ue = {}));
const la = 1e-3;
class $t {
  constructor(e, t, i = 2) {
    this.length = e, this.height = t, this.flags = i;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e) {
    this.height != e && (Math.abs(this.height - e) > la && (yr = !0), this.height = e);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, i) {
    return $t.of(i);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, i, r) {
    let s = this, o = i.doc;
    for (let a = r.length - 1; a >= 0; a--) {
      let { fromA: l, toA: c, fromB: u, toB: h } = r[a], f = s.lineAt(l, Ue.ByPosNoHeight, i.setDoc(t), 0, 0), d = f.to >= c ? f : s.lineAt(c, Ue.ByPosNoHeight, i, 0, 0);
      for (h += d.to - c, c = d.to; a > 0 && f.from <= r[a - 1].toA; )
        l = r[a - 1].fromA, u = r[a - 1].fromB, a--, l < f.from && (f = s.lineAt(l, Ue.ByPosNoHeight, i, 0, 0));
      u += f.from - l, l = f.from;
      let p = Yh.build(i.setDoc(o), e, u, h);
      s = Pa(s, s.replace(l, c, p));
    }
    return s.updateHeight(i, 0);
  }
  static empty() {
    return new jt(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, i = e.length, r = 0, s = 0;
    for (; ; )
      if (t == i)
        if (r > s * 2) {
          let a = e[t - 1];
          a.break ? e.splice(--t, 1, a.left, null, a.right) : e.splice(--t, 1, a.left, a.right), i += 1 + a.break, r -= a.size;
        } else if (s > r * 2) {
          let a = e[i];
          a.break ? e.splice(i, 1, a.left, null, a.right) : e.splice(i, 1, a.left, a.right), i += 2 + a.break, s -= a.size;
        } else
          break;
      else if (r < s) {
        let a = e[t++];
        a && (r += a.size);
      } else {
        let a = e[--i];
        a && (s += a.size);
      }
    let o = 0;
    return e[t - 1] == null ? (o = 1, t--) : e[t] == null && (o = 1, i++), new T$($t.of(e.slice(0, t)), o, $t.of(e.slice(i)));
  }
}
function Pa(n, e) {
  return n == e ? n : (n.constructor != e.constructor && (yr = !0), e);
}
$t.prototype.size = 1;
class Xy extends $t {
  constructor(e, t, i) {
    super(e, t), this.deco = i;
  }
  blockAt(e, t, i, r) {
    return new An(r, this.length, i, this.height, this.deco || 0);
  }
  lineAt(e, t, i, r, s) {
    return this.blockAt(0, i, r, s);
  }
  forEachLine(e, t, i, r, s, o) {
    e <= s + this.length && t >= s && o(this.blockAt(0, i, r, s));
  }
  updateHeight(e, t = 0, i = !1, r) {
    return r && r.from <= t && r.more && this.setHeight(r.heights[r.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class jt extends Xy {
  constructor(e, t) {
    super(e, t, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, t, i, r) {
    return new An(r, this.length, i, this.height, this.breaks);
  }
  replace(e, t, i) {
    let r = i[0];
    return i.length == 1 && (r instanceof jt || r instanceof Ot && r.flags & 4) && Math.abs(this.length - r.length) < 10 ? (r instanceof Ot ? r = new jt(r.length, this.height) : r.height = this.height, this.outdated || (r.outdated = !1), r) : $t.of(i);
  }
  updateHeight(e, t = 0, i = !1, r) {
    return r && r.from <= t && r.more ? this.setHeight(r.heights[r.index++]) : (i || this.outdated) && this.setHeight(Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class Ot extends $t {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, t) {
    let i = e.doc.lineAt(t).number, r = e.doc.lineAt(t + this.length).number, s = r - i + 1, o, a = 0;
    if (e.lineWrapping) {
      let l = Math.min(this.height, e.lineHeight * s);
      o = l / s, this.length > s + 1 && (a = (this.height - l) / (this.length - s - 1));
    } else
      o = this.height / s;
    return { firstLine: i, lastLine: r, perLine: o, perChar: a };
  }
  blockAt(e, t, i, r) {
    let { firstLine: s, lastLine: o, perLine: a, perChar: l } = this.heightMetrics(t, r);
    if (t.lineWrapping) {
      let c = r + (e < t.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (e - i) / this.height)) * this.length)), u = t.doc.lineAt(c), h = a + u.length * l, f = Math.max(i, e - h / 2);
      return new An(u.from, u.length, f, h, 0);
    } else {
      let c = Math.max(0, Math.min(o - s, Math.floor((e - i) / a))), { from: u, length: h } = t.doc.line(s + c);
      return new An(u, h, i + a * c, a, 0);
    }
  }
  lineAt(e, t, i, r, s) {
    if (t == Ue.ByHeight)
      return this.blockAt(e, i, r, s);
    if (t == Ue.ByPosNoHeight) {
      let { from: d, to: p } = i.doc.lineAt(e);
      return new An(d, p - d, 0, 0, 0);
    }
    let { firstLine: o, perLine: a, perChar: l } = this.heightMetrics(i, s), c = i.doc.lineAt(e), u = a + c.length * l, h = c.number - o, f = r + a * h + l * (c.from - s - h);
    return new An(c.from, c.length, Math.max(r, Math.min(f, r + this.height - u)), u, 0);
  }
  forEachLine(e, t, i, r, s, o) {
    e = Math.max(e, s), t = Math.min(t, s + this.length);
    let { firstLine: a, perLine: l, perChar: c } = this.heightMetrics(i, s);
    for (let u = e, h = r; u <= t; ) {
      let f = i.doc.lineAt(u);
      if (u == e) {
        let p = f.number - a;
        h += l * p + c * (e - s - p);
      }
      let d = l + c * f.length;
      o(new An(f.from, f.length, h, d, 0)), h += d, u = f.to + 1;
    }
  }
  replace(e, t, i) {
    let r = this.length - t;
    if (r > 0) {
      let s = i[i.length - 1];
      s instanceof Ot ? i[i.length - 1] = new Ot(s.length + r) : i.push(null, new Ot(r - 1));
    }
    if (e > 0) {
      let s = i[0];
      s instanceof Ot ? i[0] = new Ot(e + s.length) : i.unshift(new Ot(e - 1), null);
    }
    return $t.of(i);
  }
  decomposeLeft(e, t) {
    t.push(new Ot(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new Ot(this.length - e - 1));
  }
  updateHeight(e, t = 0, i = !1, r) {
    let s = t + this.length;
    if (r && r.from <= t + this.length && r.more) {
      let o = [], a = Math.max(t, r.from), l = -1;
      for (r.from > t && o.push(new Ot(r.from - t - 1).updateHeight(e, t)); a <= s && r.more; ) {
        let u = e.doc.lineAt(a).length;
        o.length && o.push(null);
        let h = r.heights[r.index++];
        l == -1 ? l = h : Math.abs(h - l) >= la && (l = -2);
        let f = new jt(u, h);
        f.outdated = !1, o.push(f), a += u + 1;
      }
      a <= s && o.push(null, new Ot(s - a).updateHeight(e, a));
      let c = $t.of(o);
      return (l < 0 || Math.abs(c.height - this.height) >= la || Math.abs(l - this.heightMetrics(e, t).perLine) >= la) && (yr = !0), Pa(this, c);
    } else (i || this.outdated) && (this.setHeight(e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class T$ extends $t {
  constructor(e, t, i) {
    super(e.length + t + i.length, e.height + i.height, t | (e.outdated || i.outdated ? 2 : 0)), this.left = e, this.right = i, this.size = e.size + i.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, i, r) {
    let s = i + this.left.height;
    return e < s ? this.left.blockAt(e, t, i, r) : this.right.blockAt(e, t, s, r + this.left.length + this.break);
  }
  lineAt(e, t, i, r, s) {
    let o = r + this.left.height, a = s + this.left.length + this.break, l = t == Ue.ByHeight ? e < o : e < a, c = l ? this.left.lineAt(e, t, i, r, s) : this.right.lineAt(e, t, i, o, a);
    if (this.break || (l ? c.to < a : c.from > a))
      return c;
    let u = t == Ue.ByPosNoHeight ? Ue.ByPosNoHeight : Ue.ByPos;
    return l ? c.join(this.right.lineAt(a, u, i, o, a)) : this.left.lineAt(a, u, i, r, s).join(c);
  }
  forEachLine(e, t, i, r, s, o) {
    let a = r + this.left.height, l = s + this.left.length + this.break;
    if (this.break)
      e < l && this.left.forEachLine(e, t, i, r, s, o), t >= l && this.right.forEachLine(e, t, i, a, l, o);
    else {
      let c = this.lineAt(l, Ue.ByPos, i, r, s);
      e < c.from && this.left.forEachLine(e, c.from - 1, i, r, s, o), c.to >= e && c.from <= t && o(c), t > c.to && this.right.forEachLine(c.to + 1, t, i, a, l, o);
    }
  }
  replace(e, t, i) {
    let r = this.left.length + this.break;
    if (t < r)
      return this.balanced(this.left.replace(e, t, i), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - r, t - r, i));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let o = s.length;
    for (let a of i)
      s.push(a);
    if (e > 0 && Lp(s, o - 1), t < this.length) {
      let a = s.length;
      this.decomposeRight(t, s), Lp(s, a);
    }
    return $t.of(s);
  }
  decomposeLeft(e, t) {
    let i = this.left.length;
    if (e <= i)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (i++, e >= i && t.push(null)), e > i && this.right.decomposeLeft(e - i, t);
  }
  decomposeRight(e, t) {
    let i = this.left.length, r = i + this.break;
    if (e >= r)
      return this.right.decomposeRight(e - r, t);
    e < i && this.left.decomposeRight(e, t), this.break && e < r && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? $t.of(this.break ? [e, null, t] : [e, t]) : (this.left = Pa(this.left, e), this.right = Pa(this.right, t), this.setHeight(e.height + t.height), this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, i = !1, r) {
    let { left: s, right: o } = this, a = t + s.length + this.break, l = null;
    return r && r.from <= t + s.length && r.more ? l = s = s.updateHeight(e, t, i, r) : s.updateHeight(e, t, i), r && r.from <= a + o.length && r.more ? l = o = o.updateHeight(e, a, i, r) : o.updateHeight(e, a, i), l ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function Lp(n, e) {
  let t, i;
  n[e] == null && (t = n[e - 1]) instanceof Ot && (i = n[e + 1]) instanceof Ot && n.splice(e - 1, 3, new Ot(t.length + 1 + i.length));
}
const P$ = 5;
class Yh {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let i = Math.min(t, this.lineEnd), r = this.nodes[this.nodes.length - 1];
      r instanceof jt ? r.length += i - this.pos : (i > this.pos || !this.isCovered) && this.nodes.push(new jt(i - this.pos, -1)), this.writtenTo = i, t > i && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, i) {
    if (e < t || i.heightRelevant) {
      let r = i.widget ? i.widget.estimatedHeight : 0, s = i.widget ? i.widget.lineBreaks : 0;
      r < 0 && (r = this.oracle.lineHeight);
      let o = t - e;
      i.block ? this.addBlock(new Xy(o, r, i)) : (o || s || r >= P$) && this.addLineDeco(r, s, o);
    } else t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new jt(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let i = new Ot(t - e);
    return this.oracle.doc.lineAt(e).to == t && (i.flags |= 4), i;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof jt)
      return e;
    let t = new jt(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine();
    let t = e.deco;
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, t && t.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, t, i) {
    let r = this.ensureLine();
    r.length += i, r.collapsed += i, r.widgetHeight = Math.max(r.widgetHeight, e), r.breaks += t, this.writtenTo = this.pos = this.pos + i;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof jt) && !this.isCovered ? this.nodes.push(new jt(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i = e;
    for (let r of this.nodes)
      r instanceof jt && r.updateHeight(this.oracle, i), i += r ? r.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, i, r) {
    let s = new Yh(i, e);
    return $e.spans(t, i, r, s, 0), s.finish(i);
  }
}
function A$(n, e, t) {
  let i = new $$();
  return $e.compare(n, e, t, i, 0), i.changes;
}
class $$ {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, i, r) {
    (e < t || i && i.heightRelevant || r && r.heightRelevant) && oa(e, t, this.changes, 5);
  }
}
function R$(n, e) {
  let t = n.getBoundingClientRect(), i = n.ownerDocument, r = i.defaultView || window, s = Math.max(0, t.left), o = Math.min(r.innerWidth, t.right), a = Math.max(0, t.top), l = Math.min(r.innerHeight, t.bottom);
  for (let c = n.parentNode; c && c != i.body; )
    if (c.nodeType == 1) {
      let u = c, h = window.getComputedStyle(u);
      if ((u.scrollHeight > u.clientHeight || u.scrollWidth > u.clientWidth) && h.overflow != "visible") {
        let f = u.getBoundingClientRect();
        s = Math.max(s, f.left), o = Math.min(o, f.right), a = Math.max(a, f.top), l = Math.min(c == n.parentNode ? r.innerHeight : l, f.bottom);
      }
      c = h.position == "absolute" || h.position == "fixed" ? u.offsetParent : u.parentNode;
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
  return {
    left: s - t.left,
    right: Math.max(s, o) - t.left,
    top: a - (t.top + e),
    bottom: Math.max(a, l) - (t.top + e)
  };
}
function M$(n) {
  let e = n.getBoundingClientRect(), t = n.ownerDocument.defaultView || window;
  return e.left < t.innerWidth && e.right > 0 && e.top < t.innerHeight && e.bottom > 0;
}
function N$(n, e) {
  let t = n.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
class ec {
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.size = i, this.displaySize = r;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let i = 0; i < e.length; i++) {
      let r = e[i], s = t[i];
      if (r.from != s.from || r.to != s.to || r.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e, t) {
    return ae.replace({
      widget: new I$(this.displaySize * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to);
  }
}
class I$ extends Zn {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class Dp {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !1, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = Bp, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = Ge.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let t = e.facet(Zh).some((i) => typeof i != "function" && i.class == "cm-lineWrapping");
    this.heightOracle = new Q$(t), this.stateDeco = e.facet(Ps).filter((i) => typeof i != "function"), this.heightMap = $t.empty().applyChanges(this.stateDeco, Te.empty, this.heightOracle.setDoc(e.doc), [new cn(0, 0, 0, e.doc.length)]);
    for (let i = 0; i < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); i++)
      ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = ae.set(this.lineGaps.map((i) => i.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let r = i ? t.head : t.anchor;
      if (!e.some(({ from: s, to: o }) => r >= s && r <= o)) {
        let { from: s, to: o } = this.lineBlockAt(r);
        e.push(new Lo(s, o));
      }
    }
    return this.viewports = e.sort((i, r) => i.from - r.from), this.updateScaler();
  }
  updateScaler() {
    let e = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? Bp : new Fh(this.heightOracle, this.heightMap, this.viewports), e.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(us(e, this.scaler));
    });
  }
  update(e, t = null) {
    this.state = e.state;
    let i = this.stateDeco;
    this.stateDeco = this.state.facet(Ps).filter((u) => typeof u != "function");
    let r = e.changedRanges, s = cn.extendWithRanges(r, A$(i, this.stateDeco, e ? e.changes : ct.empty(this.state.doc.length))), o = this.heightMap.height, a = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    Ip(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), (this.heightMap.height != o || yr) && (e.flags |= 2), a ? (this.scrollAnchorPos = e.changes.mapPos(a.from, -1), this.scrollAnchorHeight = a.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = o);
    let l = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < l.from || t.range.head > l.to) || !this.viewportIsAppropriate(l)) && (l = this.getViewport(0, t));
    let c = l.from != this.viewport.from || l.to != this.viewport.to;
    this.viewport = l, e.flags |= this.updateForViewport(), (c || !e.changes.empty || e.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(e.changes), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(vy) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, i = window.getComputedStyle(t), r = this.heightOracle, s = i.whiteSpace;
    this.defaultTextDirection = i.direction == "rtl" ? Ge.RTL : Ge.LTR;
    let o = this.heightOracle.mustRefreshForWrapping(s), a = t.getBoundingClientRect(), l = o || this.mustMeasureContent || this.contentDOMHeight != a.height;
    this.contentDOMHeight = a.height, this.mustMeasureContent = !1;
    let c = 0, u = 0;
    if (a.width && a.height) {
      let { scaleX: _, scaleY: v } = Hb(t, a);
      (_ > 5e-3 && Math.abs(this.scaleX - _) > 5e-3 || v > 5e-3 && Math.abs(this.scaleY - v) > 5e-3) && (this.scaleX = _, this.scaleY = v, c |= 16, o = l = !0);
    }
    let h = (parseInt(i.paddingTop) || 0) * this.scaleY, f = (parseInt(i.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != h || this.paddingBottom != f) && (this.paddingTop = h, this.paddingBottom = f, c |= 18), this.editorWidth != e.scrollDOM.clientWidth && (r.lineWrapping && (l = !0), this.editorWidth = e.scrollDOM.clientWidth, c |= 16);
    let d = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d && (this.scrollAnchorHeight = -1, this.scrollTop = d), this.scrolledToBottom = ey(e.scrollDOM);
    let p = (this.printing ? N$ : R$)(t, this.paddingTop), m = p.top - this.pixelViewport.top, O = p.bottom - this.pixelViewport.bottom;
    this.pixelViewport = p;
    let g = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (g != this.inView && (this.inView = g, g && (l = !0)), !this.inView && !this.scrollTarget && !M$(e.dom))
      return 0;
    let y = a.width;
    if ((this.contentDOMWidth != y || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = a.width, this.editorHeight = e.scrollDOM.clientHeight, c |= 16), l) {
      let _ = e.docView.measureVisibleLineHeights(this.viewport);
      if (r.mustRefreshForHeights(_) && (o = !0), o || r.lineWrapping && Math.abs(y - this.contentDOMWidth) > r.charWidth) {
        let { lineHeight: v, charWidth: x, textHeight: C } = e.docView.measureTextSize();
        o = v > 0 && r.refresh(s, v, x, C, Math.max(5, y / x), _), o && (e.docView.minWidth = 0, c |= 16);
      }
      m > 0 && O > 0 ? u = Math.max(m, O) : m < 0 && O < 0 && (u = Math.min(m, O)), Ip();
      for (let v of this.viewports) {
        let x = v.from == this.viewport.from ? _ : e.docView.measureVisibleLineHeights(v);
        this.heightMap = (o ? $t.empty().applyChanges(this.stateDeco, Te.empty, this.heightOracle, [new cn(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(r, 0, o, new C$(v.from, x));
      }
      yr && (c |= 2);
    }
    let S = !this.viewportIsAppropriate(this.viewport, u) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return S && (c & 2 && (c |= this.updateScaler()), this.viewport = this.getViewport(u, this.scrollTarget), c |= this.updateForViewport()), (c & 2 || S) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), c |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), c;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let i = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), r = this.heightMap, s = this.heightOracle, { visibleTop: o, visibleBottom: a } = this, l = new Lo(r.lineAt(o - i * 1e3, Ue.ByHeight, s, 0, 0).from, r.lineAt(a + (1 - i) * 1e3, Ue.ByHeight, s, 0, 0).to);
    if (t) {
      let { head: c } = t.range;
      if (c < l.from || c > l.to) {
        let u = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), h = r.lineAt(c, Ue.ByPos, s, 0, 0), f;
        t.y == "center" ? f = (h.top + h.bottom) / 2 - u / 2 : t.y == "start" || t.y == "nearest" && c < l.from ? f = h.top : f = h.bottom - u, l = new Lo(r.lineAt(f - 1e3 / 2, Ue.ByHeight, s, 0, 0).from, r.lineAt(f + u + 1e3 / 2, Ue.ByHeight, s, 0, 0).to);
      }
    }
    return l;
  }
  mapViewport(e, t) {
    let i = t.mapPos(e.from, -1), r = t.mapPos(e.to, 1);
    return new Lo(this.heightMap.lineAt(i, Ue.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(r, Ue.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, i = 0) {
    if (!this.inView)
      return !0;
    let { top: r } = this.heightMap.lineAt(e, Ue.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(t, Ue.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: a } = this;
    return (e == 0 || r <= o - Math.max(10, Math.min(
      -i,
      250
      /* VP.MaxCoverMargin */
    ))) && (t == this.state.doc.length || s >= a + Math.max(10, Math.min(
      i,
      250
      /* VP.MaxCoverMargin */
    ))) && r > o - 2 * 1e3 && s < a + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let i = [];
    for (let r of e)
      t.touchesRange(r.from, r.to) || i.push(new ec(t.mapPos(r.from), t.mapPos(r.to), r.size, r.displaySize));
    return i;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let i = this.heightOracle.lineWrapping, r = i ? 1e4 : 2e3, s = r >> 1, o = r << 1;
    if (this.defaultTextDirection != Ge.LTR && !i)
      return [];
    let a = [], l = (u, h, f, d) => {
      if (h - u < s)
        return;
      let p = this.state.selection.main, m = [p.from];
      p.empty || m.push(p.to);
      for (let g of m)
        if (g > u && g < h) {
          l(u, g - 10, f, d), l(g + 10, h, f, d);
          return;
        }
      let O = D$(e, (g) => g.from >= f.from && g.to <= f.to && Math.abs(g.from - u) < s && Math.abs(g.to - h) < s && !m.some((y) => g.from < y && g.to > y));
      if (!O) {
        if (h < f.to && t && i && t.visibleRanges.some((S) => S.from <= h && S.to >= h)) {
          let S = t.moveToLineBoundary(I.cursor(h), !1, !0).head;
          S > u && (h = S);
        }
        let g = this.gapSize(f, u, h, d), y = i || g < 2e6 ? g : 2e6;
        O = new ec(u, h, g, y);
      }
      a.push(O);
    }, c = (u) => {
      if (u.length < o || u.type != At.Text)
        return;
      let h = L$(u.from, u.to, this.stateDeco);
      if (h.total < o)
        return;
      let f = this.scrollTarget ? this.scrollTarget.range.head : null, d, p;
      if (i) {
        let m = r / this.heightOracle.lineLength * this.heightOracle.lineHeight, O, g;
        if (f != null) {
          let y = Bo(h, f), S = ((this.visibleBottom - this.visibleTop) / 2 + m) / u.height;
          O = y - S, g = y + S;
        } else
          O = (this.visibleTop - u.top - m) / u.height, g = (this.visibleBottom - u.top + m) / u.height;
        d = Do(h, O), p = Do(h, g);
      } else {
        let m = h.total * this.heightOracle.charWidth, O = r * this.heightOracle.charWidth, g = 0;
        if (m > 2e6)
          for (let x of e)
            x.from >= u.from && x.from < u.to && x.size != x.displaySize && x.from * this.heightOracle.charWidth + g < this.pixelViewport.left && (g = x.size - x.displaySize);
        let y = this.pixelViewport.left + g, S = this.pixelViewport.right + g, _, v;
        if (f != null) {
          let x = Bo(h, f), C = ((S - y) / 2 + O) / m;
          _ = x - C, v = x + C;
        } else
          _ = (y - O) / m, v = (S + O) / m;
        d = Do(h, _), p = Do(h, v);
      }
      d > u.from && l(u.from, d, u, h), p < u.to && l(p, u.to, u, h);
    };
    for (let u of this.viewportLines)
      Array.isArray(u.type) ? u.type.forEach(c) : c(u);
    return a;
  }
  gapSize(e, t, i, r) {
    let s = Bo(r, i) - Bo(r, t);
    return this.heightOracle.lineWrapping ? e.height * s : r.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    ec.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = ae.set(e.map((t) => t.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges(e) {
    let t = this.stateDeco;
    this.lineGaps.length && (t = t.concat(this.lineGapDeco));
    let i = [];
    $e.spans(t, this.viewport.from, this.viewport.to, {
      span(s, o) {
        i.push({ from: s, to: o });
      },
      point() {
      }
    }, 20);
    let r = 0;
    if (i.length != this.visibleRanges.length)
      r = 12;
    else
      for (let s = 0; s < i.length && !(r & 8); s++) {
        let o = this.visibleRanges[s], a = i[s];
        (o.from != a.from || o.to != a.to) && (r |= 4, e && e.mapPos(o.from, -1) == a.from && e.mapPos(o.to, 1) == a.to || (r |= 8));
      }
    return this.visibleRanges = i, r;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || us(this.heightMap.lineAt(e, Ue.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return e >= this.viewportLines[0].top && e <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((t) => t.top <= e && t.bottom >= e) || us(this.heightMap.lineAt(this.scaler.fromDOM(e), Ue.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8);
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return us(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class Lo {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
function L$(n, e, t) {
  let i = [], r = n, s = 0;
  return $e.spans(t, n, e, {
    span() {
    },
    point(o, a) {
      o > r && (i.push({ from: r, to: o }), s += o - r), r = a;
    }
  }, 20), r < e && (i.push({ from: r, to: e }), s += e - r), { total: s, ranges: i };
}
function Do({ total: n, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let i = Math.floor(n * t);
  for (let r = 0; ; r++) {
    let { from: s, to: o } = e[r], a = o - s;
    if (i <= a)
      return s + i;
    i -= a;
  }
}
function Bo(n, e) {
  let t = 0;
  for (let { from: i, to: r } of n.ranges) {
    if (e <= r) {
      t += e - i;
      break;
    }
    t += r - i;
  }
  return t / n.total;
}
function D$(n, e) {
  for (let t of n)
    if (e(t))
      return t;
}
const Bp = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1,
  eq(n) {
    return n == this;
  }
};
class Fh {
  constructor(e, t, i) {
    let r = 0, s = 0, o = 0;
    this.viewports = i.map(({ from: a, to: l }) => {
      let c = t.lineAt(a, Ue.ByPos, e, 0, 0).top, u = t.lineAt(l, Ue.ByPos, e, 0, 0).bottom;
      return r += u - c, { from: a, to: l, top: c, bottom: u, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - r) / (t.height - r);
    for (let a of this.viewports)
      a.domTop = o + (a.top - s) * this.scale, o = a.domBottom = a.domTop + (a.bottom - a.top), s = a.bottom;
  }
  toDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.top)
        return r + (e - i) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      i = s.bottom, r = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.domTop)
        return i + (e - r) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      i = s.bottom, r = s.domBottom;
    }
  }
  eq(e) {
    return e instanceof Fh ? this.scale == e.scale && this.viewports.length == e.viewports.length && this.viewports.every((t, i) => t.from == e.viewports[i].from && t.to == e.viewports[i].to) : !1;
  }
}
function us(n, e) {
  if (e.scale == 1)
    return n;
  let t = e.toDOM(n.top), i = e.toDOM(n.bottom);
  return new An(n.from, n.length, t, i - t, Array.isArray(n._content) ? n._content.map((r) => us(r, e)) : n._content);
}
const zo = /* @__PURE__ */ K.define({ combine: (n) => n.join(" ") }), $u = /* @__PURE__ */ K.define({ combine: (n) => n.indexOf(!0) > -1 }), Ru = /* @__PURE__ */ bi.newName(), qy = /* @__PURE__ */ bi.newName(), Vy = /* @__PURE__ */ bi.newName(), Yy = { "&light": "." + qy, "&dark": "." + Vy };
function Mu(n, e, t) {
  return new bi(e, {
    finish(i) {
      return /&/.test(i) ? i.replace(/&\w*/, (r) => {
        if (r == "&")
          return n;
        if (!t || !t[r])
          throw new RangeError(`Unsupported selector: ${r}`);
        return t[r];
      }) : n + " " + i;
    }
  });
}
const B$ = /* @__PURE__ */ Mu("." + Ru, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    zIndex: 200
  },
  ".cm-gutters-before": { insetInlineStart: 0 },
  ".cm-gutters-after": { insetInlineEnd: 0 },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    border: "0px solid #ddd",
    "&.cm-gutters-before": { borderRightWidth: "1px" },
    "&.cm-gutters-after": { borderLeftWidth: "1px" }
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-dialog": {
    padding: "2px 19px 4px 6px",
    position: "relative",
    "& label": { fontSize: "80%" }
  },
  ".cm-dialog-close": {
    position: "absolute",
    top: "3px",
    right: "4px",
    backgroundColor: "inherit",
    border: "none",
    font: "inherit",
    fontSize: "14px",
    padding: "0"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top",
    userSelect: "none"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, Yy), z$ = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, tc = H.ie && H.ie_version <= 11;
class Z$ {
  constructor(e) {
    this.view = e, this.active = !1, this.editContext = null, this.selectionRange = new SA(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((t) => {
      for (let i of t)
        this.queue.push(i);
      (H.ie && H.ie_version <= 11 || H.ios && e.composing) && t.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && H.android && e.constructor.EDIT_CONTEXT !== !1 && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(H.chrome && H.chrome_version < 126) && (this.editContext = new q$(e), e.state.facet(Hn) && (e.contentDOM.editContext = this.editContext.editContext)), tc && (this.onCharData = (t) => {
      this.queue.push({
        target: t.target,
        type: "characterData",
        oldValue: t.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var t;
      ((t = this.view.docView) === null || t === void 0 ? void 0 : t.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((t) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), t.length > 0 && t[t.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((t) => {
      t.length > 0 && t[t.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(e) {
    (e.type == "change" || !e.type) && !e.matches || (this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, i) => t != e[i]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i } = this, r = this.selectionRange;
    if (i.state.facet(Hn) ? i.root.activeElement != this.dom : !sa(this.dom, r))
      return;
    let s = r.anchorNode && i.docView.nearest(r.anchorNode);
    if (s && s.ignoreEvent(e)) {
      t || (this.selectionChanged = !1);
      return;
    }
    (H.ie && H.ie_version <= 11 || H.android && H.chrome) && !i.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    r.focusNode && bs(r.focusNode, r.focusOffset, r.anchorNode, r.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, t = Ts(e.root);
    if (!t)
      return !1;
    let i = H.safari && e.root.nodeType == 11 && e.root.activeElement == this.dom && X$(this.view, t) || t;
    if (!i || this.selectionRange.eq(i))
      return !1;
    let r = sa(this.dom, i);
    return r && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && vA(this.dom, i) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(i), r && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let i = this.dom; i; )
      if (i.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == i ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(i), i = i.assignedSlot || i.parentNode;
      else if (i.nodeType == 11)
        i = i.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let i of this.scrollTargets)
        i.removeEventListener("scroll", this.onScroll);
      for (let i of this.scrollTargets = t)
        i.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, z$), tc && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), tc && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var i;
    if (!this.delayedAndroidKey) {
      let r = () => {
        let s = this.delayedAndroidKey;
        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && cr(this.dom, s.key, s.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(r);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: t,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i = this.delayedAndroidKey) === null || i === void 0) && i.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let t = -1, i = -1, r = !1;
    for (let s of e) {
      let o = this.readMutation(s);
      o && (o.typeOver && (r = !0), t == -1 ? { from: t, to: i } = o : (t = Math.min(o.from, t), i = Math.max(o.to, i)));
    }
    return { from: t, to: i, typeOver: r };
  }
  readChange() {
    let { from: e, to: t, typeOver: i } = this.processRecords(), r = this.selectionChanged && sa(this.dom, this.selectionRange);
    if (e < 0 && !r)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let s = new s$(this.view, e, t, i);
    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let t = this.readChange();
    if (!t)
      return this.view.requestMeasure(), !1;
    let i = this.view.state, r = Ry(this.view, t);
    return this.view.state == i && (t.domChanged || t.newSel && !t.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), r;
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.flags |= 4), e.type == "childList") {
      let i = zp(t, e.previousSibling || e.target.previousSibling, -1), r = zp(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: i ? t.posAfter(i) : t.posAtStart,
        to: r ? t.posBefore(r) : t.posAtEnd,
        typeOver: !1
      };
    } else return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(e) {
    this.editContext && (this.editContext.update(e), e.startState.facet(Hn) != e.state.facet(Hn) && (e.view.contentDOM.editContext = e.state.facet(Hn) ? this.editContext.editContext : null));
  }
  destroy() {
    var e, t, i;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (i = this.resizeScroll) === null || i === void 0 || i.disconnect();
    for (let r of this.scrollTargets)
      r.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
}
function zp(n, e, t) {
  for (; e; ) {
    let i = ze.get(e);
    if (i && i.parent == n)
      return i;
    let r = e.parentNode;
    e = r != n.dom ? r : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function Zp(n, e) {
  let t = e.startContainer, i = e.startOffset, r = e.endContainer, s = e.endOffset, o = n.docView.domAtPos(n.state.selection.main.anchor);
  return bs(o.node, o.offset, r, s) && ([t, i, r, s] = [r, s, t, i]), { anchorNode: t, anchorOffset: i, focusNode: r, focusOffset: s };
}
function X$(n, e) {
  if (e.getComposedRanges) {
    let r = e.getComposedRanges(n.root)[0];
    if (r)
      return Zp(n, r);
  }
  let t = null;
  function i(r) {
    r.preventDefault(), r.stopImmediatePropagation(), t = r.getTargetRanges()[0];
  }
  return n.contentDOM.addEventListener("beforeinput", i, !0), n.dom.ownerDocument.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", i, !0), t ? Zp(n, t) : null;
}
class q$ {
  constructor(e) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(e.state);
    let t = this.editContext = new window.EditContext({
      text: e.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, e.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(e.state.selection.main.head)
    });
    this.handlers.textupdate = (i) => {
      let r = e.state.selection.main, { anchor: s, head: o } = r, a = this.toEditorPos(i.updateRangeStart), l = this.toEditorPos(i.updateRangeEnd);
      e.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: i.updateRangeStart, editorBase: a, drifted: !1 });
      let c = { from: a, to: l, insert: Te.of(i.text.split(`
`)) };
      if (c.from == this.from && s < this.from ? c.from = s : c.to == this.to && s > this.to && (c.to = s), c.from == c.to && !c.insert.length) {
        let u = I.single(this.toEditorPos(i.selectionStart), this.toEditorPos(i.selectionEnd));
        u.main.eq(r) || e.dispatch({ selection: u, userEvent: "select" });
        return;
      }
      if ((H.mac || H.android) && c.from == o - 1 && /^\. ?$/.test(i.text) && e.contentDOM.getAttribute("autocorrect") == "off" && (c = { from: a, to: l, insert: Te.of([i.text.replace(".", " ")]) }), this.pendingContextChange = c, !e.state.readOnly) {
        let u = this.to - this.from + (c.to - c.from + c.insert.length);
        Vh(e, c, I.single(this.toEditorPos(i.selectionStart, u), this.toEditorPos(i.selectionEnd, u)));
      }
      this.pendingContextChange && (this.revertPending(e.state), this.setSelection(e.state));
    }, this.handlers.characterboundsupdate = (i) => {
      let r = [], s = null;
      for (let o = this.toEditorPos(i.rangeStart), a = this.toEditorPos(i.rangeEnd); o < a; o++) {
        let l = e.coordsForChar(o);
        s = l && new DOMRect(l.left, l.top, l.right - l.left, l.bottom - l.top) || s || new DOMRect(), r.push(s);
      }
      t.updateCharacterBounds(i.rangeStart, r);
    }, this.handlers.textformatupdate = (i) => {
      let r = [];
      for (let s of i.getTextFormats()) {
        let o = s.underlineStyle, a = s.underlineThickness;
        if (o != "None" && a != "None") {
          let l = this.toEditorPos(s.rangeStart), c = this.toEditorPos(s.rangeEnd);
          if (l < c) {
            let u = `text-decoration: underline ${o == "Dashed" ? "dashed " : o == "Squiggle" ? "wavy " : ""}${a == "Thin" ? 1 : 2}px`;
            r.push(ae.mark({ attributes: { style: u } }).range(l, c));
          }
        }
      }
      e.dispatch({ effects: _y.of(ae.set(r)) });
    }, this.handlers.compositionstart = () => {
      e.inputState.composing < 0 && (e.inputState.composing = 0, e.inputState.compositionFirstChange = !0);
    }, this.handlers.compositionend = () => {
      if (e.inputState.composing = -1, e.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: i } = this.composing;
        this.composing = null, i && this.reset(e.state);
      }
    };
    for (let i in this.handlers)
      t.addEventListener(i, this.handlers[i]);
    this.measureReq = { read: (i) => {
      this.editContext.updateControlBounds(i.contentDOM.getBoundingClientRect());
      let r = Ts(i.root);
      r && r.rangeCount && this.editContext.updateSelectionBounds(r.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(e) {
    let t = 0, i = !1, r = this.pendingContextChange;
    return e.changes.iterChanges((s, o, a, l, c) => {
      if (i)
        return;
      let u = c.length - (o - s);
      if (r && o >= r.to)
        if (r.from == s && r.to == o && r.insert.eq(c)) {
          r = this.pendingContextChange = null, t += u, this.to += u;
          return;
        } else
          r = null, this.revertPending(e.state);
      if (s += t, o += t, o <= this.from)
        this.from += u, this.to += u;
      else if (s < this.to) {
        if (s < this.from || o > this.to || this.to - this.from + c.length > 3e4) {
          i = !0;
          return;
        }
        this.editContext.updateText(this.toContextPos(s), this.toContextPos(o), c.toString()), this.to += u;
      }
      t += u;
    }), r && !i && this.revertPending(e.state), !i;
  }
  update(e) {
    let t = this.pendingContextChange, i = e.startState.selection.main;
    this.composing && (this.composing.drifted || !e.changes.touchesRange(i.from, i.to) && e.transactions.some((r) => !r.isUserEvent("input.type") && r.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = !0, this.composing.editorBase = e.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(e) || !this.rangeIsValid(e.state) ? (this.pendingContextChange = null, this.reset(e.state)) : (e.docChanged || e.selectionSet || t) && this.setSelection(e.state), (e.geometryChanged || e.docChanged || e.selectionSet) && e.view.requestMeasure(this.measureReq);
  }
  resetRange(e) {
    let { head: t } = e.selection.main;
    this.from = Math.max(
      0,
      t - 1e4
      /* CxVp.Margin */
    ), this.to = Math.min(
      e.doc.length,
      t + 1e4
      /* CxVp.Margin */
    );
  }
  reset(e) {
    this.resetRange(e), this.editContext.updateText(0, this.editContext.text.length, e.doc.sliceString(this.from, this.to)), this.setSelection(e);
  }
  revertPending(e) {
    let t = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(t.from), this.toContextPos(t.from + t.insert.length), e.doc.sliceString(t.from, t.to));
  }
  setSelection(e) {
    let { main: t } = e.selection, i = this.toContextPos(Math.max(this.from, Math.min(this.to, t.anchor))), r = this.toContextPos(t.head);
    (this.editContext.selectionStart != i || this.editContext.selectionEnd != r) && this.editContext.updateSelection(i, r);
  }
  rangeIsValid(e) {
    let { head: t } = e.selection.main;
    return !(this.from > 0 && t - this.from < 500 || this.to < e.doc.length && this.to - t < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(e, t = this.to - this.from) {
    e = Math.min(e, t);
    let i = this.composing;
    return i && i.drifted ? i.editorBase + (e - i.contextBase) : e + this.from;
  }
  toContextPos(e) {
    let t = this.composing;
    return t && t.drifted ? t.contextBase + (e - t.editorBase) : e - this.from;
  }
  destroy() {
    for (let e in this.handlers)
      this.editContext.removeEventListener(e, this.handlers[e]);
  }
}
class U {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return !!this.inputState && this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return !!this.inputState && this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    var t;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: i } = e;
    this.dispatchTransactions = e.dispatchTransactions || i && ((r) => r.forEach((s) => i(s, this))) || ((r) => this.update(r)), this.dispatch = this.dispatch.bind(this), this._root = e.root || wA(e.parent) || document, this.viewState = new Dp(e.state || we.create(e)), e.scrollTo && e.scrollTo.is(Mo) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(rr).map((r) => new Hl(r));
    for (let r of this.plugins)
      r.update(this);
    this.observer = new Z$(this), this.inputState = new u$(this), this.inputState.ensureHandlers(this.plugins), this.docView = new yp(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((t = document.fonts) === null || t === void 0) && t.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...e) {
    let t = e.length == 1 && e[0] instanceof ot ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(t, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, i = !1, r, s = this.state;
    for (let f of e) {
      if (f.startState != s)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      s = f.state;
    }
    if (this.destroyed) {
      this.viewState.state = s;
      return;
    }
    let o = this.hasFocus, a = 0, l = null;
    e.some((f) => f.annotation(By)) ? (this.inputState.notifiedFocused = o, a = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, l = zy(s, o), l || (a = 1));
    let c = this.observer.delayedAndroidKey, u = null;
    if (c ? (this.observer.clearDelayedAndroidKey(), u = this.observer.readChange(), (u && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (u = null)) : this.observer.clear(), s.facet(we.phrases) != this.state.facet(we.phrases))
      return this.setState(s);
    r = Ta.create(this, s, e), r.flags |= a;
    let h = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let f of e) {
        if (h && (h = h.map(f.changes)), f.scrollIntoView) {
          let { main: d } = f.state.selection;
          h = new ur(d.empty ? d : I.cursor(d.head, d.head > d.anchor ? -1 : 1));
        }
        for (let d of f.effects)
          d.is(Mo) && (h = d.value.clip(this.state));
      }
      this.viewState.update(r, h), this.bidiCache = Aa.update(this.bidiCache, r.changes), r.empty || (this.updatePlugins(r), this.inputState.update(r)), t = this.docView.update(r), this.state.facet(ls) != this.styleModules && this.mountStyles(), i = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((f) => f.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (r.startState.facet(zo) != r.state.facet(zo) && (this.viewState.mustMeasureContent = !0), (t || i || h || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), t && this.docViewUpdate(), !r.empty)
      for (let f of this.state.facet(Cu))
        try {
          f(r);
        } catch (d) {
          zt(this.state, d, "update listener");
        }
    (l || u) && Promise.resolve().then(() => {
      l && this.state == l.startState && this.dispatch(l), u && !Ry(this, u) && c.force && cr(this.contentDOM, c.key, c.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let i of this.plugins)
        i.destroy(this);
      this.viewState = new Dp(e), this.plugins = e.facet(rr).map((i) => new Hl(i)), this.pluginMap.clear();
      for (let i of this.plugins)
        i.update(this);
      this.docView.destroy(), this.docView = new yp(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(rr), i = e.state.facet(rr);
    if (t != i) {
      let r = [];
      for (let s of i) {
        let o = t.indexOf(s);
        if (o < 0)
          r.push(new Hl(s));
        else {
          let a = this.plugins[o];
          a.mustUpdate = e, r.push(a);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = r, this.pluginMap.clear();
    } else
      for (let r of this.plugins)
        r.mustUpdate = e;
    for (let r = 0; r < this.plugins.length; r++)
      this.plugins[r].update(this);
    t != i && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let e of this.plugins) {
      let t = e.value;
      if (t && t.docViewUpdate)
        try {
          t.docViewUpdate(this);
        } catch (i) {
          zt(this.state, i, "doc view update listener");
        }
    }
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let t = null, i = this.scrollDOM, r = i.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState;
    Math.abs(r - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let a = 0; ; a++) {
        if (o < 0)
          if (ey(i))
            s = -1, o = this.viewState.heightMap.height;
          else {
            let d = this.viewState.scrollAnchorAt(r);
            s = d.from, o = d.top;
          }
        this.updateState = 1;
        let l = this.viewState.measure(this);
        if (!l && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (a > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let c = [];
        l & 4 || ([this.measureRequests, c] = [c, this.measureRequests]);
        let u = c.map((d) => {
          try {
            return d.read(this);
          } catch (p) {
            return zt(this.state, p), Xp;
          }
        }), h = Ta.create(this, this.state, []), f = !1;
        h.flags |= l, t ? t.flags |= l : t = h, this.updateState = 2, h.empty || (this.updatePlugins(h), this.inputState.update(h), this.updateAttrs(), f = this.docView.update(h), f && this.docViewUpdate());
        for (let d = 0; d < c.length; d++)
          if (u[d] != Xp)
            try {
              let p = c[d];
              p.write && p.write(u[d], this);
            } catch (p) {
              zt(this.state, p);
            }
        if (f && this.docView.updateSelection(!0), !h.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;
              continue;
            } else {
              let p = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - o;
              if (p > 1 || p < -1) {
                r = r + p, i.scrollTop = r / this.scaleY, o = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let a of this.state.facet(Cu))
        a(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return Ru + " " + (this.state.facet($u) ? Vy : qy) + " " + this.state.facet(zo);
  }
  updateAttrs() {
    let e = qp(this, Qy, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: this.state.facet(Hn) ? "true" : "false",
      class: "cm-content",
      style: `${H.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), qp(this, Zh, t);
    let i = this.observer.ignore(() => {
      let r = wu(this.contentDOM, this.contentAttrs, t), s = wu(this.dom, this.editorAttrs, e);
      return r || s;
    });
    return this.editorAttrs = e, this.contentAttrs = t, i;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let i of e)
      for (let r of i.effects)
        if (r.is(U.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = r.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ls);
    let e = this.state.facet(U.cspNonce);
    bi.mount(this.root, this.styleModules.concat(B$).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.plugin != e) && this.pluginMap.set(e, t = this.plugins.find((i) => i.plugin == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, i) {
    return Jl(this, e, vp(this, e, t, i));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return Jl(this, e, vp(this, e, t, (i) => t$(this, e.head, i)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, t) {
    let i = this.bidiSpans(e), r = this.textDirectionAt(e.from), s = i[t ? i.length - 1 : 0];
    return I.cursor(s.side(t, r) + e.from, s.forward(!t, r) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, i = !0) {
    return e$(this, e, t, i);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, i) {
    return Jl(this, e, n$(this, e, t, i));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), $y(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let i = this.docView.coordsAt(e, t);
    if (!i || i.left == i.right)
      return i;
    let r = this.state.doc.lineAt(e), s = this.bidiSpans(r), o = s[gi.find(s, e - r.from, -1, t)];
    return Js(i, o.dir == Ge.LTR == t > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(wy) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > V$)
      return my(e.length);
    let t = this.textDirectionAt(e.from), i;
    for (let s of this.bidiCache)
      if (s.from == e.from && s.dir == t && (s.fresh || py(s.isolates, i = bp(this, e))))
        return s.order;
    i || (i = bp(this, e));
    let r = DA(e.text, t, i);
    return this.bidiCache.push(new Aa(e.from, e.to, t, i, !0, r)), r;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || H.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      Kb(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return Mo.of(new ur(typeof e == "number" ? I.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM, i = this.viewState.scrollAnchorAt(e);
    return Mo.of(new ur(I.cursor(i.from), "start", "start", i.top - e, t, !0));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(e) {
    e == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof e == "boolean" ? this.inputState.tabFocusMode = e ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + e);
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return nt.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return nt.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let i = bi.newName(), r = [zo.of(i), ls.of(Mu(`.${i}`, e))];
    return t && t.dark && r.push($u.of(!0)), r;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return ri.lowest(ls.of(Mu("." + Ru, e, Yy)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t;
    let i = e.querySelector(".cm-content"), r = i && ze.get(i) || ze.get(e);
    return ((t = r?.rootView) === null || t === void 0 ? void 0 : t.view) || null;
  }
}
U.styleModule = ls;
U.inputHandler = ky;
U.clipboardInputFilter = Bh;
U.clipboardOutputFilter = zh;
U.scrollHandler = Ey;
U.focusChangeEffect = Sy;
U.perLineTextDirection = wy;
U.exceptionSink = xy;
U.updateListener = Cu;
U.editable = Hn;
U.mouseSelectionStyle = yy;
U.dragMovesSelection = by;
U.clickAddsSelectionRange = Oy;
U.decorations = Ps;
U.outerDecorations = Cy;
U.atomicRanges = Xh;
U.bidiIsolatedRanges = Ty;
U.scrollMargins = Py;
U.darkTheme = $u;
U.cspNonce = /* @__PURE__ */ K.define({ combine: (n) => n.length ? n[0] : "" });
U.contentAttributes = Zh;
U.editorAttributes = Qy;
U.lineWrapping = /* @__PURE__ */ U.contentAttributes.of({ class: "cm-lineWrapping" });
U.announce = /* @__PURE__ */ me.define();
const V$ = 4096, Xp = {};
class Aa {
  constructor(e, t, i, r, s, o) {
    this.from = e, this.to = t, this.dir = i, this.isolates = r, this.fresh = s, this.order = o;
  }
  static update(e, t) {
    if (t.empty && !e.some((s) => s.fresh))
      return e;
    let i = [], r = e.length ? e[e.length - 1].dir : Ge.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s];
      o.dir == r && !t.touchesRange(o.from, o.to) && i.push(new Aa(t.mapPos(o.from, 1), t.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));
    }
    return i;
  }
}
function qp(n, e, t) {
  for (let i = n.state.facet(e), r = i.length - 1; r >= 0; r--) {
    let s = i[r], o = typeof s == "function" ? s(n) : s;
    o && Su(o, t);
  }
  return t;
}
const Y$ = H.mac ? "mac" : H.windows ? "win" : H.linux ? "linux" : "key";
function F$(n, e) {
  const t = n.split(/-(?!$)/);
  let i = t[t.length - 1];
  i == "Space" && (i = " ");
  let r, s, o, a;
  for (let l = 0; l < t.length - 1; ++l) {
    const c = t[l];
    if (/^(cmd|meta|m)$/i.test(c))
      a = !0;
    else if (/^a(lt)?$/i.test(c))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(c))
      s = !0;
    else if (/^s(hift)?$/i.test(c))
      o = !0;
    else if (/^mod$/i.test(c))
      e == "mac" ? a = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + c);
  }
  return r && (i = "Alt-" + i), s && (i = "Ctrl-" + i), a && (i = "Meta-" + i), o && (i = "Shift-" + i), i;
}
function Zo(n, e, t) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t !== !1 && e.shiftKey && (n = "Shift-" + n), n;
}
const U$ = /* @__PURE__ */ ri.default(/* @__PURE__ */ U.domEventHandlers({
  keydown(n, e) {
    return Uy(Fy(e.state), n, e, "editor");
  }
})), Mr = /* @__PURE__ */ K.define({ enables: U$ }), Vp = /* @__PURE__ */ new WeakMap();
function Fy(n) {
  let e = n.facet(Mr), t = Vp.get(e);
  return t || Vp.set(e, t = j$(e.reduce((i, r) => i.concat(r), []))), t;
}
function G$(n, e, t) {
  return Uy(Fy(n.state), e, n, t);
}
let di = null;
const W$ = 4e3;
function j$(n, e = Y$) {
  let t = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), r = (o, a) => {
    let l = i[o];
    if (l == null)
      i[o] = a;
    else if (l != a)
      throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
  }, s = (o, a, l, c, u) => {
    var h, f;
    let d = t[o] || (t[o] = /* @__PURE__ */ Object.create(null)), p = a.split(/ (?!$)/).map((g) => F$(g, e));
    for (let g = 1; g < p.length; g++) {
      let y = p.slice(0, g).join(" ");
      r(y, !0), d[y] || (d[y] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(S) => {
          let _ = di = { view: S, prefix: y, scope: o };
          return setTimeout(() => {
            di == _ && (di = null);
          }, W$), !0;
        }]
      });
    }
    let m = p.join(" ");
    r(m, !1);
    let O = d[m] || (d[m] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((f = (h = d._any) === null || h === void 0 ? void 0 : h.run) === null || f === void 0 ? void 0 : f.slice()) || []
    });
    l && O.run.push(l), c && (O.preventDefault = !0), u && (O.stopPropagation = !0);
  };
  for (let o of n) {
    let a = o.scope ? o.scope.split(" ") : ["editor"];
    if (o.any)
      for (let c of a) {
        let u = t[c] || (t[c] = /* @__PURE__ */ Object.create(null));
        u._any || (u._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        let { any: h } = o;
        for (let f in u)
          u[f].run.push((d) => h(d, Nu));
      }
    let l = o[e] || o.key;
    if (l)
      for (let c of a)
        s(c, l, o.run, o.preventDefault, o.stopPropagation), o.shift && s(c, "Shift-" + l, o.shift, o.preventDefault, o.stopPropagation);
  }
  return t;
}
let Nu = null;
function Uy(n, e, t, i) {
  Nu = e;
  let r = bA(e), s = Lt(r, 0), o = Pn(s) == r.length && r != " ", a = "", l = !1, c = !1, u = !1;
  di && di.view == t && di.scope == i && (a = di.prefix + " ", Ny.indexOf(e.keyCode) < 0 && (c = !0, di = null));
  let h = /* @__PURE__ */ new Set(), f = (O) => {
    if (O) {
      for (let g of O.run)
        if (!h.has(g) && (h.add(g), g(t)))
          return O.stopPropagation && (u = !0), !0;
      O.preventDefault && (O.stopPropagation && (u = !0), c = !0);
    }
    return !1;
  }, d = n[i], p, m;
  return d && (f(d[a + Zo(r, e, !o)]) ? l = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(H.windows && e.ctrlKey && e.altKey) && // Alt-combinations on macOS tend to be typed characters
  !(H.mac && e.altKey && !e.ctrlKey) && (p = yi[e.keyCode]) && p != r ? (f(d[a + Zo(p, e, !0)]) || e.shiftKey && (m = Cs[e.keyCode]) != r && m != p && f(d[a + Zo(m, e, !1)])) && (l = !0) : o && e.shiftKey && f(d[a + Zo(r, e, !0)]) && (l = !0), !l && f(d._any) && (l = !0)), c && (l = !0), l && u && e.stopPropagation(), Nu = null, l;
}
class no {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, i, r, s) {
    this.className = e, this.left = t, this.top = i, this.width = r, this.height = s;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, i) {
    if (i.empty) {
      let r = e.coordsAtPos(i.head, i.assoc || 1);
      if (!r)
        return [];
      let s = Gy(e);
      return [new no(t, r.left - s.left, r.top - s.top, null, r.bottom - r.top)];
    } else
      return H$(e, t, i);
  }
}
function Gy(n) {
  let e = n.scrollDOM.getBoundingClientRect();
  return { left: (n.textDirection == Ge.LTR ? e.left : e.right - n.scrollDOM.clientWidth * n.scaleX) - n.scrollDOM.scrollLeft * n.scaleX, top: e.top - n.scrollDOM.scrollTop * n.scaleY };
}
function Yp(n, e, t, i) {
  let r = n.coordsAtPos(e, t * 2);
  if (!r)
    return i;
  let s = n.dom.getBoundingClientRect(), o = (r.top + r.bottom) / 2, a = n.posAtCoords({ x: s.left + 1, y: o }), l = n.posAtCoords({ x: s.right - 1, y: o });
  return a == null || l == null ? i : { from: Math.max(i.from, Math.min(a, l)), to: Math.min(i.to, Math.max(a, l)) };
}
function H$(n, e, t) {
  if (t.to <= n.viewport.from || t.from >= n.viewport.to)
    return [];
  let i = Math.max(t.from, n.viewport.from), r = Math.min(t.to, n.viewport.to), s = n.textDirection == Ge.LTR, o = n.contentDOM, a = o.getBoundingClientRect(), l = Gy(n), c = o.querySelector(".cm-line"), u = c && window.getComputedStyle(c), h = a.left + (u ? parseInt(u.paddingLeft) + Math.min(0, parseInt(u.textIndent)) : 0), f = a.right - (u ? parseInt(u.paddingRight) : 0), d = Pu(n, i, 1), p = Pu(n, r, -1), m = d.type == At.Text ? d : null, O = p.type == At.Text ? p : null;
  if (m && (n.lineWrapping || d.widgetLineBreaks) && (m = Yp(n, i, 1, m)), O && (n.lineWrapping || p.widgetLineBreaks) && (O = Yp(n, r, -1, O)), m && O && m.from == O.from && m.to == O.to)
    return y(S(t.from, t.to, m));
  {
    let v = m ? S(t.from, null, m) : _(d, !1), x = O ? S(null, t.to, O) : _(p, !0), C = [];
    return (m || d).to < (O || p).from - (m && O ? 1 : 0) || d.widgetLineBreaks > 1 && v.bottom + n.defaultLineHeight / 2 < x.top ? C.push(g(h, v.bottom, f, x.top)) : v.bottom < x.top && n.elementAtHeight((v.bottom + x.top) / 2).type == At.Text && (v.bottom = x.top = (v.bottom + x.top) / 2), y(v).concat(C).concat(y(x));
  }
  function g(v, x, C, T) {
    return new no(e, v - l.left, x - l.top, C - v, T - x);
  }
  function y({ top: v, bottom: x, horizontal: C }) {
    let T = [];
    for (let A = 0; A < C.length; A += 2)
      T.push(g(C[A], v, C[A + 1], x));
    return T;
  }
  function S(v, x, C) {
    let T = 1e9, A = -1e9, Q = [];
    function M(P, $, Y, ie, D) {
      let ee = n.coordsAtPos(P, P == C.to ? -2 : 2), b = n.coordsAtPos(Y, Y == C.from ? 2 : -2);
      !ee || !b || (T = Math.min(ee.top, b.top, T), A = Math.max(ee.bottom, b.bottom, A), D == Ge.LTR ? Q.push(s && $ ? h : ee.left, s && ie ? f : b.right) : Q.push(!s && ie ? h : b.left, !s && $ ? f : ee.right));
    }
    let R = v ?? C.from, L = x ?? C.to;
    for (let P of n.visibleRanges)
      if (P.to > R && P.from < L)
        for (let $ = Math.max(P.from, R), Y = Math.min(P.to, L); ; ) {
          let ie = n.state.doc.lineAt($);
          for (let D of n.bidiSpans(ie)) {
            let ee = D.from + ie.from, b = D.to + ie.from;
            if (ee >= Y)
              break;
            b > $ && M(Math.max(ee, $), v == null && ee <= R, Math.min(b, Y), x == null && b >= L, D.dir);
          }
          if ($ = ie.to + 1, $ >= Y)
            break;
        }
    return Q.length == 0 && M(R, v == null, L, x == null, n.textDirection), { top: T, bottom: A, horizontal: Q };
  }
  function _(v, x) {
    let C = a.top + (x ? v.top : v.bottom);
    return { top: C, bottom: C, horizontal: [] };
  }
}
function K$(n, e) {
  return n.constructor == e.constructor && n.eq(e);
}
class J$ {
  constructor(e, t) {
    this.view = e, this.layer = t, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), t.above && this.dom.classList.add("cm-layer-above"), t.class && this.dom.classList.add(t.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), t.mount && t.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(ca) != e.state.facet(ca) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(e) {
    this.layer.updateOnDocViewUpdate !== !1 && e.requestMeasure(this.measureReq);
  }
  setOrder(e) {
    let t = 0, i = e.facet(ca);
    for (; t < i.length && i[t] != this.layer; )
      t++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view;
    (e != this.scaleX || t != this.scaleY) && (this.scaleX = e, this.scaleY = t, this.dom.style.transform = `scale(${1 / e}, ${1 / t})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((t, i) => !K$(t, this.drawn[i]))) {
      let t = this.dom.firstChild, i = 0;
      for (let r of e)
        r.update && t && r.constructor && this.drawn[i].constructor && r.update(t, this.drawn[i]) ? (t = t.nextSibling, i++) : this.dom.insertBefore(r.draw(), t);
      for (; t; ) {
        let r = t.nextSibling;
        t.remove(), t = r;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const ca = /* @__PURE__ */ K.define();
function Wy(n) {
  return [
    nt.define((e) => new J$(e, n)),
    ca.of(n)
  ];
}
const As = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, t) => Math.min(e, t),
      drawRangeCursor: (e, t) => e || t
    });
  }
});
function eR(n = {}) {
  return [
    As.of(n),
    tR,
    nR,
    iR,
    vy.of(!0)
  ];
}
function jy(n) {
  return n.startState.facet(As) != n.state.facet(As);
}
const tR = /* @__PURE__ */ Wy({
  above: !0,
  markers(n) {
    let { state: e } = n, t = e.facet(As), i = [];
    for (let r of e.selection.ranges) {
      let s = r == e.selection.main;
      if (r.empty || t.drawRangeCursor) {
        let o = s ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", a = r.empty ? r : I.cursor(r.head, r.head > r.anchor ? -1 : 1);
        for (let l of no.forRange(n, o, a))
          i.push(l);
      }
    }
    return i;
  },
  update(n, e) {
    n.transactions.some((i) => i.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let t = jy(n);
    return t && Fp(n.state, e), n.docChanged || n.selectionSet || t;
  },
  mount(n, e) {
    Fp(e.state, n);
  },
  class: "cm-cursorLayer"
});
function Fp(n, e) {
  e.style.animationDuration = n.facet(As).cursorBlinkRate + "ms";
}
const nR = /* @__PURE__ */ Wy({
  above: !1,
  markers(n) {
    return n.state.selection.ranges.map((e) => e.empty ? [] : no.forRange(n, "cm-selectionBackground", e)).reduce((e, t) => e.concat(t));
  },
  update(n, e) {
    return n.docChanged || n.selectionSet || n.viewportChanged || jy(n);
  },
  class: "cm-selectionLayer"
}), iR = /* @__PURE__ */ ri.highest(/* @__PURE__ */ U.theme({
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" },
    caretColor: "transparent !important"
  },
  ".cm-content": {
    caretColor: "transparent !important",
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
})), Hy = /* @__PURE__ */ me.define({
  map(n, e) {
    return n == null ? null : e.mapPos(n);
  }
}), hs = /* @__PURE__ */ mt.define({
  create() {
    return null;
  },
  update(n, e) {
    return n != null && (n = e.changes.mapPos(n)), e.effects.reduce((t, i) => i.is(Hy) ? i.value : t, n);
  }
}), rR = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.view = n, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(n) {
    var e;
    let t = n.state.field(hs);
    t == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(hs) != t || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: n } = this, e = n.state.field(hs), t = e != null && n.coordsAtPos(e);
    if (!t)
      return null;
    let i = n.scrollDOM.getBoundingClientRect();
    return {
      left: t.left - i.left + n.scrollDOM.scrollLeft * n.scaleX,
      top: t.top - i.top + n.scrollDOM.scrollTop * n.scaleY,
      height: t.bottom - t.top
    };
  }
  drawCursor(n) {
    if (this.cursor) {
      let { scaleX: e, scaleY: t } = this.view;
      n ? (this.cursor.style.left = n.left / e + "px", this.cursor.style.top = n.top / t + "px", this.cursor.style.height = n.height / t + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(n) {
    this.view.state.field(hs) != n && this.view.dispatch({ effects: Hy.of(n) });
  }
}, {
  eventObservers: {
    dragover(n) {
      this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }));
    },
    dragleave(n) {
      (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function sR() {
  return [hs, rR];
}
function Up(n, e, t, i, r) {
  e.lastIndex = 0;
  for (let s = n.iterRange(t, i), o = t, a; !s.next().done; o += s.value.length)
    if (!s.lineBreak)
      for (; a = e.exec(s.value); )
        r(o + a.index, a);
}
function oR(n, e) {
  let t = n.visibleRanges;
  if (t.length == 1 && t[0].from == n.viewport.from && t[0].to == n.viewport.to)
    return t;
  let i = [];
  for (let { from: r, to: s } of t)
    r = Math.max(n.state.doc.lineAt(r).from, r - e), s = Math.min(n.state.doc.lineAt(s).to, s + e), i.length && i[i.length - 1].to >= r ? i[i.length - 1].to = s : i.push({ from: r, to: s });
  return i;
}
class aR {
  /**
  Create a decorator.
  */
  constructor(e) {
    const { regexp: t, decoration: i, decorate: r, boundary: s, maxLength: o = 1e3 } = e;
    if (!t.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = t, r)
      this.addMatch = (a, l, c, u) => r(u, c, c + a[0].length, a, l);
    else if (typeof i == "function")
      this.addMatch = (a, l, c, u) => {
        let h = i(a, l, c);
        h && u(c, c + a[0].length, h);
      };
    else if (i)
      this.addMatch = (a, l, c, u) => u(c, c + a[0].length, i);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = s, this.maxLength = o;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let t = new ei(), i = t.add.bind(t);
    for (let { from: r, to: s } of oR(e, this.maxLength))
      Up(e.state.doc, this.regexp, r, s, (o, a) => this.addMatch(a, e, o, i));
    return t.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, t) {
    let i = 1e9, r = -1;
    return e.docChanged && e.changes.iterChanges((s, o, a, l) => {
      l >= e.view.viewport.from && a <= e.view.viewport.to && (i = Math.min(a, i), r = Math.max(l, r));
    }), e.viewportMoved || r - i > 1e3 ? this.createDeco(e.view) : r > -1 ? this.updateRange(e.view, t.map(e.changes), i, r) : t;
  }
  updateRange(e, t, i, r) {
    for (let s of e.visibleRanges) {
      let o = Math.max(s.from, i), a = Math.min(s.to, r);
      if (a >= o) {
        let l = e.state.doc.lineAt(o), c = l.to < a ? e.state.doc.lineAt(a) : l, u = Math.max(s.from, l.from), h = Math.min(s.to, c.to);
        if (this.boundary) {
          for (; o > l.from; o--)
            if (this.boundary.test(l.text[o - 1 - l.from])) {
              u = o;
              break;
            }
          for (; a < c.to; a++)
            if (this.boundary.test(c.text[a - c.from])) {
              h = a;
              break;
            }
        }
        let f = [], d, p = (m, O, g) => f.push(g.range(m, O));
        if (l == c)
          for (this.regexp.lastIndex = u - l.from; (d = this.regexp.exec(l.text)) && d.index < h - l.from; )
            this.addMatch(d, e, d.index + l.from, p);
        else
          Up(e.state.doc, this.regexp, u, h, (m, O) => this.addMatch(O, e, m, p));
        t = t.update({ filterFrom: u, filterTo: h, filter: (m, O) => m < u || O > h, add: f });
      }
    }
    return t;
  }
}
const Iu = /x/.unicode != null ? "gu" : "g", lR = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Iu), cR = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let nc = null;
function uR() {
  var n;
  if (nc == null && typeof document < "u" && document.body) {
    let e = document.body.style;
    nc = ((n = e.tabSize) !== null && n !== void 0 ? n : e.MozTabSize) != null;
  }
  return nc || !1;
}
const ua = /* @__PURE__ */ K.define({
  combine(n) {
    let e = zn(n, {
      render: null,
      specialChars: lR,
      addSpecialChars: null
    });
    return (e.replaceTabs = !uR()) && (e.specialChars = new RegExp("	|" + e.specialChars.source, Iu)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + "|" + e.addSpecialChars.source, Iu)), e;
  }
});
function hR(n = {}) {
  return [ua.of(n), fR()];
}
let Gp = null;
function fR() {
  return Gp || (Gp = nt.fromClass(class {
    constructor(n) {
      this.view = n, this.decorations = ae.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(n.state.facet(ua)), this.decorations = this.decorator.createDeco(n);
    }
    makeDecorator(n) {
      return new aR({
        regexp: n.specialChars,
        decoration: (e, t, i) => {
          let { doc: r } = t.state, s = Lt(e[0], 0);
          if (s == 9) {
            let o = r.lineAt(i), a = t.state.tabSize, l = gn(o.text, a, i - o.from);
            return ae.replace({
              widget: new gR((a - l % a) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[s] || (this.decorationCache[s] = ae.replace({ widget: new mR(n, s) }));
        },
        boundary: n.replaceTabs ? void 0 : /[^]/
      });
    }
    update(n) {
      let e = n.state.facet(ua);
      n.startState.facet(ua) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(n.view)) : this.decorations = this.decorator.updateDeco(n, this.decorations);
    }
  }, {
    decorations: (n) => n.decorations
  }));
}
const dR = "•";
function pR(n) {
  return n >= 32 ? dR : n == 10 ? "␤" : String.fromCharCode(9216 + n);
}
class mR extends Zn {
  constructor(e, t) {
    super(), this.options = e, this.code = t;
  }
  eq(e) {
    return e.code == this.code;
  }
  toDOM(e) {
    let t = pR(this.code), i = e.state.phrase("Control character") + " " + (cR[this.code] || "0x" + this.code.toString(16)), r = this.options.render && this.options.render(this.code, i, t);
    if (r)
      return r;
    let s = document.createElement("span");
    return s.textContent = t, s.title = i, s.setAttribute("aria-label", i), s.className = "cm-specialChar", s;
  }
  ignoreEvent() {
    return !1;
  }
}
class gR extends Zn {
  constructor(e) {
    super(), this.width = e;
  }
  eq(e) {
    return e.width == this.width;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.textContent = "	", e.className = "cm-tab", e.style.width = this.width + "px", e;
  }
  ignoreEvent() {
    return !1;
  }
}
function OR() {
  return yR;
}
const bR = /* @__PURE__ */ ae.line({ class: "cm-activeLine" }), yR = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = -1, t = [];
    for (let i of n.state.selection.ranges) {
      let r = n.lineBlockAt(i.head);
      r.from > e && (t.push(bR.range(r.from)), e = r.from);
    }
    return ae.set(t);
  }
}, {
  decorations: (n) => n.decorations
});
class xR extends Zn {
  constructor(e) {
    super(), this.content = e;
  }
  toDOM(e) {
    let t = document.createElement("span");
    return t.className = "cm-placeholder", t.style.pointerEvents = "none", t.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : typeof this.content == "function" ? this.content(e) : this.content.cloneNode(!0)), t.setAttribute("aria-hidden", "true"), t;
  }
  coordsAt(e) {
    let t = e.firstChild ? gr(e.firstChild) : [];
    if (!t.length)
      return null;
    let i = window.getComputedStyle(e.parentNode), r = Js(t[0], i.direction != "rtl"), s = parseInt(i.lineHeight);
    return r.bottom - r.top > s * 1.5 ? { left: r.left, right: r.right, top: r.top, bottom: r.top + s } : r;
  }
  ignoreEvent() {
    return !1;
  }
}
function kR(n) {
  let e = nt.fromClass(class {
    constructor(t) {
      this.view = t, this.placeholder = n ? ae.set([ae.widget({ widget: new xR(n), side: 1 }).range(0)]) : ae.none;
    }
    get decorations() {
      return this.view.state.doc.length ? ae.none : this.placeholder;
    }
  }, { decorations: (t) => t.decorations });
  return typeof n == "string" ? [
    e,
    U.contentAttributes.of({ "aria-placeholder": n })
  ] : e;
}
const Lu = 2e3;
function SR(n, e, t) {
  let i = Math.min(e.line, t.line), r = Math.max(e.line, t.line), s = [];
  if (e.off > Lu || t.off > Lu || e.col < 0 || t.col < 0) {
    let o = Math.min(e.off, t.off), a = Math.max(e.off, t.off);
    for (let l = i; l <= r; l++) {
      let c = n.doc.line(l);
      c.length <= a && s.push(I.range(c.from + o, c.to + a));
    }
  } else {
    let o = Math.min(e.col, t.col), a = Math.max(e.col, t.col);
    for (let l = i; l <= r; l++) {
      let c = n.doc.line(l), u = mu(c.text, o, n.tabSize, !0);
      if (u < 0)
        s.push(I.cursor(c.to));
      else {
        let h = mu(c.text, a, n.tabSize);
        s.push(I.range(c.from + u, c.from + h));
      }
    }
  }
  return s;
}
function wR(n, e) {
  let t = n.coordsAtPos(n.viewport.from);
  return t ? Math.round(Math.abs((t.left - e) / n.defaultCharacterWidth)) : -1;
}
function Wp(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), i = n.state.doc.lineAt(t), r = t - i.from, s = r > Lu ? -1 : r == i.length ? wR(n, e.clientX) : gn(i.text, n.state.tabSize, t - i.from);
  return { line: i.number, col: s, off: r };
}
function vR(n, e) {
  let t = Wp(n, e), i = n.state.selection;
  return t ? {
    update(r) {
      if (r.docChanged) {
        let s = r.changes.mapPos(r.startState.doc.line(t.line).from), o = r.state.doc.lineAt(s);
        t = { line: o.number, col: t.col, off: Math.min(t.off, o.length) }, i = i.map(r.changes);
      }
    },
    get(r, s, o) {
      let a = Wp(n, r);
      if (!a)
        return i;
      let l = SR(n.state, t, a);
      return l.length ? o ? I.create(l.concat(i.ranges)) : I.create(l) : i;
    }
  } : null;
}
function ER(n) {
  let e = (t) => t.altKey && t.button == 0;
  return U.mouseSelectionStyle.of((t, i) => e(i) ? vR(t, i) : null);
}
const _R = {
  Alt: [18, (n) => !!n.altKey],
  Control: [17, (n) => !!n.ctrlKey],
  Shift: [16, (n) => !!n.shiftKey],
  Meta: [91, (n) => !!n.metaKey]
}, QR = { style: "cursor: crosshair" };
function CR(n = {}) {
  let [e, t] = _R[n.key || "Alt"], i = nt.fromClass(class {
    constructor(r) {
      this.view = r, this.isDown = !1;
    }
    set(r) {
      this.isDown != r && (this.isDown = r, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(r) {
        this.set(r.keyCode == e || t(r));
      },
      keyup(r) {
        (r.keyCode == e || !t(r)) && this.set(!1);
      },
      mousemove(r) {
        this.set(t(r));
      }
    }
  });
  return [
    i,
    U.contentAttributes.of((r) => {
      var s;
      return !((s = r.plugin(i)) === null || s === void 0) && s.isDown ? QR : null;
    })
  ];
}
const ts = "-10000px";
class Ky {
  constructor(e, t, i, r) {
    this.facet = t, this.createTooltipView = i, this.removeTooltipView = r, this.input = e.state.facet(t), this.tooltips = this.input.filter((o) => o);
    let s = null;
    this.tooltipViews = this.tooltips.map((o) => s = i(o, s));
  }
  update(e, t) {
    var i;
    let r = e.state.facet(this.facet), s = r.filter((l) => l);
    if (r === this.input) {
      for (let l of this.tooltipViews)
        l.update && l.update(e);
      return !1;
    }
    let o = [], a = t ? [] : null;
    for (let l = 0; l < s.length; l++) {
      let c = s[l], u = -1;
      if (c) {
        for (let h = 0; h < this.tooltips.length; h++) {
          let f = this.tooltips[h];
          f && f.create == c.create && (u = h);
        }
        if (u < 0)
          o[l] = this.createTooltipView(c, l ? o[l - 1] : null), a && (a[l] = !!c.above);
        else {
          let h = o[l] = this.tooltipViews[u];
          a && (a[l] = t[u]), h.update && h.update(e);
        }
      }
    }
    for (let l of this.tooltipViews)
      o.indexOf(l) < 0 && (this.removeTooltipView(l), (i = l.destroy) === null || i === void 0 || i.call(l));
    return t && (a.forEach((l, c) => t[c] = l), t.length = a.length), this.input = r, this.tooltips = s, this.tooltipViews = o, !0;
  }
}
function TR(n) {
  let e = n.dom.ownerDocument.documentElement;
  return { top: 0, left: 0, bottom: e.clientHeight, right: e.clientWidth };
}
const ic = /* @__PURE__ */ K.define({
  combine: (n) => {
    var e, t, i;
    return {
      position: H.ios ? "absolute" : ((e = n.find((r) => r.position)) === null || e === void 0 ? void 0 : e.position) || "fixed",
      parent: ((t = n.find((r) => r.parent)) === null || t === void 0 ? void 0 : t.parent) || null,
      tooltipSpace: ((i = n.find((r) => r.tooltipSpace)) === null || i === void 0 ? void 0 : i.tooltipSpace) || TR
    };
  }
}), jp = /* @__PURE__ */ new WeakMap(), Uh = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.view = n, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let e = n.state.facet(ic);
    this.position = e.position, this.parent = e.parent, this.classes = n.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new Ky(n, Gh, (t, i) => this.createTooltip(t, i), (t) => {
      this.resizeObserver && this.resizeObserver.unobserve(t.dom), t.dom.remove();
    }), this.above = this.manager.tooltips.map((t) => !!t.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((t) => {
      Date.now() > this.lastTransaction - 50 && t.length > 0 && t[t.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), n.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let n of this.manager.tooltipViews)
        this.intersectionObserver.observe(n.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(n) {
    n.transactions.length && (this.lastTransaction = Date.now());
    let e = this.manager.update(n, this.above);
    e && this.observeIntersection();
    let t = e || n.geometryChanged, i = n.state.facet(ic);
    if (i.position != this.position && !this.madeAbsolute) {
      this.position = i.position;
      for (let r of this.manager.tooltipViews)
        r.dom.style.position = this.position;
      t = !0;
    }
    if (i.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i.parent, this.createContainer();
      for (let r of this.manager.tooltipViews)
        this.container.appendChild(r.dom);
      t = !0;
    } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    t && this.maybeMeasure();
  }
  createTooltip(n, e) {
    let t = n.create(this.view), i = e ? e.dom : null;
    if (t.dom.classList.add("cm-tooltip"), n.arrow && !t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let r = document.createElement("div");
      r.className = "cm-tooltip-arrow", t.dom.appendChild(r);
    }
    return t.dom.style.position = this.position, t.dom.style.top = ts, t.dom.style.left = "0px", this.container.insertBefore(t.dom, i), t.mount && t.mount(this.view), this.resizeObserver && this.resizeObserver.observe(t.dom), t;
  }
  destroy() {
    var n, e, t;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let i of this.manager.tooltipViews)
      i.dom.remove(), (n = i.destroy) === null || n === void 0 || n.call(i);
    this.parent && this.container.remove(), (e = this.resizeObserver) === null || e === void 0 || e.disconnect(), (t = this.intersectionObserver) === null || t === void 0 || t.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let n = 1, e = 1, t = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: s } = this.manager.tooltipViews[0];
      if (H.gecko)
        t = s.offsetParent != this.container.ownerDocument.body;
      else if (s.style.top == ts && s.style.left == "0px") {
        let o = s.getBoundingClientRect();
        t = Math.abs(o.top + 1e4) > 1 || Math.abs(o.left) > 1;
      }
    }
    if (t || this.position == "absolute")
      if (this.parent) {
        let s = this.parent.getBoundingClientRect();
        s.width && s.height && (n = s.width / this.parent.offsetWidth, e = s.height / this.parent.offsetHeight);
      } else
        ({ scaleX: n, scaleY: e } = this.view.viewState);
    let i = this.view.scrollDOM.getBoundingClientRect(), r = qh(this.view);
    return {
      visible: {
        left: i.left + r.left,
        top: i.top + r.top,
        right: i.right - r.right,
        bottom: i.bottom - r.bottom
      },
      parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
      pos: this.manager.tooltips.map((s, o) => {
        let a = this.manager.tooltipViews[o];
        return a.getCoords ? a.getCoords(s.pos) : this.view.coordsAtPos(s.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: s }) => s.getBoundingClientRect()),
      space: this.view.state.facet(ic).tooltipSpace(this.view),
      scaleX: n,
      scaleY: e,
      makeAbsolute: t
    };
  }
  writeMeasure(n) {
    var e;
    if (n.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let a of this.manager.tooltipViews)
        a.dom.style.position = "absolute";
    }
    let { visible: t, space: i, scaleX: r, scaleY: s } = n, o = [];
    for (let a = 0; a < this.manager.tooltips.length; a++) {
      let l = this.manager.tooltips[a], c = this.manager.tooltipViews[a], { dom: u } = c, h = n.pos[a], f = n.size[a];
      if (!h || l.clip !== !1 && (h.bottom <= Math.max(t.top, i.top) || h.top >= Math.min(t.bottom, i.bottom) || h.right < Math.max(t.left, i.left) - 0.1 || h.left > Math.min(t.right, i.right) + 0.1)) {
        u.style.top = ts;
        continue;
      }
      let d = l.arrow ? c.dom.querySelector(".cm-tooltip-arrow") : null, p = d ? 7 : 0, m = f.right - f.left, O = (e = jp.get(c)) !== null && e !== void 0 ? e : f.bottom - f.top, g = c.offset || AR, y = this.view.textDirection == Ge.LTR, S = f.width > i.right - i.left ? y ? i.left : i.right - f.width : y ? Math.max(i.left, Math.min(h.left - (d ? 14 : 0) + g.x, i.right - m)) : Math.min(Math.max(i.left, h.left - m + (d ? 14 : 0) - g.x), i.right - m), _ = this.above[a];
      !l.strictSide && (_ ? h.top - O - p - g.y < i.top : h.bottom + O + p + g.y > i.bottom) && _ == i.bottom - h.bottom > h.top - i.top && (_ = this.above[a] = !_);
      let v = (_ ? h.top - i.top : i.bottom - h.bottom) - p;
      if (v < O && c.resize !== !1) {
        if (v < this.view.defaultLineHeight) {
          u.style.top = ts;
          continue;
        }
        jp.set(c, O), u.style.height = (O = v) / s + "px";
      } else u.style.height && (u.style.height = "");
      let x = _ ? h.top - O - p - g.y : h.bottom + p + g.y, C = S + m;
      if (c.overlap !== !0)
        for (let T of o)
          T.left < C && T.right > S && T.top < x + O && T.bottom > x && (x = _ ? T.top - O - 2 - p : T.bottom + p + 2);
      if (this.position == "absolute" ? (u.style.top = (x - n.parent.top) / s + "px", Hp(u, (S - n.parent.left) / r)) : (u.style.top = x / s + "px", Hp(u, S / r)), d) {
        let T = h.left + (y ? g.x : -g.x) - (S + 14 - 7);
        d.style.left = T / r + "px";
      }
      c.overlap !== !0 && o.push({ left: S, top: x, right: C, bottom: x + O }), u.classList.toggle("cm-tooltip-above", _), u.classList.toggle("cm-tooltip-below", !_), c.positioned && c.positioned(n.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let n of this.manager.tooltipViews)
        n.dom.style.top = ts;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
function Hp(n, e) {
  let t = parseInt(n.style.left, 10);
  (isNaN(t) || Math.abs(e - t) > 1) && (n.style.left = e + "px");
}
const PR = /* @__PURE__ */ U.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: "14px",
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), AR = { x: 0, y: 0 }, Gh = /* @__PURE__ */ K.define({
  enables: [Uh, PR]
}), $a = /* @__PURE__ */ K.define({
  combine: (n) => n.reduce((e, t) => e.concat(t), [])
});
class ll {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new ll(e);
  }
  constructor(e) {
    this.view = e, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new Ky(e, $a, (t, i) => this.createHostedView(t, i), (t) => t.dom.remove());
  }
  createHostedView(e, t) {
    let i = e.create(this.view);
    return i.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(i.dom, t ? t.dom.nextSibling : this.dom.firstChild), this.mounted && i.mount && i.mount(this.view), i;
  }
  mount(e) {
    for (let t of this.manager.tooltipViews)
      t.mount && t.mount(e);
    this.mounted = !0;
  }
  positioned(e) {
    for (let t of this.manager.tooltipViews)
      t.positioned && t.positioned(e);
  }
  update(e) {
    this.manager.update(e);
  }
  destroy() {
    var e;
    for (let t of this.manager.tooltipViews)
      (e = t.destroy) === null || e === void 0 || e.call(t);
  }
  passProp(e) {
    let t;
    for (let i of this.manager.tooltipViews) {
      let r = i[e];
      if (r !== void 0) {
        if (t === void 0)
          t = r;
        else if (t !== r)
          return;
      }
    }
    return t;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const $R = /* @__PURE__ */ Gh.compute([$a], (n) => {
  let e = n.facet($a);
  return e.length === 0 ? null : {
    pos: Math.min(...e.map((t) => t.pos)),
    end: Math.max(...e.map((t) => {
      var i;
      return (i = t.end) !== null && i !== void 0 ? i : t.pos;
    })),
    create: ll.create,
    above: e[0].above,
    arrow: e.some((t) => t.arrow)
  };
});
class RR {
  constructor(e, t, i, r, s) {
    this.view = e, this.source = t, this.field = i, this.setHover = r, this.hoverTime = s, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active.length)
      return;
    let e = Date.now() - this.lastMove.time;
    e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: e, lastMove: t } = this, i = e.docView.nearest(t.target);
    if (!i)
      return;
    let r, s = 1;
    if (i instanceof mi)
      r = i.posAtStart;
    else {
      if (r = e.posAtCoords(t), r == null)
        return;
      let a = e.coordsAtPos(r);
      if (!a || t.y < a.top || t.y > a.bottom || t.x < a.left - e.defaultCharacterWidth || t.x > a.right + e.defaultCharacterWidth)
        return;
      let l = e.bidiSpans(e.state.doc.lineAt(r)).find((u) => u.from <= r && u.to >= r), c = l && l.dir == Ge.RTL ? -1 : 1;
      s = t.x < a.left ? -c : c;
    }
    let o = this.source(e, r, s);
    if (o?.then) {
      let a = this.pending = { pos: r };
      o.then((l) => {
        this.pending == a && (this.pending = null, l && !(Array.isArray(l) && !l.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(l) ? l : [l]) }));
      }, (l) => zt(e.state, l, "hover tooltip"));
    } else o && !(Array.isArray(o) && !o.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(o) ? o : [o]) });
  }
  get tooltip() {
    let e = this.view.plugin(Uh), t = e ? e.manager.tooltips.findIndex((i) => i.create == ll.create) : -1;
    return t > -1 ? e.manager.tooltipViews[t] : null;
  }
  mousemove(e) {
    var t, i;
    this.lastMove = { x: e.clientX, y: e.clientY, target: e.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: r, tooltip: s } = this;
    if (r.length && s && !MR(s.dom, e) || this.pending) {
      let { pos: o } = r[0] || this.pending, a = (i = (t = r[0]) === null || t === void 0 ? void 0 : t.end) !== null && i !== void 0 ? i : o;
      (o == a ? this.view.posAtCoords(this.lastMove) != o : !NR(this.view, o, a, e.clientX, e.clientY)) && (this.view.dispatch({ effects: this.setHover.of([]) }), this.pending = null);
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: t } = this;
    if (t.length) {
      let { tooltip: i } = this;
      i && i.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(i.dom) : this.view.dispatch({ effects: this.setHover.of([]) });
    }
  }
  watchTooltipLeave(e) {
    let t = (i) => {
      e.removeEventListener("mouseleave", t), this.active.length && !this.view.dom.contains(i.relatedTarget) && this.view.dispatch({ effects: this.setHover.of([]) });
    };
    e.addEventListener("mouseleave", t);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const Xo = 4;
function MR(n, e) {
  let { left: t, right: i, top: r, bottom: s } = n.getBoundingClientRect(), o;
  if (o = n.querySelector(".cm-tooltip-arrow")) {
    let a = o.getBoundingClientRect();
    r = Math.min(a.top, r), s = Math.max(a.bottom, s);
  }
  return e.clientX >= t - Xo && e.clientX <= i + Xo && e.clientY >= r - Xo && e.clientY <= s + Xo;
}
function NR(n, e, t, i, r, s) {
  let o = n.scrollDOM.getBoundingClientRect(), a = n.documentTop + n.documentPadding.top + n.contentHeight;
  if (o.left > i || o.right < i || o.top > r || Math.min(o.bottom, a) < r)
    return !1;
  let l = n.posAtCoords({ x: i, y: r }, !1);
  return l >= e && l <= t;
}
function IR(n, e = {}) {
  let t = me.define(), i = mt.define({
    create() {
      return [];
    },
    update(r, s) {
      if (r.length && (e.hideOnChange && (s.docChanged || s.selection) ? r = [] : e.hideOn && (r = r.filter((o) => !e.hideOn(s, o))), s.docChanged)) {
        let o = [];
        for (let a of r) {
          let l = s.changes.mapPos(a.pos, -1, yt.TrackDel);
          if (l != null) {
            let c = Object.assign(/* @__PURE__ */ Object.create(null), a);
            c.pos = l, c.end != null && (c.end = s.changes.mapPos(c.end)), o.push(c);
          }
        }
        r = o;
      }
      for (let o of s.effects)
        o.is(t) && (r = o.value), o.is(LR) && (r = []);
      return r;
    },
    provide: (r) => $a.from(r)
  });
  return {
    active: i,
    extension: [
      i,
      nt.define((r) => new RR(
        r,
        n,
        i,
        t,
        e.hoverTime || 300
        /* Hover.Time */
      )),
      $R
    ]
  };
}
function Jy(n, e) {
  let t = n.plugin(Uh);
  if (!t)
    return null;
  let i = t.manager.tooltips.indexOf(e);
  return i < 0 ? null : t.manager.tooltipViews[i];
}
const LR = /* @__PURE__ */ me.define(), Kp = /* @__PURE__ */ K.define({
  combine(n) {
    let e, t;
    for (let i of n)
      e = e || i.topContainer, t = t || i.bottomContainer;
    return { topContainer: e, bottomContainer: t };
  }
});
function $s(n, e) {
  let t = n.plugin(e0), i = t ? t.specs.indexOf(e) : -1;
  return i > -1 ? t.panels[i] : null;
}
const e0 = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.input = n.state.facet(Rs), this.specs = this.input.filter((t) => t), this.panels = this.specs.map((t) => t(n));
    let e = n.state.facet(Kp);
    this.top = new qo(n, !0, e.topContainer), this.bottom = new qo(n, !1, e.bottomContainer), this.top.sync(this.panels.filter((t) => t.top)), this.bottom.sync(this.panels.filter((t) => !t.top));
    for (let t of this.panels)
      t.dom.classList.add("cm-panel"), t.mount && t.mount();
  }
  update(n) {
    let e = n.state.facet(Kp);
    this.top.container != e.topContainer && (this.top.sync([]), this.top = new qo(n.view, !0, e.topContainer)), this.bottom.container != e.bottomContainer && (this.bottom.sync([]), this.bottom = new qo(n.view, !1, e.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let t = n.state.facet(Rs);
    if (t != this.input) {
      let i = t.filter((l) => l), r = [], s = [], o = [], a = [];
      for (let l of i) {
        let c = this.specs.indexOf(l), u;
        c < 0 ? (u = l(n.view), a.push(u)) : (u = this.panels[c], u.update && u.update(n)), r.push(u), (u.top ? s : o).push(u);
      }
      this.specs = i, this.panels = r, this.top.sync(s), this.bottom.sync(o);
      for (let l of a)
        l.dom.classList.add("cm-panel"), l.mount && l.mount();
    } else
      for (let i of this.panels)
        i.update && i.update(n);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (n) => U.scrollMargins.of((e) => {
    let t = e.plugin(n);
    return t && { top: t.top.scrollMargin(), bottom: t.bottom.scrollMargin() };
  })
});
class qo {
  constructor(e, t, i) {
    this.view = e, this.top = t, this.container = i, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(e) {
    for (let t of this.panels)
      t.destroy && e.indexOf(t) < 0 && t.destroy();
    this.panels = e, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let t = this.container || this.view.dom;
      t.insertBefore(this.dom, this.top ? t.firstChild : null);
    }
    let e = this.dom.firstChild;
    for (let t of this.panels)
      if (t.dom.parentNode == this.dom) {
        for (; e != t.dom; )
          e = Jp(e);
        e = e.nextSibling;
      } else
        this.dom.insertBefore(t.dom, e);
    for (; e; )
      e = Jp(e);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(" "))
        e && this.container.classList.remove(e);
      for (let e of (this.classes = this.view.themeClasses).split(" "))
        e && this.container.classList.add(e);
    }
  }
}
function Jp(n) {
  let e = n.nextSibling;
  return n.remove(), e;
}
const Rs = /* @__PURE__ */ K.define({
  enables: e0
});
class ni extends Di {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
ni.prototype.elementClass = "";
ni.prototype.toDOM = void 0;
ni.prototype.mapMode = yt.TrackBefore;
ni.prototype.startSide = ni.prototype.endSide = -1;
ni.prototype.point = !0;
const ha = /* @__PURE__ */ K.define(), DR = /* @__PURE__ */ K.define(), BR = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => $e.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {},
  side: "before"
}, xs = /* @__PURE__ */ K.define();
function zR(n) {
  return [t0(), xs.of({ ...BR, ...n })];
}
const em = /* @__PURE__ */ K.define({
  combine: (n) => n.some((e) => e)
});
function t0(n) {
  return [
    ZR
  ];
}
const ZR = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.view = n, this.domAfter = null, this.prevViewport = n.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters cm-gutters-before", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = n.state.facet(xs).map((e) => new nm(n, e)), this.fixed = !n.state.facet(em);
    for (let e of this.gutters)
      e.config.side == "after" ? this.getDOMAfter().appendChild(e.dom) : this.dom.appendChild(e.dom);
    this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), n.scrollDOM.insertBefore(this.dom, n.contentDOM);
  }
  getDOMAfter() {
    return this.domAfter || (this.domAfter = document.createElement("div"), this.domAfter.className = "cm-gutters cm-gutters-after", this.domAfter.setAttribute("aria-hidden", "true"), this.domAfter.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.domAfter.style.position = this.fixed ? "sticky" : "", this.view.scrollDOM.appendChild(this.domAfter)), this.domAfter;
  }
  update(n) {
    if (this.updateGutters(n)) {
      let e = this.prevViewport, t = n.view.viewport, i = Math.min(e.to, t.to) - Math.max(e.from, t.from);
      this.syncGutters(i < (t.to - t.from) * 0.8);
    }
    if (n.geometryChanged) {
      let e = this.view.contentHeight / this.view.scaleY + "px";
      this.dom.style.minHeight = e, this.domAfter && (this.domAfter.style.minHeight = e);
    }
    this.view.state.facet(em) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : "", this.domAfter && (this.domAfter.style.position = this.fixed ? "sticky" : "")), this.prevViewport = n.view.viewport;
  }
  syncGutters(n) {
    let e = this.dom.nextSibling;
    n && (this.dom.remove(), this.domAfter && this.domAfter.remove());
    let t = $e.iter(this.view.state.facet(ha), this.view.viewport.from), i = [], r = this.gutters.map((s) => new XR(s, this.view.viewport, -this.view.documentPadding.top));
    for (let s of this.view.viewportLineBlocks)
      if (i.length && (i = []), Array.isArray(s.type)) {
        let o = !0;
        for (let a of s.type)
          if (a.type == At.Text && o) {
            Du(t, i, a.from);
            for (let l of r)
              l.line(this.view, a, i);
            o = !1;
          } else if (a.widget)
            for (let l of r)
              l.widget(this.view, a);
      } else if (s.type == At.Text) {
        Du(t, i, s.from);
        for (let o of r)
          o.line(this.view, s, i);
      } else if (s.widget)
        for (let o of r)
          o.widget(this.view, s);
    for (let s of r)
      s.finish();
    n && (this.view.scrollDOM.insertBefore(this.dom, e), this.domAfter && this.view.scrollDOM.appendChild(this.domAfter));
  }
  updateGutters(n) {
    let e = n.startState.facet(xs), t = n.state.facet(xs), i = n.docChanged || n.heightChanged || n.viewportChanged || !$e.eq(n.startState.facet(ha), n.state.facet(ha), n.view.viewport.from, n.view.viewport.to);
    if (e == t)
      for (let r of this.gutters)
        r.update(n) && (i = !0);
    else {
      i = !0;
      let r = [];
      for (let s of t) {
        let o = e.indexOf(s);
        o < 0 ? r.push(new nm(this.view, s)) : (this.gutters[o].update(n), r.push(this.gutters[o]));
      }
      for (let s of this.gutters)
        s.dom.remove(), r.indexOf(s) < 0 && s.destroy();
      for (let s of r)
        s.config.side == "after" ? this.getDOMAfter().appendChild(s.dom) : this.dom.appendChild(s.dom);
      this.gutters = r;
    }
    return i;
  }
  destroy() {
    for (let n of this.gutters)
      n.destroy();
    this.dom.remove(), this.domAfter && this.domAfter.remove();
  }
}, {
  provide: (n) => U.scrollMargins.of((e) => {
    let t = e.plugin(n);
    if (!t || t.gutters.length == 0 || !t.fixed)
      return null;
    let i = t.dom.offsetWidth * e.scaleX, r = t.domAfter ? t.domAfter.offsetWidth * e.scaleX : 0;
    return e.textDirection == Ge.LTR ? { left: i, right: r } : { right: i, left: r };
  })
});
function tm(n) {
  return Array.isArray(n) ? n : [n];
}
function Du(n, e, t) {
  for (; n.value && n.from <= t; )
    n.from == t && e.push(n.value), n.next();
}
class XR {
  constructor(e, t, i) {
    this.gutter = e, this.height = i, this.i = 0, this.cursor = $e.iter(e.markers, t.from);
  }
  addElement(e, t, i) {
    let { gutter: r } = this, s = (t.top - this.height) / e.scaleY, o = t.height / e.scaleY;
    if (this.i == r.elements.length) {
      let a = new n0(e, o, s, i);
      r.elements.push(a), r.dom.appendChild(a.dom);
    } else
      r.elements[this.i].update(e, o, s, i);
    this.height = t.bottom, this.i++;
  }
  line(e, t, i) {
    let r = [];
    Du(this.cursor, r, t.from), i.length && (r = r.concat(i));
    let s = this.gutter.config.lineMarker(e, t, r);
    s && r.unshift(s);
    let o = this.gutter;
    r.length == 0 && !o.config.renderEmptyElements || this.addElement(e, t, r);
  }
  widget(e, t) {
    let i = this.gutter.config.widgetMarker(e, t.widget, t), r = i ? [i] : null;
    for (let s of e.state.facet(DR)) {
      let o = s(e, t.widget, t);
      o && (r || (r = [])).push(o);
    }
    r && this.addElement(e, t, r);
  }
  finish() {
    let e = this.gutter;
    for (; e.elements.length > this.i; ) {
      let t = e.elements.pop();
      e.dom.removeChild(t.dom), t.destroy();
    }
  }
}
class nm {
  constructor(e, t) {
    this.view = e, this.config = t, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i in t.domEventHandlers)
      this.dom.addEventListener(i, (r) => {
        let s = r.target, o;
        if (s != this.dom && this.dom.contains(s)) {
          for (; s.parentNode != this.dom; )
            s = s.parentNode;
          let l = s.getBoundingClientRect();
          o = (l.top + l.bottom) / 2;
        } else
          o = r.clientY;
        let a = e.lineBlockAtHeight(o - e.documentTop);
        t.domEventHandlers[i](e, a, r) && r.preventDefault();
      });
    this.markers = tm(t.markers(e)), t.initialSpacer && (this.spacer = new n0(e, 0, 0, [t.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(e) {
    let t = this.markers;
    if (this.markers = tm(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {
      let r = this.config.updateSpacer(this.spacer.markers[0], e);
      r != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [r]);
    }
    let i = e.view.viewport;
    return !$e.eq(this.markers, t, i.from, i.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);
  }
  destroy() {
    for (let e of this.elements)
      e.destroy();
  }
}
class n0 {
  constructor(e, t, i, r) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(e, t, i, r);
  }
  update(e, t, i, r) {
    this.height != t && (this.height = t, this.dom.style.height = t + "px"), this.above != i && (this.dom.style.marginTop = (this.above = i) ? i + "px" : ""), qR(this.markers, r) || this.setMarkers(e, r);
  }
  setMarkers(e, t) {
    let i = "cm-gutterElement", r = this.dom.firstChild;
    for (let s = 0, o = 0; ; ) {
      let a = o, l = s < t.length ? t[s++] : null, c = !1;
      if (l) {
        let u = l.elementClass;
        u && (i += " " + u);
        for (let h = o; h < this.markers.length; h++)
          if (this.markers[h].compare(l)) {
            a = h, c = !0;
            break;
          }
      } else
        a = this.markers.length;
      for (; o < a; ) {
        let u = this.markers[o++];
        if (u.toDOM) {
          u.destroy(r);
          let h = r.nextSibling;
          r.remove(), r = h;
        }
      }
      if (!l)
        break;
      l.toDOM && (c ? r = r.nextSibling : this.dom.insertBefore(l.toDOM(e), r)), c && o++;
    }
    this.dom.className = i, this.markers = t;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function qR(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].compare(e[t]))
      return !1;
  return !0;
}
const VR = /* @__PURE__ */ K.define(), YR = /* @__PURE__ */ K.define(), sr = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(e, t) {
        let i = Object.assign({}, e);
        for (let r in t) {
          let s = i[r], o = t[r];
          i[r] = s ? (a, l, c) => s(a, l, c) || o(a, l, c) : o;
        }
        return i;
      }
    });
  }
});
class rc extends ni {
  constructor(e) {
    super(), this.number = e;
  }
  eq(e) {
    return this.number == e.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function sc(n, e) {
  return n.state.facet(sr).formatNumber(e, n.state);
}
const FR = /* @__PURE__ */ xs.compute([sr], (n) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(VR);
  },
  lineMarker(e, t, i) {
    return i.some((r) => r.toDOM) ? null : new rc(sc(e, e.state.doc.lineAt(t.from).number));
  },
  widgetMarker: (e, t, i) => {
    for (let r of e.state.facet(YR)) {
      let s = r(e, t, i);
      if (s)
        return s;
    }
    return null;
  },
  lineMarkerChange: (e) => e.startState.facet(sr) != e.state.facet(sr),
  initialSpacer(e) {
    return new rc(sc(e, im(e.state.doc.lines)));
  },
  updateSpacer(e, t) {
    let i = sc(t.view, im(t.view.state.doc.lines));
    return i == e.number ? e : new rc(i);
  },
  domEventHandlers: n.facet(sr).domEventHandlers,
  side: "before"
}));
function UR(n = {}) {
  return [
    sr.of(n),
    t0(),
    FR
  ];
}
function im(n) {
  let e = 9;
  for (; e < n; )
    e = e * 10 + 9;
  return e;
}
const GR = /* @__PURE__ */ new class extends ni {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), WR = /* @__PURE__ */ ha.compute(["selection"], (n) => {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let r = n.doc.lineAt(i.head).from;
    r > t && (t = r, e.push(GR.range(r)));
  }
  return $e.of(e);
});
function jR() {
  return WR;
}
const i0 = 1024;
let HR = 0;
class sn {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
class pe {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = HR++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = ut.match(e)), (t) => {
      let i = e(t);
      return i === void 0 ? null : [this, i];
    };
  }
}
pe.closedBy = new pe({ deserialize: (n) => n.split(" ") });
pe.openedBy = new pe({ deserialize: (n) => n.split(" ") });
pe.group = new pe({ deserialize: (n) => n.split(" ") });
pe.isolate = new pe({ deserialize: (n) => {
  if (n && n != "rtl" && n != "ltr" && n != "auto")
    throw new RangeError("Invalid value for isolate: " + n);
  return n || "auto";
} });
pe.contextHash = new pe({ perNode: !0 });
pe.lookAhead = new pe({ perNode: !0 });
pe.mounted = new pe({ perNode: !0 });
class Ms {
  constructor(e, t, i) {
    this.tree = e, this.overlay = t, this.parser = i;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[pe.mounted.id];
  }
}
const KR = /* @__PURE__ */ Object.create(null);
class ut {
  /**
  @internal
  */
  constructor(e, t, i, r = 0) {
    this.name = e, this.props = t, this.id = i, this.flags = r;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : KR, i = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), r = new ut(e.name || "", t, e.id, i);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(r)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[s[0].id] = s[1];
        }
    }
    return r;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(pe.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let i in e)
      for (let r of i.split(" "))
        t[r] = e[i];
    return (i) => {
      for (let r = i.prop(pe.group), s = -1; s < (r ? r.length : 0); s++) {
        let o = t[s < 0 ? i.name : r[s]];
        if (o)
          return o;
      }
    };
  }
}
ut.none = new ut(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class io {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = [];
    for (let i of this.types) {
      let r = null;
      for (let s of e) {
        let o = s(i);
        o && (r || (r = Object.assign({}, i.props)), r[o[0].id] = o[1]);
      }
      t.push(r ? new ut(i.name, r, i.id, i.flags) : i);
    }
    return new io(t);
  }
}
const Vo = /* @__PURE__ */ new WeakMap(), rm = /* @__PURE__ */ new WeakMap();
var Ye;
(function(n) {
  n[n.ExcludeBuffers = 1] = "ExcludeBuffers", n[n.IncludeAnonymous = 2] = "IncludeAnonymous", n[n.IgnoreMounts = 4] = "IgnoreMounts", n[n.IgnoreOverlays = 8] = "IgnoreOverlays";
})(Ye || (Ye = {}));
class Me {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, i, r, s) {
    if (this.type = e, this.children = t, this.positions = i, this.length = r, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, a] of s)
        this.props[typeof o == "number" ? o : o.id] = a;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = Ms.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let i of this.children) {
      let r = i.toString();
      r && (t && (t += ","), t += r);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new Ra(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, i = 0) {
    let r = Vo.get(this) || this.topNode, s = new Ra(r);
    return s.moveTo(e, t), Vo.set(this, s._tree), s;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new Et(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let i = Ns(Vo.get(this) || this.topNode, e, t, !1);
    return Vo.set(this, i), i;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let i = Ns(rm.get(this) || this.topNode, e, t, !0);
    return rm.set(this, i), i;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return tM(this, e, t);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: i, from: r = 0, to: s = this.length } = e, o = e.mode || 0, a = (o & Ye.IncludeAnonymous) > 0;
    for (let l = this.cursor(o | Ye.IncludeAnonymous); ; ) {
      let c = !1;
      if (l.from <= s && l.to >= r && (!a && l.type.isAnonymous || t(l) !== !1)) {
        if (l.firstChild())
          continue;
        c = !0;
      }
      for (; c && i && (a || !l.type.isAnonymous) && i(l), !l.nextSibling(); ) {
        if (!l.parent())
          return;
        c = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : Hh(ut.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, i, r) => new Me(this.type, t, i, r, this.propValues), e.makeTree || ((t, i, r) => new Me(ut.none, t, i, r)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return nM(e);
  }
}
Me.empty = new Me(ut.none, [], [], 0);
class Wh {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Wh(this.buffer, this.index);
  }
}
class ki {
  /**
  Create a tree buffer.
  */
  constructor(e, t, i) {
    this.buffer = e, this.length = t, this.set = i;
  }
  /**
  @internal
  */
  get type() {
    return ut.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e], i = this.buffer[e + 3], r = this.set.types[t], s = r.name;
    if (/\W/.test(s) && !r.isError && (s = JSON.stringify(s)), e += 4, i == e)
      return s;
    let o = [];
    for (; e < i; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + o.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, t, i, r, s) {
    let { buffer: o } = this, a = -1;
    for (let l = e; l != t && !(r0(s, r, o[l + 1], o[l + 2]) && (a = l, i > 0)); l = o[l + 3])
      ;
    return a;
  }
  /**
  @internal
  */
  slice(e, t, i) {
    let r = this.buffer, s = new Uint16Array(t - e), o = 0;
    for (let a = e, l = 0; a < t; ) {
      s[l++] = r[a++], s[l++] = r[a++] - i;
      let c = s[l++] = r[a++] - i;
      s[l++] = r[a++] - e, o = Math.max(o, c);
    }
    return new ki(s, o, this.set);
  }
}
function r0(n, e, t, i) {
  switch (n) {
    case -2:
      return t < e;
    case -1:
      return i >= e && t < e;
    case 0:
      return t < e && i > e;
    case 1:
      return t <= e && i > e;
    case 2:
      return i > e;
    case 4:
      return !0;
  }
}
function Ns(n, e, t, i) {
  for (var r; n.from == n.to || (t < 1 ? n.from >= e : n.from > e) || (t > -1 ? n.to <= e : n.to < e); ) {
    let o = !i && n instanceof Et && n.index < 0 ? null : n.parent;
    if (!o)
      return n;
    n = o;
  }
  let s = i ? 0 : Ye.IgnoreOverlays;
  if (i)
    for (let o = n, a = o.parent; a; o = a, a = o.parent)
      o instanceof Et && o.index < 0 && ((r = a.enter(e, t, s)) === null || r === void 0 ? void 0 : r.from) != o.from && (n = a);
  for (; ; ) {
    let o = n.enter(e, t, s);
    if (!o)
      return n;
    n = o;
  }
}
class s0 {
  cursor(e = 0) {
    return new Ra(this, e);
  }
  getChild(e, t = null, i = null) {
    let r = sm(this, e, t, i);
    return r.length ? r[0] : null;
  }
  getChildren(e, t = null, i = null) {
    return sm(this, e, t, i);
  }
  resolve(e, t = 0) {
    return Ns(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return Ns(this, e, t, !0);
  }
  matchContext(e) {
    return Bu(this.parent, e);
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e), i = this;
    for (; t; ) {
      let r = t.lastChild;
      if (!r || r.to != t.to)
        break;
      r.type.isError && r.from == r.to ? (i = t, t = r.prevSibling) : t = r;
    }
    return i;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class Et extends s0 {
  constructor(e, t, i, r) {
    super(), this._tree = e, this.from = t, this.index = i, this._parent = r;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, t, i, r, s = 0) {
    for (let o = this; ; ) {
      for (let { children: a, positions: l } = o._tree, c = t > 0 ? a.length : -1; e != c; e += t) {
        let u = a[e], h = l[e] + o.from;
        if (r0(r, i, h, h + u.length)) {
          if (u instanceof ki) {
            if (s & Ye.ExcludeBuffers)
              continue;
            let f = u.findChild(0, u.buffer.length, t, i - h, r);
            if (f > -1)
              return new $n(new JR(o, u, e, h), null, f);
          } else if (s & Ye.IncludeAnonymous || !u.type.isAnonymous || jh(u)) {
            let f;
            if (!(s & Ye.IgnoreMounts) && (f = Ms.get(u)) && !f.overlay)
              return new Et(f.tree, h, e, o);
            let d = new Et(u, h, e, o);
            return s & Ye.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? u.children.length - 1 : 0, t, i, r);
          }
        }
      }
      if (s & Ye.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + t : e = t < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    let r;
    if (!(i & Ye.IgnoreOverlays) && (r = Ms.get(this._tree)) && r.overlay) {
      let s = e - this.from;
      for (let { from: o, to: a } of r.overlay)
        if ((t > 0 ? o <= s : o < s) && (t < 0 ? a >= s : a > s))
          return new Et(r.tree, r.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, t, i);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function sm(n, e, t, i) {
  let r = n.cursor(), s = [];
  if (!r.firstChild())
    return s;
  if (t != null) {
    for (let o = !1; !o; )
      if (o = r.type.is(t), !r.nextSibling())
        return s;
  }
  for (; ; ) {
    if (i != null && r.type.is(i))
      return s;
    if (r.type.is(e) && s.push(r.node), !r.nextSibling())
      return i == null ? s : [];
  }
}
function Bu(n, e, t = e.length - 1) {
  for (let i = n; t >= 0; i = i.parent) {
    if (!i)
      return !1;
    if (!i.type.isAnonymous) {
      if (e[t] && e[t] != i.name)
        return !1;
      t--;
    }
  }
  return !0;
}
class JR {
  constructor(e, t, i, r) {
    this.parent = e, this.buffer = t, this.index = i, this.start = r;
  }
}
class $n extends s0 {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, t, i) {
    super(), this.context = e, this._parent = t, this.index = i, this.type = e.buffer.set.types[e.buffer.buffer[i]];
  }
  child(e, t, i) {
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.context.start, i);
    return s < 0 ? null : new $n(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    if (i & Ye.ExcludeBuffers)
      return null;
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return s < 0 ? null : new $n(this.context, this, s);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new $n(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new $n(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: i } = this.context, r = this.index + 4, s = i.buffer[this.index + 3];
    if (s > r) {
      let o = i.buffer[this.index + 1];
      e.push(i.slice(r, s, o)), t.push(0);
    }
    return new Me(this.type, e, t, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function o0(n) {
  if (!n.length)
    return null;
  let e = 0, t = n[0];
  for (let s = 1; s < n.length; s++) {
    let o = n[s];
    (o.from > t.from || o.to < t.to) && (t = o, e = s);
  }
  let i = t instanceof Et && t.index < 0 ? null : t.parent, r = n.slice();
  return i ? r[e] = i : r.splice(e, 1), new eM(r, t);
}
class eM {
  constructor(e, t) {
    this.heads = e, this.node = t;
  }
  get next() {
    return o0(this.heads);
  }
}
function tM(n, e, t) {
  let i = n.resolveInner(e, t), r = null;
  for (let s = i instanceof Et ? i : i.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let o = s.parent;
      (r || (r = [i])).push(o.resolve(e, t)), s = o;
    } else {
      let o = Ms.get(s.tree);
      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {
        let a = new Et(o.tree, o.overlay[0].from + s.from, -1, s);
        (r || (r = [i])).push(Ns(a, e, t, !1));
      }
    }
  return r ? o0(r) : i;
}
class Ra {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof Et)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let i = e._parent; i; i = i._parent)
        this.stack.unshift(i.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: i, buffer: r } = this.buffer;
    return this.type = t || r.set.types[r.buffer[e]], this.from = i + r.buffer[e + 1], this.to = i + r.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof Et ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, t, i) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, i, this.mode));
    let { buffer: r } = this.buffer, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.buffer.start, i);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, i = this.mode) {
    return this.buffer ? i & Ye.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, i));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & Ye.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & Ye.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, i = this.stack.length - 1;
    if (e < 0) {
      let r = i < 0 ? 0 : this.stack[i] + 4;
      if (this.index != r)
        return this.yieldBuf(t.findChild(
          r,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let r = t.buffer[this.index + 3];
      if (r < (i < 0 ? t.buffer.length : t.buffer[this.stack[i] + 3]))
        return this.yieldBuf(r);
    }
    return i < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, i, { buffer: r } = this;
    if (r) {
      if (e > 0) {
        if (this.index < r.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (r.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: t, parent: i } = r);
    } else
      ({ index: t, _parent: i } = this._tree);
    for (; i; { index: t, _parent: i } = i)
      if (t > -1)
        for (let s = t + e, o = e < 0 ? -1 : i._tree.children.length; s != o; s += e) {
          let a = i._tree.children[s];
          if (this.mode & Ye.IncludeAnonymous || a instanceof ki || !a.type.isAnonymous || jh(a))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, i = 0;
    if (e && e.context == this.buffer)
      e: for (let r = this.index, s = this.stack.length; s >= 0; ) {
        for (let o = e; o; o = o._parent)
          if (o.index == r) {
            if (r == this.index)
              return o;
            t = o, i = s + 1;
            break e;
          }
        r = this.stack[--s];
      }
    for (let r = i; r < this.stack.length; r++)
      t = new $n(this.buffer, t, this.stack[r]);
    return this.bufferNode = new $n(this.buffer, t, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let i = 0; ; ) {
      let r = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          i++;
          continue;
        }
        this.type.isAnonymous || (r = !0);
      }
      for (; ; ) {
        if (r && t && t(this), r = this.type.isAnonymous, !i)
          return;
        if (this.nextSibling())
          break;
        this.parent(), i--, r = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return Bu(this.node.parent, e);
    let { buffer: t } = this.buffer, { types: i } = t.set;
    for (let r = e.length - 1, s = this.stack.length - 1; r >= 0; s--) {
      if (s < 0)
        return Bu(this._tree, e, r);
      let o = i[t.buffer[this.stack[s]]];
      if (!o.isAnonymous) {
        if (e[r] && e[r] != o.name)
          return !1;
        r--;
      }
    }
    return !0;
  }
}
function jh(n) {
  return n.children.some((e) => e instanceof ki || !e.type.isAnonymous || jh(e));
}
function nM(n) {
  var e;
  let { buffer: t, nodeSet: i, maxBufferLength: r = i0, reused: s = [], minRepeatType: o = i.types.length } = n, a = Array.isArray(t) ? new Wh(t, t.length) : t, l = i.types, c = 0, u = 0;
  function h(v, x, C, T, A, Q) {
    let { id: M, start: R, end: L, size: P } = a, $ = u, Y = c;
    for (; P < 0; )
      if (a.next(), P == -1) {
        let Z = s[M];
        C.push(Z), T.push(R - v);
        return;
      } else if (P == -3) {
        c = M;
        return;
      } else if (P == -4) {
        u = M;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${P}`);
    let ie = l[M], D, ee, b = R - v;
    if (L - R <= r && (ee = O(a.pos - x, A))) {
      let Z = new Uint16Array(ee.size - ee.skip), j = a.pos - ee.size, w = Z.length;
      for (; a.pos > j; )
        w = g(ee.start, Z, w);
      D = new ki(Z, L - ee.start, i), b = ee.start - v;
    } else {
      let Z = a.pos - P;
      a.next();
      let j = [], w = [], he = M >= o ? M : -1, ve = 0, Ee = L;
      for (; a.pos > Z; )
        he >= 0 && a.id == he && a.size >= 0 ? (a.end <= Ee - r && (p(j, w, R, ve, a.end, Ee, he, $, Y), ve = j.length, Ee = a.end), a.next()) : Q > 2500 ? f(R, Z, j, w) : h(R, Z, j, w, he, Q + 1);
      if (he >= 0 && ve > 0 && ve < j.length && p(j, w, R, ve, R, Ee, he, $, Y), j.reverse(), w.reverse(), he > -1 && ve > 0) {
        let _e = d(ie, Y);
        D = Hh(ie, j, w, 0, j.length, 0, L - R, _e, _e);
      } else
        D = m(ie, j, w, L - R, $ - L, Y);
    }
    C.push(D), T.push(b);
  }
  function f(v, x, C, T) {
    let A = [], Q = 0, M = -1;
    for (; a.pos > x; ) {
      let { id: R, start: L, end: P, size: $ } = a;
      if ($ > 4)
        a.next();
      else {
        if (M > -1 && L < M)
          break;
        M < 0 && (M = P - r), A.push(R, L, P), Q++, a.next();
      }
    }
    if (Q) {
      let R = new Uint16Array(Q * 4), L = A[A.length - 2];
      for (let P = A.length - 3, $ = 0; P >= 0; P -= 3)
        R[$++] = A[P], R[$++] = A[P + 1] - L, R[$++] = A[P + 2] - L, R[$++] = $;
      C.push(new ki(R, A[2] - L, i)), T.push(L - v);
    }
  }
  function d(v, x) {
    return (C, T, A) => {
      let Q = 0, M = C.length - 1, R, L;
      if (M >= 0 && (R = C[M]) instanceof Me) {
        if (!M && R.type == v && R.length == A)
          return R;
        (L = R.prop(pe.lookAhead)) && (Q = T[M] + R.length + L);
      }
      return m(v, C, T, A, Q, x);
    };
  }
  function p(v, x, C, T, A, Q, M, R, L) {
    let P = [], $ = [];
    for (; v.length > T; )
      P.push(v.pop()), $.push(x.pop() + C - A);
    v.push(m(i.types[M], P, $, Q - A, R - Q, L)), x.push(A - C);
  }
  function m(v, x, C, T, A, Q, M) {
    if (Q) {
      let R = [pe.contextHash, Q];
      M = M ? [R].concat(M) : [R];
    }
    if (A > 25) {
      let R = [pe.lookAhead, A];
      M = M ? [R].concat(M) : [R];
    }
    return new Me(v, x, C, T, M);
  }
  function O(v, x) {
    let C = a.fork(), T = 0, A = 0, Q = 0, M = C.end - r, R = { size: 0, start: 0, skip: 0 };
    e: for (let L = C.pos - v; C.pos > L; ) {
      let P = C.size;
      if (C.id == x && P >= 0) {
        R.size = T, R.start = A, R.skip = Q, Q += 4, T += 4, C.next();
        continue;
      }
      let $ = C.pos - P;
      if (P < 0 || $ < L || C.start < M)
        break;
      let Y = C.id >= o ? 4 : 0, ie = C.start;
      for (C.next(); C.pos > $; ) {
        if (C.size < 0)
          if (C.size == -3)
            Y += 4;
          else
            break e;
        else C.id >= o && (Y += 4);
        C.next();
      }
      A = ie, T += P, Q += Y;
    }
    return (x < 0 || T == v) && (R.size = T, R.start = A, R.skip = Q), R.size > 4 ? R : void 0;
  }
  function g(v, x, C) {
    let { id: T, start: A, end: Q, size: M } = a;
    if (a.next(), M >= 0 && T < o) {
      let R = C;
      if (M > 4) {
        let L = a.pos - (M - 4);
        for (; a.pos > L; )
          C = g(v, x, C);
      }
      x[--C] = R, x[--C] = Q - v, x[--C] = A - v, x[--C] = T;
    } else M == -3 ? c = T : M == -4 && (u = T);
    return C;
  }
  let y = [], S = [];
  for (; a.pos > 0; )
    h(n.start || 0, n.bufferStart || 0, y, S, -1, 0);
  let _ = (e = n.length) !== null && e !== void 0 ? e : y.length ? S[0] + y[0].length : 0;
  return new Me(l[n.topID], y.reverse(), S.reverse(), _);
}
const om = /* @__PURE__ */ new WeakMap();
function fa(n, e) {
  if (!n.isAnonymous || e instanceof ki || e.type != n)
    return 1;
  let t = om.get(e);
  if (t == null) {
    t = 1;
    for (let i of e.children) {
      if (i.type != n || !(i instanceof Me)) {
        t = 1;
        break;
      }
      t += fa(n, i);
    }
    om.set(e, t);
  }
  return t;
}
function Hh(n, e, t, i, r, s, o, a, l) {
  let c = 0;
  for (let p = i; p < r; p++)
    c += fa(n, e[p]);
  let u = Math.ceil(
    c * 1.5 / 8
    /* Balance.BranchFactor */
  ), h = [], f = [];
  function d(p, m, O, g, y) {
    for (let S = O; S < g; ) {
      let _ = S, v = m[S], x = fa(n, p[S]);
      for (S++; S < g; S++) {
        let C = fa(n, p[S]);
        if (x + C >= u)
          break;
        x += C;
      }
      if (S == _ + 1) {
        if (x > u) {
          let C = p[_];
          d(C.children, C.positions, 0, C.children.length, m[_] + y);
          continue;
        }
        h.push(p[_]);
      } else {
        let C = m[S - 1] + p[S - 1].length - v;
        h.push(Hh(n, p, m, _, S, v, C, null, l));
      }
      f.push(v + y - s);
    }
  }
  return d(e, t, i, r, 0), (a || l)(h, f, o);
}
class a0 {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(e, t, i) {
    let r = this.map.get(e);
    r || this.map.set(e, r = /* @__PURE__ */ new Map()), r.set(t, i);
  }
  getBuffer(e, t) {
    let i = this.map.get(e);
    return i && i.get(t);
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof $n ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof Et && this.map.set(e.tree, t);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof $n ? this.getBuffer(e.context.buffer, e.index) : e instanceof Et ? this.map.get(e.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);
  }
}
class Jn {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, i, r, s = !1, o = !1) {
    this.from = e, this.to = t, this.tree = i, this.offset = r, this.open = (s ? 1 : 0) | (o ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], i = !1) {
    let r = [new Jn(0, e.length, e, 0, !1, i)];
    for (let s of t)
      s.to > e.length && r.push(s);
    return r;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, i = 128) {
    if (!t.length)
      return e;
    let r = [], s = 1, o = e.length ? e[0] : null;
    for (let a = 0, l = 0, c = 0; ; a++) {
      let u = a < t.length ? t[a] : null, h = u ? u.fromA : 1e9;
      if (h - l >= i)
        for (; o && o.from < h; ) {
          let f = o;
          if (l >= f.from || h <= f.to || c) {
            let d = Math.max(f.from, l) - c, p = Math.min(f.to, h) - c;
            f = d >= p ? null : new Jn(d, p, f.tree, f.offset + c, a > 0, !!u);
          }
          if (f && r.push(f), o.to > h)
            break;
          o = s < e.length ? e[s++] : null;
        }
      if (!u)
        break;
      l = u.toA, c = u.toA - u.toB;
    }
    return r;
  }
}
class Kh {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, i) {
    return typeof e == "string" && (e = new iM(e)), i = i ? i.length ? i.map((r) => new sn(r.from, r.to)) : [new sn(0, 0)] : [new sn(0, e.length)], this.createParse(e, t || [], i);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, i) {
    let r = this.startParse(e, t, i);
    for (; ; ) {
      let s = r.advance();
      if (s)
        return s;
    }
  }
}
class iM {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
}
function l0(n) {
  return (e, t, i, r) => new sM(e, n, t, i, r);
}
class am {
  constructor(e, t, i, r, s) {
    this.parser = e, this.parse = t, this.overlay = i, this.target = r, this.from = s;
  }
}
function lm(n) {
  if (!n.length || n.some((e) => e.from >= e.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(n));
}
class rM {
  constructor(e, t, i, r, s, o, a) {
    this.parser = e, this.predicate = t, this.mounts = i, this.index = r, this.start = s, this.target = o, this.prev = a, this.depth = 0, this.ranges = [];
  }
}
const zu = new pe({ perNode: !0 });
class sM {
  constructor(e, t, i, r, s) {
    this.nest = t, this.input = i, this.fragments = r, this.ranges = s, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = e;
  }
  advance() {
    if (this.baseParse) {
      let i = this.baseParse.advance();
      if (!i)
        return null;
      if (this.baseParse = null, this.baseTree = i, this.startInner(), this.stoppedAt != null)
        for (let r of this.inner)
          r.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let i = this.baseTree;
      return this.stoppedAt != null && (i = new Me(i.type, i.children, i.positions, i.length, i.propValues.concat([[zu, this.stoppedAt]]))), i;
    }
    let e = this.inner[this.innerDone], t = e.parse.advance();
    if (t) {
      this.innerDone++;
      let i = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props);
      i[pe.mounted.id] = new Ms(t, e.overlay, e.parser), e.target.props = i;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let e = this.input.length;
    for (let t = this.innerDone; t < this.inner.length; t++)
      this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos));
    return e;
  }
  stopAt(e) {
    if (this.stoppedAt = e, this.baseParse)
      this.baseParse.stopAt(e);
    else
      for (let t = this.innerDone; t < this.inner.length; t++)
        this.inner[t].parse.stopAt(e);
  }
  startInner() {
    let e = new lM(this.fragments), t = null, i = null, r = new Ra(new Et(this.baseTree, this.ranges[0].from, 0, null), Ye.IncludeAnonymous | Ye.IgnoreMounts);
    e: for (let s, o; ; ) {
      let a = !0, l;
      if (this.stoppedAt != null && r.from >= this.stoppedAt)
        a = !1;
      else if (e.hasNode(r)) {
        if (t) {
          let c = t.mounts.find((u) => u.frag.from <= r.from && u.frag.to >= r.to && u.mount.overlay);
          if (c)
            for (let u of c.mount.overlay) {
              let h = u.from + c.pos, f = u.to + c.pos;
              h >= r.from && f <= r.to && !t.ranges.some((d) => d.from < f && d.to > h) && t.ranges.push({ from: h, to: f });
            }
        }
        a = !1;
      } else if (i && (o = oM(i.ranges, r.from, r.to)))
        a = o != 2;
      else if (!r.type.isAnonymous && (s = this.nest(r, this.input)) && (r.from < r.to || !s.overlay)) {
        r.tree || aM(r);
        let c = e.findMounts(r.from, s.parser);
        if (typeof s.overlay == "function")
          t = new rM(s.parser, s.overlay, c, this.inner.length, r.from, r.tree, t);
        else {
          let u = hm(this.ranges, s.overlay || (r.from < r.to ? [new sn(r.from, r.to)] : []));
          u.length && lm(u), (u.length || !s.overlay) && this.inner.push(new am(s.parser, u.length ? s.parser.startParse(this.input, fm(c, u), u) : s.parser.startParse(""), s.overlay ? s.overlay.map((h) => new sn(h.from - r.from, h.to - r.from)) : null, r.tree, u.length ? u[0].from : r.from)), s.overlay ? u.length && (i = { ranges: u, depth: 0, prev: i }) : a = !1;
        }
      } else if (t && (l = t.predicate(r)) && (l === !0 && (l = new sn(r.from, r.to)), l.from < l.to)) {
        let c = t.ranges.length - 1;
        c >= 0 && t.ranges[c].to == l.from ? t.ranges[c] = { from: t.ranges[c].from, to: l.to } : t.ranges.push(l);
      }
      if (a && r.firstChild())
        t && t.depth++, i && i.depth++;
      else
        for (; !r.nextSibling(); ) {
          if (!r.parent())
            break e;
          if (t && !--t.depth) {
            let c = hm(this.ranges, t.ranges);
            c.length && (lm(c), this.inner.splice(t.index, 0, new am(t.parser, t.parser.startParse(this.input, fm(t.mounts, c), c), t.ranges.map((u) => new sn(u.from - t.start, u.to - t.start)), t.target, c[0].from))), t = t.prev;
          }
          i && !--i.depth && (i = i.prev);
        }
    }
  }
}
function oM(n, e, t) {
  for (let i of n) {
    if (i.from >= t)
      break;
    if (i.to > e)
      return i.from <= e && i.to >= t ? 2 : 1;
  }
  return 0;
}
function cm(n, e, t, i, r, s) {
  if (e < t) {
    let o = n.buffer[e + 1];
    i.push(n.slice(e, t, o)), r.push(o - s);
  }
}
function aM(n) {
  let { node: e } = n, t = [], i = e.context.buffer;
  do
    t.push(n.index), n.parent();
  while (!n.tree);
  let r = n.tree, s = r.children.indexOf(i), o = r.children[s], a = o.buffer, l = [s];
  function c(u, h, f, d, p, m) {
    let O = t[m], g = [], y = [];
    cm(o, u, O, g, y, d);
    let S = a[O + 1], _ = a[O + 2];
    l.push(g.length);
    let v = m ? c(O + 4, a[O + 3], o.set.types[a[O]], S, _ - S, m - 1) : e.toTree();
    return g.push(v), y.push(S - d), cm(o, a[O + 3], h, g, y, d), new Me(f, g, y, p);
  }
  r.children[s] = c(0, a.length, ut.none, 0, o.length, t.length - 1);
  for (let u of l) {
    let h = n.tree.children[u], f = n.tree.positions[u];
    n.yield(new Et(h, f + n.from, u, n._tree));
  }
}
class um {
  constructor(e, t) {
    this.offset = t, this.done = !1, this.cursor = e.cursor(Ye.IncludeAnonymous | Ye.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(e) {
    let { cursor: t } = this, i = e - this.offset;
    for (; !this.done && t.from < i; )
      t.to >= e && t.enter(i, 1, Ye.IgnoreOverlays | Ye.ExcludeBuffers) || t.next(!1) || (this.done = !0);
  }
  hasNode(e) {
    if (this.moveTo(e.from), !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)
      for (let t = this.cursor.tree; ; ) {
        if (t == e.tree)
          return !0;
        if (t.children.length && t.positions[0] == 0 && t.children[0] instanceof Me)
          t = t.children[0];
        else
          break;
      }
    return !1;
  }
}
let lM = class {
  constructor(e) {
    var t;
    if (this.fragments = e, this.curTo = 0, this.fragI = 0, e.length) {
      let i = this.curFrag = e[0];
      this.curTo = (t = i.tree.prop(zu)) !== null && t !== void 0 ? t : i.to, this.inner = new um(i.tree, -i.offset);
    } else
      this.curFrag = this.inner = null;
  }
  hasNode(e) {
    for (; this.curFrag && e.from >= this.curTo; )
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e);
  }
  nextFrag() {
    var e;
    if (this.fragI++, this.fragI == this.fragments.length)
      this.curFrag = this.inner = null;
    else {
      let t = this.curFrag = this.fragments[this.fragI];
      this.curTo = (e = t.tree.prop(zu)) !== null && e !== void 0 ? e : t.to, this.inner = new um(t.tree, -t.offset);
    }
  }
  findMounts(e, t) {
    var i;
    let r = [];
    if (this.inner) {
      this.inner.cursor.moveTo(e, 1);
      for (let s = this.inner.cursor.node; s; s = s.parent) {
        let o = (i = s.tree) === null || i === void 0 ? void 0 : i.prop(pe.mounted);
        if (o && o.parser == t)
          for (let a = this.fragI; a < this.fragments.length; a++) {
            let l = this.fragments[a];
            if (l.from >= s.to)
              break;
            l.tree == this.curFrag.tree && r.push({
              frag: l,
              pos: s.from - l.offset,
              mount: o
            });
          }
      }
    }
    return r;
  }
};
function hm(n, e) {
  let t = null, i = e;
  for (let r = 1, s = 0; r < n.length; r++) {
    let o = n[r - 1].to, a = n[r].from;
    for (; s < i.length; s++) {
      let l = i[s];
      if (l.from >= a)
        break;
      l.to <= o || (t || (i = t = e.slice()), l.from < o ? (t[s] = new sn(l.from, o), l.to > a && t.splice(s + 1, 0, new sn(a, l.to))) : l.to > a ? t[s--] = new sn(a, l.to) : t.splice(s--, 1));
    }
  }
  return i;
}
function cM(n, e, t, i) {
  let r = 0, s = 0, o = !1, a = !1, l = -1e9, c = [];
  for (; ; ) {
    let u = r == n.length ? 1e9 : o ? n[r].to : n[r].from, h = s == e.length ? 1e9 : a ? e[s].to : e[s].from;
    if (o != a) {
      let f = Math.max(l, t), d = Math.min(u, h, i);
      f < d && c.push(new sn(f, d));
    }
    if (l = Math.min(u, h), l == 1e9)
      break;
    u == l && (o ? (o = !1, r++) : o = !0), h == l && (a ? (a = !1, s++) : a = !0);
  }
  return c;
}
function fm(n, e) {
  let t = [];
  for (let { pos: i, mount: r, frag: s } of n) {
    let o = i + (r.overlay ? r.overlay[0].from : 0), a = o + r.tree.length, l = Math.max(s.from, o), c = Math.min(s.to, a);
    if (r.overlay) {
      let u = r.overlay.map((f) => new sn(f.from + i, f.to + i)), h = cM(e, u, l, c);
      for (let f = 0, d = l; ; f++) {
        let p = f == h.length, m = p ? c : h[f].from;
        if (m > d && t.push(new Jn(d, m, r.tree, -o, s.from >= d || s.openStart, s.to <= m || s.openEnd)), p)
          break;
        d = h[f].to;
      }
    } else
      t.push(new Jn(l, c, r.tree, -o, s.from >= o || s.openStart, s.to <= a || s.openEnd));
  }
  return t;
}
let uM = 0;
class Ht {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.name = e, this.set = t, this.base = i, this.modified = r, this.id = uM++;
  }
  toString() {
    let { name: e } = this;
    for (let t of this.modified)
      t.name && (e = `${t.name}(${e})`);
    return e;
  }
  static define(e, t) {
    let i = typeof e == "string" ? e : "?";
    if (e instanceof Ht && (t = e), t?.base)
      throw new Error("Can not derive from a modified tag");
    let r = new Ht(i, [], null, []);
    if (r.set.push(r), t)
      for (let s of t.set)
        r.set.push(s);
    return r;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(e) {
    let t = new Ma(e);
    return (i) => i.modified.indexOf(t) > -1 ? i : Ma.get(i.base || i, i.modified.concat(t).sort((r, s) => r.id - s.id));
  }
}
let hM = 0;
class Ma {
  constructor(e) {
    this.name = e, this.instances = [], this.id = hM++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let i = t[0].instances.find((a) => a.base == e && fM(t, a.modified));
    if (i)
      return i;
    let r = [], s = new Ht(e.name, r, e, t);
    for (let a of t)
      a.instances.push(s);
    let o = dM(t);
    for (let a of e.set)
      if (!a.modified.length)
        for (let l of o)
          r.push(Ma.get(a, l));
    return s;
  }
}
function fM(n, e) {
  return n.length == e.length && n.every((t, i) => t == e[i]);
}
function dM(n) {
  let e = [[]];
  for (let t = 0; t < n.length; t++)
    for (let i = 0, r = e.length; i < r; i++)
      e.push(e[i].concat(n[t]));
  return e.sort((t, i) => i.length - t.length);
}
function Nr(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let i = n[t];
    Array.isArray(i) || (i = [i]);
    for (let r of t.split(" "))
      if (r) {
        let s = [], o = 2, a = r;
        for (let h = 0; ; ) {
          if (a == "..." && h > 0 && h + 3 == r.length) {
            o = 1;
            break;
          }
          let f = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a);
          if (!f)
            throw new RangeError("Invalid path: " + r);
          if (s.push(f[0] == "*" ? "" : f[0][0] == '"' ? JSON.parse(f[0]) : f[0]), h += f[0].length, h == r.length)
            break;
          let d = r[h++];
          if (h == r.length && d == "!") {
            o = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + r);
          a = r.slice(h);
        }
        let l = s.length - 1, c = s[l];
        if (!c)
          throw new RangeError("Invalid path: " + r);
        let u = new Na(i, o, l > 0 ? s.slice(0, l) : null);
        e[c] = u.sort(e[c]);
      }
  }
  return c0.add(e);
}
const c0 = new pe();
class Na {
  constructor(e, t, i, r) {
    this.tags = e, this.mode = t, this.context = i, this.next = r;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
Na.empty = new Na([], 2, null);
function u0(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let s of n)
    if (!Array.isArray(s.tag))
      t[s.tag.id] = s.class;
    else
      for (let o of s.tag)
        t[o.id] = s.class;
  let { scope: i, all: r = null } = e || {};
  return {
    style: (s) => {
      let o = r;
      for (let a of s)
        for (let l of a.set) {
          let c = t[l.id];
          if (c) {
            o = o ? o + " " + c : c;
            break;
          }
        }
      return o;
    },
    scope: i
  };
}
function pM(n, e) {
  let t = null;
  for (let i of n) {
    let r = i.style(e);
    r && (t = t ? t + " " + r : r);
  }
  return t;
}
function mM(n, e, t, i = 0, r = n.length) {
  let s = new gM(i, Array.isArray(e) ? e : [e], t);
  s.highlightRange(n.cursor(), i, r, "", s.highlighters), s.flush(r);
}
class gM {
  constructor(e, t, i) {
    this.at = e, this.highlighters = t, this.span = i, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, i, r, s) {
    let { type: o, from: a, to: l } = e;
    if (a >= i || l <= t)
      return;
    o.isTop && (s = this.highlighters.filter((d) => !d.scope || d.scope(o)));
    let c = r, u = OM(e) || Na.empty, h = pM(s, u.tags);
    if (h && (c && (c += " "), c += h, u.mode == 1 && (r += (r ? " " : "") + h)), this.startSpan(Math.max(t, a), c), u.opaque)
      return;
    let f = e.tree && e.tree.prop(pe.mounted);
    if (f && f.overlay) {
      let d = e.node.enter(f.overlay[0].from + a, 1), p = this.highlighters.filter((O) => !O.scope || O.scope(f.tree.type)), m = e.firstChild();
      for (let O = 0, g = a; ; O++) {
        let y = O < f.overlay.length ? f.overlay[O] : null, S = y ? y.from + a : l, _ = Math.max(t, g), v = Math.min(i, S);
        if (_ < v && m)
          for (; e.from < v && (this.highlightRange(e, _, v, r, s), this.startSpan(Math.min(v, e.to), c), !(e.to >= S || !e.nextSibling())); )
            ;
        if (!y || S > i)
          break;
        g = y.to + a, g > t && (this.highlightRange(d.cursor(), Math.max(t, y.from + a), Math.min(i, g), "", p), this.startSpan(Math.min(i, g), c));
      }
      m && e.parent();
    } else if (e.firstChild()) {
      f && (r = "");
      do
        if (!(e.to <= t)) {
          if (e.from >= i)
            break;
          this.highlightRange(e, t, i, r, s), this.startSpan(Math.min(i, e.to), c);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function OM(n) {
  let e = n.type.prop(c0);
  for (; e && e.context && !n.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const F = Ht.define, Yo = F(), hi = F(), dm = F(hi), pm = F(hi), fi = F(), Fo = F(fi), oc = F(fi), Qn = F(), Ti = F(Qn), vn = F(), En = F(), Zu = F(), ns = F(Zu), Uo = F(), k = {
  /**
  A comment.
  */
  comment: Yo,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: F(Yo),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: F(Yo),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: F(Yo),
  /**
  Any kind of identifier.
  */
  name: hi,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: F(hi),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: dm,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: F(dm),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: pm,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: F(pm),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: F(hi),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: F(hi),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: F(hi),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: F(hi),
  /**
  A literal value.
  */
  literal: fi,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: Fo,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: F(Fo),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: F(Fo),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: F(Fo),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: oc,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: F(oc),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: F(oc),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: F(fi),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: F(fi),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: F(fi),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: F(fi),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: F(fi),
  /**
  A language keyword.
  */
  keyword: vn,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: F(vn),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: F(vn),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: F(vn),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: F(vn),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: F(vn),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: F(vn),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: F(vn),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: F(vn),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: F(vn),
  /**
  An operator.
  */
  operator: En,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: F(En),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: F(En),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: F(En),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: F(En),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: F(En),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: F(En),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: F(En),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: F(En),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: F(En),
  /**
  Program or markup punctuation.
  */
  punctuation: Zu,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: F(Zu),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: ns,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: F(ns),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: F(ns),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: F(ns),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: F(ns),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: Qn,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: Ti,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: F(Ti),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: F(Ti),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: F(Ti),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: F(Ti),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: F(Ti),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: F(Ti),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: F(Qn),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: F(Qn),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: F(Qn),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: F(Qn),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: F(Qn),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: F(Qn),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: F(Qn),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: F(Qn),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: F(),
  /**
  Deleted text.
  */
  deleted: F(),
  /**
  Changed text.
  */
  changed: F(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: F(),
  /**
  Metadata or meta-instruction.
  */
  meta: Uo,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: F(Uo),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: F(Uo),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: F(Uo),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Ht.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Ht.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Ht.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Ht.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Ht.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Ht.defineModifier("special")
};
for (let n in k) {
  let e = k[n];
  e instanceof Ht && (e.name = n);
}
u0([
  { tag: k.link, class: "tok-link" },
  { tag: k.heading, class: "tok-heading" },
  { tag: k.emphasis, class: "tok-emphasis" },
  { tag: k.strong, class: "tok-strong" },
  { tag: k.keyword, class: "tok-keyword" },
  { tag: k.atom, class: "tok-atom" },
  { tag: k.bool, class: "tok-bool" },
  { tag: k.url, class: "tok-url" },
  { tag: k.labelName, class: "tok-labelName" },
  { tag: k.inserted, class: "tok-inserted" },
  { tag: k.deleted, class: "tok-deleted" },
  { tag: k.literal, class: "tok-literal" },
  { tag: k.string, class: "tok-string" },
  { tag: k.number, class: "tok-number" },
  { tag: [k.regexp, k.escape, k.special(k.string)], class: "tok-string2" },
  { tag: k.variableName, class: "tok-variableName" },
  { tag: k.local(k.variableName), class: "tok-variableName tok-local" },
  { tag: k.definition(k.variableName), class: "tok-variableName tok-definition" },
  { tag: k.special(k.variableName), class: "tok-variableName2" },
  { tag: k.definition(k.propertyName), class: "tok-propertyName tok-definition" },
  { tag: k.typeName, class: "tok-typeName" },
  { tag: k.namespace, class: "tok-namespace" },
  { tag: k.className, class: "tok-className" },
  { tag: k.macroName, class: "tok-macroName" },
  { tag: k.propertyName, class: "tok-propertyName" },
  { tag: k.operator, class: "tok-operator" },
  { tag: k.comment, class: "tok-comment" },
  { tag: k.meta, class: "tok-meta" },
  { tag: k.invalid, class: "tok-invalid" },
  { tag: k.punctuation, class: "tok-punctuation" }
]);
var ac;
const Mi = /* @__PURE__ */ new pe();
function Jh(n) {
  return K.define({
    combine: n ? (e) => e.concat(n) : void 0
  });
}
const ef = /* @__PURE__ */ new pe();
class on {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, i = [], r = "") {
    this.data = e, this.name = r, we.prototype.hasOwnProperty("tree") || Object.defineProperty(we.prototype, "tree", { get() {
      return Fe(this);
    } }), this.parser = t, this.extension = [
      Si.of(this),
      we.languageData.of((s, o, a) => {
        let l = mm(s, o, a), c = l.type.prop(Mi);
        if (!c)
          return [];
        let u = s.facet(c), h = l.type.prop(ef);
        if (h) {
          let f = l.resolve(o - l.from, a);
          for (let d of h)
            if (d.test(f, s)) {
              let p = s.facet(d.facet);
              return d.type == "replace" ? p : p.concat(u);
            }
        }
        return u;
      })
    ].concat(i);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, i = -1) {
    return mm(e, t, i).type.prop(Mi) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(Si);
    if (t?.data == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let i = [], r = (s, o) => {
      if (s.prop(Mi) == this.data) {
        i.push({ from: o, to: o + s.length });
        return;
      }
      let a = s.prop(pe.mounted);
      if (a) {
        if (a.tree.prop(Mi) == this.data) {
          if (a.overlay)
            for (let l of a.overlay)
              i.push({ from: l.from + o, to: l.to + o });
          else
            i.push({ from: o, to: o + s.length });
          return;
        } else if (a.overlay) {
          let l = i.length;
          if (r(a.tree, a.overlay[0].from + o), i.length > l)
            return;
        }
      }
      for (let l = 0; l < s.children.length; l++) {
        let c = s.children[l];
        c instanceof Me && r(c, s.positions[l] + o);
      }
    };
    return r(Fe(e), 0), i;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
on.setState = /* @__PURE__ */ me.define();
function mm(n, e, t) {
  let i = n.facet(Si), r = Fe(n).topNode;
  if (!i || i.allowsNesting)
    for (let s = r; s; s = s.enter(e, t, Ye.ExcludeBuffers))
      s.type.isTop && (r = s);
  return r;
}
class xr extends on {
  constructor(e, t, i) {
    super(e, t, [], i), this.parser = t;
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = Jh(e.languageData);
    return new xr(t, e.parser.configure({
      props: [Mi.add((i) => i.isTop ? t : void 0)]
    }), e.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new xr(this.data, this.parser.configure(e), t || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function Fe(n) {
  let e = n.field(on.state, !1);
  return e ? e.tree : Me.empty;
}
class bM {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let i = this.cursorPos - this.string.length;
    return e < i || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - i, t - i);
  }
}
let is = null;
class Is {
  constructor(e, t, i = [], r, s, o, a, l) {
    this.parser = e, this.state = t, this.fragments = i, this.tree = r, this.treeLen = s, this.viewport = o, this.skipped = a, this.scheduleOn = l, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Is(e, t, [], Me.empty, 0, i, [], null);
  }
  startParse() {
    return this.parser.startParse(new bM(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != Me.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var i;
      if (typeof e == "number") {
        let r = Date.now() + e;
        e = () => Date.now() > r;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let r = this.parse.advance();
        if (r)
          if (this.fragments = this.withoutTempSkipped(Jn.addTree(r, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i = this.parse.stoppedAt) !== null && i !== void 0 ? i : this.state.doc.length, this.tree = r, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(Jn.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = is;
    is = this;
    try {
      return e();
    } finally {
      is = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = gm(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: i, tree: r, treeLen: s, viewport: o, skipped: a } = this;
    if (this.takeTree(), !e.empty) {
      let l = [];
      if (e.iterChangedRanges((c, u, h, f) => l.push({ fromA: c, toA: u, fromB: h, toB: f })), i = Jn.applyChanges(i, l), r = Me.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        a = [];
        for (let c of this.skipped) {
          let u = e.mapPos(c.from, 1), h = e.mapPos(c.to, -1);
          u < h && a.push({ from: u, to: h });
        }
      }
    }
    return new Is(this.parser, t, i, r, s, o, a, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: r, to: s } = this.skipped[i];
      r < e.to && s > e.from && (this.fragments = gm(this.fragments, r, s), this.skipped.splice(i--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends Kh {
      createParse(t, i, r) {
        let s = r[0].from, o = r[r.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let l = is;
            if (l) {
              for (let c of r)
                l.tempSkipped.push(c);
              e && (l.scheduleOn = l.scheduleOn ? Promise.all([l.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new Me(ut.none, [], [], o - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return is;
  }
}
function gm(n, e, t) {
  return Jn.applyChanges(n, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
class kr {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), i = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, i) || t.takeTree(), new kr(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), i = Is.create(e.facet(Si).parser, e, { from: 0, to: t });
    return i.work(20, t) || i.takeTree(), new kr(i);
  }
}
on.state = /* @__PURE__ */ mt.define({
  create: kr.init,
  update(n, e) {
    for (let t of e.effects)
      if (t.is(on.setState))
        return t.value;
    return e.startState.facet(Si) != e.state.facet(Si) ? kr.init(e.state) : n.apply(e);
  }
});
let h0 = (n) => {
  let e = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (h0 = (n) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(n, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const lc = typeof navigator < "u" && (!((ac = navigator.scheduling) === null || ac === void 0) && ac.isInputPending) ? () => navigator.scheduling.isInputPending() : null, yM = /* @__PURE__ */ nt.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(on.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(on.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = h0(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i, viewport: { to: r } } = this.view, s = i.field(on.state);
    if (s.tree == s.context.tree && s.context.isDone(
      r + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !lc ? Math.max(25, e.timeRemaining() - 5) : 1e9), a = s.context.treeLen < r && i.doc.length > r + 1e3, l = s.context.work(() => lc && lc() || Date.now() > o, r + (a ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (l || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: on.setState.of(new kr(s.context)) })), this.chunkBudget > 0 && !(l && !a) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => zt(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), Si = /* @__PURE__ */ K.define({
  combine(n) {
    return n.length ? n[0] : null;
  },
  enables: (n) => [
    on.state,
    yM,
    U.contentAttributes.compute([n], (e) => {
      let t = e.facet(n);
      return t && t.name ? { "data-language": t.name } : {};
    })
  ]
});
class Ls {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    this.language = e, this.support = t, this.extension = [e, t];
  }
}
class Ia {
  constructor(e, t, i, r, s, o = void 0) {
    this.name = e, this.alias = t, this.extensions = i, this.filename = r, this.loadFunc = s, this.support = o, this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  load() {
    return this.loading || (this.loading = this.loadFunc().then((e) => this.support = e, (e) => {
      throw this.loading = null, e;
    }));
  }
  /**
  Create a language description.
  */
  static of(e) {
    let { load: t, support: i } = e;
    if (!t) {
      if (!i)
        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
      t = () => Promise.resolve(i);
    }
    return new Ia(e.name, (e.alias || []).concat(e.name).map((r) => r.toLowerCase()), e.extensions || [], e.filename, t, i);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */
  static matchFilename(e, t) {
    for (let r of e)
      if (r.filename && r.filename.test(t))
        return r;
    let i = /\.([^.]+)$/.exec(t);
    if (i) {
      for (let r of e)
        if (r.extensions.indexOf(i[1]) > -1)
          return r;
    }
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */
  static matchLanguageName(e, t, i = !0) {
    t = t.toLowerCase();
    for (let r of e)
      if (r.alias.some((s) => s == t))
        return r;
    if (i)
      for (let r of e)
        for (let s of r.alias) {
          let o = t.indexOf(s);
          if (o > -1 && (s.length > 2 || !/\w/.test(t[o - 1]) && !/\w/.test(t[o + s.length])))
            return r;
        }
    return null;
  }
}
const xM = /* @__PURE__ */ K.define(), Ir = /* @__PURE__ */ K.define({
  combine: (n) => {
    if (!n.length)
      return "  ";
    let e = n[0];
    if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
    return e;
  }
});
function La(n) {
  let e = n.facet(Ir);
  return e.charCodeAt(0) == 9 ? n.tabSize * e.length : e.length;
}
function Ds(n, e) {
  let t = "", i = n.tabSize, r = n.facet(Ir)[0];
  if (r == "	") {
    for (; e >= i; )
      t += "	", e -= i;
    r = " ";
  }
  for (let s = 0; s < e; s++)
    t += r;
  return t;
}
function tf(n, e) {
  n instanceof we && (n = new cl(n));
  for (let i of n.state.facet(xM)) {
    let r = i(n, e);
    if (r !== void 0)
      return r;
  }
  let t = Fe(n.state);
  return t.length >= e ? kM(n, t, e) : null;
}
class cl {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    this.state = e, this.options = t, this.unit = La(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let i = this.state.doc.lineAt(e), { simulateBreak: r, simulateDoubleBreak: s } = this.options;
    return r != null && r >= i.from && r <= i.to ? s && r == e ? { text: "", from: e } : (t < 0 ? r < e : r <= e) ? { text: i.text.slice(r - i.from), from: r } : { text: i.text.slice(0, r - i.from), from: i.from } : i;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: i, from: r } = this.lineAt(e, t);
    return i.slice(e - r, Math.min(i.length, e + 100 - r));
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t), s = this.countColumn(i, e - r), o = this.options.overrideIndentation ? this.options.overrideIndentation(r) : -1;
    return o > -1 && (s += o - this.countColumn(i, i.search(/\S|$/))), s;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return gn(e, this.state.tabSize, t);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t), s = this.options.overrideIndentation;
    if (s) {
      let o = s(r);
      if (o > -1)
        return o;
    }
    return this.countColumn(i, i.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const ro = /* @__PURE__ */ new pe();
function kM(n, e, t) {
  let i = e.resolveStack(t), r = e.resolveInner(t, -1).resolve(t, 0).enterUnfinishedNodesBefore(t);
  if (r != i.node) {
    let s = [];
    for (let o = r; o && !(o.from < i.node.from || o.to > i.node.to || o.from == i.node.from && o.type == i.node.type); o = o.parent)
      s.push(o);
    for (let o = s.length - 1; o >= 0; o--)
      i = { node: s[o], next: i };
  }
  return f0(i, n, t);
}
function f0(n, e, t) {
  for (let i = n; i; i = i.next) {
    let r = wM(i.node);
    if (r)
      return r(nf.create(e, t, i));
  }
  return 0;
}
function SM(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function wM(n) {
  let e = n.type.prop(ro);
  if (e)
    return e;
  let t = n.firstChild, i;
  if (t && (i = t.type.prop(pe.closedBy))) {
    let r = n.lastChild, s = r && i.indexOf(r.name) > -1;
    return (o) => d0(o, !0, 1, void 0, s && !SM(o) ? r.from : void 0);
  }
  return n.parent == null ? vM : null;
}
function vM() {
  return 0;
}
class nf extends cl {
  constructor(e, t, i) {
    super(e.state, e.options), this.base = e, this.pos = t, this.context = i;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new nf(e, t, i);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let i = e.resolve(t.from);
      for (; i.parent && i.parent.from == i.from; )
        i = i.parent;
      if (EM(i, e))
        break;
      t = this.state.doc.lineAt(i.from);
    }
    return this.lineIndent(t.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return f0(this.context.next, this.base, this.pos);
  }
}
function EM(n, e) {
  for (let t = e; t; t = t.parent)
    if (n == t)
      return !0;
  return !1;
}
function _M(n) {
  let e = n.node, t = e.childAfter(e.from), i = e.lastChild;
  if (!t)
    return null;
  let r = n.options.simulateBreak, s = n.state.doc.lineAt(t.from), o = r == null || r <= s.from ? s.to : Math.min(s.to, r);
  for (let a = t.to; ; ) {
    let l = e.childAfter(a);
    if (!l || l == i)
      return null;
    if (!l.type.isSkipped) {
      if (l.from >= o)
        return null;
      let c = /^ */.exec(s.text.slice(t.to - s.from))[0].length;
      return { from: t.from, to: t.to + c };
    }
    a = l.to;
  }
}
function QM({ closing: n, align: e = !0, units: t = 1 }) {
  return (i) => d0(i, e, t, n);
}
function d0(n, e, t, i, r) {
  let s = n.textAfter, o = s.match(/^\s*/)[0].length, a = i && s.slice(o, o + i.length) == i || r == n.pos + o, l = e ? _M(n) : null;
  return l ? a ? n.column(l.from) : n.column(l.to) : n.baseIndent + (a ? 0 : n.unit * t);
}
const CM = (n) => n.baseIndent;
function da({ except: n, units: e = 1 } = {}) {
  return (t) => {
    let i = n && n.test(t.textAfter);
    return t.baseIndent + (i ? 0 : e * t.unit);
  };
}
const TM = 200;
function PM() {
  return we.transactionFilter.of((n) => {
    if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete"))
      return n;
    let e = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
    if (!e.length)
      return n;
    let t = n.newDoc, { head: i } = n.newSelection.main, r = t.lineAt(i);
    if (i > r.from + TM)
      return n;
    let s = t.sliceString(r.from, i);
    if (!e.some((c) => c.test(s)))
      return n;
    let { state: o } = n, a = -1, l = [];
    for (let { head: c } of o.selection.ranges) {
      let u = o.doc.lineAt(c);
      if (u.from == a)
        continue;
      a = u.from;
      let h = tf(o, u.from);
      if (h == null)
        continue;
      let f = /^\s*/.exec(u.text)[0], d = Ds(o, h);
      f != d && l.push({ from: u.from, to: u.from + f.length, insert: d });
    }
    return l.length ? [n, { changes: l, sequential: !0 }] : n;
  });
}
const p0 = /* @__PURE__ */ K.define(), Lr = /* @__PURE__ */ new pe();
function m0(n) {
  let e = n.firstChild, t = n.lastChild;
  return e && e.to < t.from ? { from: e.to, to: t.type.isError ? n.to : t.from } : null;
}
function AM(n, e, t) {
  let i = Fe(n);
  if (i.length < t)
    return null;
  let r = i.resolveStack(t, 1), s = null;
  for (let o = r; o; o = o.next) {
    let a = o.node;
    if (a.to <= t || a.from > t)
      continue;
    if (s && a.from < e)
      break;
    let l = a.type.prop(Lr);
    if (l && (a.to < i.length - 50 || i.length == n.doc.length || !$M(a))) {
      let c = l(a, n);
      c && c.from <= t && c.from >= e && c.to > t && (s = c);
    }
  }
  return s;
}
function $M(n) {
  let e = n.lastChild;
  return e && e.to == n.to && e.type.isError;
}
function Da(n, e, t) {
  for (let i of n.facet(p0)) {
    let r = i(n, e, t);
    if (r)
      return r;
  }
  return AM(n, e, t);
}
function g0(n, e) {
  let t = e.mapPos(n.from, 1), i = e.mapPos(n.to, -1);
  return t >= i ? void 0 : { from: t, to: i };
}
const ul = /* @__PURE__ */ me.define({ map: g0 }), so = /* @__PURE__ */ me.define({ map: g0 });
function O0(n) {
  let e = [];
  for (let { head: t } of n.state.selection.ranges)
    e.some((i) => i.from <= t && i.to >= t) || e.push(n.lineBlockAt(t));
  return e;
}
const Xi = /* @__PURE__ */ mt.define({
  create() {
    return ae.none;
  },
  update(n, e) {
    e.isUserEvent("delete") && e.changes.iterChangedRanges((t, i) => n = Om(n, t, i)), n = n.map(e.changes);
    for (let t of e.effects)
      if (t.is(ul) && !RM(n, t.value.from, t.value.to)) {
        let { preparePlaceholder: i } = e.state.facet(x0), r = i ? ae.replace({ widget: new zM(i(e.state, t.value)) }) : bm;
        n = n.update({ add: [r.range(t.value.from, t.value.to)] });
      } else t.is(so) && (n = n.update({
        filter: (i, r) => t.value.from != i || t.value.to != r,
        filterFrom: t.value.from,
        filterTo: t.value.to
      }));
    return e.selection && (n = Om(n, e.selection.main.head)), n;
  },
  provide: (n) => U.decorations.from(n),
  toJSON(n, e) {
    let t = [];
    return n.between(0, e.doc.length, (i, r) => {
      t.push(i, r);
    }), t;
  },
  fromJSON(n) {
    if (!Array.isArray(n) || n.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let e = [];
    for (let t = 0; t < n.length; ) {
      let i = n[t++], r = n[t++];
      if (typeof i != "number" || typeof r != "number")
        throw new RangeError("Invalid JSON for fold state");
      e.push(bm.range(i, r));
    }
    return ae.set(e, !0);
  }
});
function Om(n, e, t = e) {
  let i = !1;
  return n.between(e, t, (r, s) => {
    r < t && s > e && (i = !0);
  }), i ? n.update({
    filterFrom: e,
    filterTo: t,
    filter: (r, s) => r >= t || s <= e
  }) : n;
}
function Ba(n, e, t) {
  var i;
  let r = null;
  return (i = n.field(Xi, !1)) === null || i === void 0 || i.between(e, t, (s, o) => {
    (!r || r.from > s) && (r = { from: s, to: o });
  }), r;
}
function RM(n, e, t) {
  let i = !1;
  return n.between(e, e, (r, s) => {
    r == e && s == t && (i = !0);
  }), i;
}
function b0(n, e) {
  return n.field(Xi, !1) ? e : e.concat(me.appendConfig.of(k0()));
}
const MM = (n) => {
  for (let e of O0(n)) {
    let t = Da(n.state, e.from, e.to);
    if (t)
      return n.dispatch({ effects: b0(n.state, [ul.of(t), y0(n, t)]) }), !0;
  }
  return !1;
}, NM = (n) => {
  if (!n.state.field(Xi, !1))
    return !1;
  let e = [];
  for (let t of O0(n)) {
    let i = Ba(n.state, t.from, t.to);
    i && e.push(so.of(i), y0(n, i, !1));
  }
  return e.length && n.dispatch({ effects: e }), e.length > 0;
};
function y0(n, e, t = !0) {
  let i = n.state.doc.lineAt(e.from).number, r = n.state.doc.lineAt(e.to).number;
  return U.announce.of(`${n.state.phrase(t ? "Folded lines" : "Unfolded lines")} ${i} ${n.state.phrase("to")} ${r}.`);
}
const IM = (n) => {
  let { state: e } = n, t = [];
  for (let i = 0; i < e.doc.length; ) {
    let r = n.lineBlockAt(i), s = Da(e, r.from, r.to);
    s && t.push(ul.of(s)), i = (s ? n.lineBlockAt(s.to) : r).to + 1;
  }
  return t.length && n.dispatch({ effects: b0(n.state, t) }), !!t.length;
}, LM = (n) => {
  let e = n.state.field(Xi, !1);
  if (!e || !e.size)
    return !1;
  let t = [];
  return e.between(0, n.state.doc.length, (i, r) => {
    t.push(so.of({ from: i, to: r }));
  }), n.dispatch({ effects: t }), !0;
}, DM = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: MM },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: NM },
  { key: "Ctrl-Alt-[", run: IM },
  { key: "Ctrl-Alt-]", run: LM }
], BM = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, x0 = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, BM);
  }
});
function k0(n) {
  return [Xi, qM];
}
function S0(n, e) {
  let { state: t } = n, i = t.facet(x0), r = (o) => {
    let a = n.lineBlockAt(n.posAtDOM(o.target)), l = Ba(n.state, a.from, a.to);
    l && n.dispatch({ effects: so.of(l) }), o.preventDefault();
  };
  if (i.placeholderDOM)
    return i.placeholderDOM(n, r, e);
  let s = document.createElement("span");
  return s.textContent = i.placeholderText, s.setAttribute("aria-label", t.phrase("folded code")), s.title = t.phrase("unfold"), s.className = "cm-foldPlaceholder", s.onclick = r, s;
}
const bm = /* @__PURE__ */ ae.replace({ widget: /* @__PURE__ */ new class extends Zn {
  toDOM(n) {
    return S0(n, null);
  }
}() });
class zM extends Zn {
  constructor(e) {
    super(), this.value = e;
  }
  eq(e) {
    return this.value == e.value;
  }
  toDOM(e) {
    return S0(e, this.value);
  }
}
const ZM = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class cc extends ni {
  constructor(e, t) {
    super(), this.config = e, this.open = t;
  }
  eq(e) {
    return this.config == e.config && this.open == e.open;
  }
  toDOM(e) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let t = document.createElement("span");
    return t.textContent = this.open ? this.config.openText : this.config.closedText, t.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"), t;
  }
}
function XM(n = {}) {
  let e = { ...ZM, ...n }, t = new cc(e, !0), i = new cc(e, !1), r = nt.fromClass(class {
    constructor(o) {
      this.from = o.viewport.from, this.markers = this.buildMarkers(o);
    }
    update(o) {
      (o.docChanged || o.viewportChanged || o.startState.facet(Si) != o.state.facet(Si) || o.startState.field(Xi, !1) != o.state.field(Xi, !1) || Fe(o.startState) != Fe(o.state) || e.foldingChanged(o)) && (this.markers = this.buildMarkers(o.view));
    }
    buildMarkers(o) {
      let a = new ei();
      for (let l of o.viewportLineBlocks) {
        let c = Ba(o.state, l.from, l.to) ? i : Da(o.state, l.from, l.to) ? t : null;
        c && a.add(l.from, l.from, c);
      }
      return a.finish();
    }
  }), { domEventHandlers: s } = e;
  return [
    r,
    zR({
      class: "cm-foldGutter",
      markers(o) {
        var a;
        return ((a = o.plugin(r)) === null || a === void 0 ? void 0 : a.markers) || $e.empty;
      },
      initialSpacer() {
        return new cc(e, !1);
      },
      domEventHandlers: {
        ...s,
        click: (o, a, l) => {
          if (s.click && s.click(o, a, l))
            return !0;
          let c = Ba(o.state, a.from, a.to);
          if (c)
            return o.dispatch({ effects: so.of(c) }), !0;
          let u = Da(o.state, a.from, a.to);
          return u ? (o.dispatch({ effects: ul.of(u) }), !0) : !1;
        }
      }
    }),
    k0()
  ];
}
const qM = /* @__PURE__ */ U.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class oo {
  constructor(e, t) {
    this.specs = e;
    let i;
    function r(a) {
      let l = bi.newName();
      return (i || (i = /* @__PURE__ */ Object.create(null)))["." + l] = a, l;
    }
    const s = typeof t.all == "string" ? t.all : t.all ? r(t.all) : void 0, o = t.scope;
    this.scope = o instanceof on ? (a) => a.prop(Mi) == o.data : o ? (a) => a == o : void 0, this.style = u0(e.map((a) => ({
      tag: a.tag,
      class: a.class || r(Object.assign({}, a, { tag: null }))
    })), {
      all: s
    }).style, this.module = i ? new bi(i) : null, this.themeType = t.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new oo(e, t || {});
  }
}
const Xu = /* @__PURE__ */ K.define(), w0 = /* @__PURE__ */ K.define({
  combine(n) {
    return n.length ? [n[0]] : null;
  }
});
function uc(n) {
  let e = n.facet(Xu);
  return e.length ? e : n.facet(w0);
}
function v0(n, e) {
  let t = [YM], i;
  return n instanceof oo && (n.module && t.push(U.styleModule.of(n.module)), i = n.themeType), e?.fallback ? t.push(w0.of(n)) : i ? t.push(Xu.computeN([U.darkTheme], (r) => r.facet(U.darkTheme) == (i == "dark") ? [n] : [])) : t.push(Xu.of(n)), t;
}
class VM {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = Fe(e.state), this.decorations = this.buildDeco(e, uc(e.state)), this.decoratedTo = e.viewport.to;
  }
  update(e) {
    let t = Fe(e.state), i = uc(e.state), r = i != uc(e.startState), { viewport: s } = e.view, o = e.changes.mapPos(this.decoratedTo, 1);
    t.length < s.to && !r && t.type == this.tree.type && o >= s.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = o) : (t != this.tree || e.viewportChanged || r) && (this.tree = t, this.decorations = this.buildDeco(e.view, i), this.decoratedTo = s.to);
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return ae.none;
    let i = new ei();
    for (let { from: r, to: s } of e.visibleRanges)
      mM(this.tree, t, (o, a, l) => {
        i.add(o, a, this.markCache[l] || (this.markCache[l] = ae.mark({ class: l })));
      }, r, s);
    return i.finish();
  }
}
const YM = /* @__PURE__ */ ri.high(/* @__PURE__ */ nt.fromClass(VM, {
  decorations: (n) => n.decorations
})), FM = /* @__PURE__ */ oo.define([
  {
    tag: k.meta,
    color: "#404740"
  },
  {
    tag: k.link,
    textDecoration: "underline"
  },
  {
    tag: k.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: k.emphasis,
    fontStyle: "italic"
  },
  {
    tag: k.strong,
    fontWeight: "bold"
  },
  {
    tag: k.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: k.keyword,
    color: "#708"
  },
  {
    tag: [k.atom, k.bool, k.url, k.contentSeparator, k.labelName],
    color: "#219"
  },
  {
    tag: [k.literal, k.inserted],
    color: "#164"
  },
  {
    tag: [k.string, k.deleted],
    color: "#a11"
  },
  {
    tag: [k.regexp, k.escape, /* @__PURE__ */ k.special(k.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ k.definition(k.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ k.local(k.variableName),
    color: "#30a"
  },
  {
    tag: [k.typeName, k.namespace],
    color: "#085"
  },
  {
    tag: k.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ k.special(k.variableName), k.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ k.definition(k.propertyName),
    color: "#00c"
  },
  {
    tag: k.comment,
    color: "#940"
  },
  {
    tag: k.invalid,
    color: "#f00"
  }
]), UM = /* @__PURE__ */ U.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), E0 = 1e4, _0 = "()[]{}", Q0 = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, {
      afterCursor: !0,
      brackets: _0,
      maxScanDistance: E0,
      renderMatch: jM
    });
  }
}), GM = /* @__PURE__ */ ae.mark({ class: "cm-matchingBracket" }), WM = /* @__PURE__ */ ae.mark({ class: "cm-nonmatchingBracket" });
function jM(n) {
  let e = [], t = n.matched ? GM : WM;
  return e.push(t.range(n.start.from, n.start.to)), n.end && e.push(t.range(n.end.from, n.end.to)), e;
}
const HM = /* @__PURE__ */ mt.define({
  create() {
    return ae.none;
  },
  update(n, e) {
    if (!e.docChanged && !e.selection)
      return n;
    let t = [], i = e.state.facet(Q0);
    for (let r of e.state.selection.ranges) {
      if (!r.empty)
        continue;
      let s = Rn(e.state, r.head, -1, i) || r.head > 0 && Rn(e.state, r.head - 1, 1, i) || i.afterCursor && (Rn(e.state, r.head, 1, i) || r.head < e.state.doc.length && Rn(e.state, r.head + 1, -1, i));
      s && (t = t.concat(i.renderMatch(s, e.state)));
    }
    return ae.set(t, !0);
  },
  provide: (n) => U.decorations.from(n)
}), KM = [
  HM,
  UM
];
function JM(n = {}) {
  return [Q0.of(n), KM];
}
const C0 = /* @__PURE__ */ new pe();
function qu(n, e, t) {
  let i = n.prop(e < 0 ? pe.openedBy : pe.closedBy);
  if (i)
    return i;
  if (n.name.length == 1) {
    let r = t.indexOf(n.name);
    if (r > -1 && r % 2 == (e < 0 ? 1 : 0))
      return [t[r + e]];
  }
  return null;
}
function Vu(n) {
  let e = n.type.prop(C0);
  return e ? e(n.node) : n;
}
function Rn(n, e, t, i = {}) {
  let r = i.maxScanDistance || E0, s = i.brackets || _0, o = Fe(n), a = o.resolveInner(e, t);
  for (let l = a; l; l = l.parent) {
    let c = qu(l.type, t, s);
    if (c && l.from < l.to) {
      let u = Vu(l);
      if (u && (t > 0 ? e >= u.from && e < u.to : e > u.from && e <= u.to))
        return eN(n, e, t, l, u, c, s);
    }
  }
  return tN(n, e, t, o, a.type, r, s);
}
function eN(n, e, t, i, r, s, o) {
  let a = i.parent, l = { from: r.from, to: r.to }, c = 0, u = a?.cursor();
  if (u && (t < 0 ? u.childBefore(i.from) : u.childAfter(i.to)))
    do
      if (t < 0 ? u.to <= i.from : u.from >= i.to) {
        if (c == 0 && s.indexOf(u.type.name) > -1 && u.from < u.to) {
          let h = Vu(u);
          return { start: l, end: h ? { from: h.from, to: h.to } : void 0, matched: !0 };
        } else if (qu(u.type, t, o))
          c++;
        else if (qu(u.type, -t, o)) {
          if (c == 0) {
            let h = Vu(u);
            return {
              start: l,
              end: h && h.from < h.to ? { from: h.from, to: h.to } : void 0,
              matched: !1
            };
          }
          c--;
        }
      }
    while (t < 0 ? u.prevSibling() : u.nextSibling());
  return { start: l, matched: !1 };
}
function tN(n, e, t, i, r, s, o) {
  let a = t < 0 ? n.sliceDoc(e - 1, e) : n.sliceDoc(e, e + 1), l = o.indexOf(a);
  if (l < 0 || l % 2 == 0 != t > 0)
    return null;
  let c = { from: t < 0 ? e - 1 : e, to: t > 0 ? e + 1 : e }, u = n.doc.iterRange(e, t > 0 ? n.doc.length : 0), h = 0;
  for (let f = 0; !u.next().done && f <= s; ) {
    let d = u.value;
    t < 0 && (f += d.length);
    let p = e + f * t;
    for (let m = t > 0 ? 0 : d.length - 1, O = t > 0 ? d.length : -1; m != O; m += t) {
      let g = o.indexOf(d[m]);
      if (!(g < 0 || i.resolveInner(p + m, 1).type != r))
        if (g % 2 == 0 == t > 0)
          h++;
        else {
          if (h == 1)
            return { start: c, end: { from: p + m, to: p + m + 1 }, matched: g >> 1 == l >> 1 };
          h--;
        }
    }
    t > 0 && (f += d.length);
  }
  return u.done ? { start: c, matched: !1 } : null;
}
const nN = /* @__PURE__ */ Object.create(null), ym = [ut.none], xm = [], km = /* @__PURE__ */ Object.create(null), iN = /* @__PURE__ */ Object.create(null);
for (let [n, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  iN[n] = /* @__PURE__ */ rN(nN, e);
function hc(n, e) {
  xm.indexOf(n) > -1 || (xm.push(n), console.warn(e));
}
function rN(n, e) {
  let t = [];
  for (let a of e.split(" ")) {
    let l = [];
    for (let c of a.split(".")) {
      let u = n[c] || k[c];
      u ? typeof u == "function" ? l.length ? l = l.map(u) : hc(c, `Modifier ${c} used at start of tag`) : l.length ? hc(c, `Tag ${c} used as modifier`) : l = Array.isArray(u) ? u : [u] : hc(c, `Unknown highlighting tag ${c}`);
    }
    for (let c of l)
      t.push(c);
  }
  if (!t.length)
    return 0;
  let i = e.replace(/ /g, "_"), r = i + " " + t.map((a) => a.id), s = km[r];
  if (s)
    return s.id;
  let o = km[r] = ut.define({
    id: ym.length,
    name: i,
    props: [Nr({ [i]: t })]
  });
  return ym.push(o), o.id;
}
Ge.RTL, Ge.LTR;
const sN = (n) => {
  let { state: e } = n, t = e.doc.lineAt(e.selection.main.from), i = sf(n.state, t.from);
  return i.line ? oN(n) : i.block ? lN(n) : !1;
};
function rf(n, e) {
  return ({ state: t, dispatch: i }) => {
    if (t.readOnly)
      return !1;
    let r = n(e, t);
    return r ? (i(t.update(r)), !0) : !1;
  };
}
const oN = /* @__PURE__ */ rf(
  hN,
  0
  /* CommentOption.Toggle */
), aN = /* @__PURE__ */ rf(
  T0,
  0
  /* CommentOption.Toggle */
), lN = /* @__PURE__ */ rf(
  (n, e) => T0(n, e, uN(e)),
  0
  /* CommentOption.Toggle */
);
function sf(n, e) {
  let t = n.languageDataAt("commentTokens", e, 1);
  return t.length ? t[0] : {};
}
const rs = 50;
function cN(n, { open: e, close: t }, i, r) {
  let s = n.sliceDoc(i - rs, i), o = n.sliceDoc(r, r + rs), a = /\s*$/.exec(s)[0].length, l = /^\s*/.exec(o)[0].length, c = s.length - a;
  if (s.slice(c - e.length, c) == e && o.slice(l, l + t.length) == t)
    return {
      open: { pos: i - a, margin: a && 1 },
      close: { pos: r + l, margin: l && 1 }
    };
  let u, h;
  r - i <= 2 * rs ? u = h = n.sliceDoc(i, r) : (u = n.sliceDoc(i, i + rs), h = n.sliceDoc(r - rs, r));
  let f = /^\s*/.exec(u)[0].length, d = /\s*$/.exec(h)[0].length, p = h.length - d - t.length;
  return u.slice(f, f + e.length) == e && h.slice(p, p + t.length) == t ? {
    open: {
      pos: i + f + e.length,
      margin: /\s/.test(u.charAt(f + e.length)) ? 1 : 0
    },
    close: {
      pos: r - d - t.length,
      margin: /\s/.test(h.charAt(p - 1)) ? 1 : 0
    }
  } : null;
}
function uN(n) {
  let e = [];
  for (let t of n.selection.ranges) {
    let i = n.doc.lineAt(t.from), r = t.to <= i.to ? i : n.doc.lineAt(t.to);
    r.from > i.from && r.from == t.to && (r = t.to == i.to + 1 ? i : n.doc.lineAt(t.to - 1));
    let s = e.length - 1;
    s >= 0 && e[s].to > i.from ? e[s].to = r.to : e.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: r.to });
  }
  return e;
}
function T0(n, e, t = e.selection.ranges) {
  let i = t.map((s) => sf(e, s.from).block);
  if (!i.every((s) => s))
    return null;
  let r = t.map((s, o) => cN(e, i[o], s.from, s.to));
  if (n != 2 && !r.every((s) => s))
    return { changes: e.changes(t.map((s, o) => r[o] ? [] : [{ from: s.from, insert: i[o].open + " " }, { from: s.to, insert: " " + i[o].close }])) };
  if (n != 1 && r.some((s) => s)) {
    let s = [];
    for (let o = 0, a; o < r.length; o++)
      if (a = r[o]) {
        let l = i[o], { open: c, close: u } = a;
        s.push({ from: c.pos - l.open.length, to: c.pos + c.margin }, { from: u.pos - u.margin, to: u.pos + l.close.length });
      }
    return { changes: s };
  }
  return null;
}
function hN(n, e, t = e.selection.ranges) {
  let i = [], r = -1;
  for (let { from: s, to: o } of t) {
    let a = i.length, l = 1e9, c = sf(e, s).line;
    if (c) {
      for (let u = s; u <= o; ) {
        let h = e.doc.lineAt(u);
        if (h.from > r && (s == o || o > h.from)) {
          r = h.from;
          let f = /^\s*/.exec(h.text)[0].length, d = f == h.length, p = h.text.slice(f, f + c.length) == c ? f : -1;
          f < h.text.length && f < l && (l = f), i.push({ line: h, comment: p, token: c, indent: f, empty: d, single: !1 });
        }
        u = h.to + 1;
      }
      if (l < 1e9)
        for (let u = a; u < i.length; u++)
          i[u].indent < i[u].line.text.length && (i[u].indent = l);
      i.length == a + 1 && (i[a].single = !0);
    }
  }
  if (n != 2 && i.some((s) => s.comment < 0 && (!s.empty || s.single))) {
    let s = [];
    for (let { line: a, token: l, indent: c, empty: u, single: h } of i)
      (h || !u) && s.push({ from: a.from + c, insert: l + " " });
    let o = e.changes(s);
    return { changes: o, selection: e.selection.map(o, 1) };
  } else if (n != 1 && i.some((s) => s.comment >= 0)) {
    let s = [];
    for (let { line: o, comment: a, token: l } of i)
      if (a >= 0) {
        let c = o.from + a, u = c + l.length;
        o.text[u - o.from] == " " && u++, s.push({ from: c, to: u });
      }
    return { changes: s };
  }
  return null;
}
const Yu = /* @__PURE__ */ Bn.define(), fN = /* @__PURE__ */ Bn.define(), dN = /* @__PURE__ */ K.define(), P0 = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, t) => t
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, t) => (i, r) => e(i, r) || t(i, r)
    });
  }
}), A0 = /* @__PURE__ */ mt.define({
  create() {
    return Mn.empty;
  },
  update(n, e) {
    let t = e.state.facet(P0), i = e.annotation(Yu);
    if (i) {
      let l = Zt.fromTransaction(e, i.selection), c = i.side, u = c == 0 ? n.undone : n.done;
      return l ? u = za(u, u.length, t.minDepth, l) : u = M0(u, e.startState.selection), new Mn(c == 0 ? i.rest : u, c == 0 ? u : i.rest);
    }
    let r = e.annotation(fN);
    if ((r == "full" || r == "before") && (n = n.isolate()), e.annotation(ot.addToHistory) === !1)
      return e.changes.empty ? n : n.addMapping(e.changes.desc);
    let s = Zt.fromTransaction(e), o = e.annotation(ot.time), a = e.annotation(ot.userEvent);
    return s ? n = n.addChanges(s, o, a, t, e) : e.selection && (n = n.addSelection(e.startState.selection, o, a, t.newGroupDelay)), (r == "full" || r == "after") && (n = n.isolate()), n;
  },
  toJSON(n) {
    return { done: n.done.map((e) => e.toJSON()), undone: n.undone.map((e) => e.toJSON()) };
  },
  fromJSON(n) {
    return new Mn(n.done.map(Zt.fromJSON), n.undone.map(Zt.fromJSON));
  }
});
function pN(n = {}) {
  return [
    A0,
    P0.of(n),
    U.domEventHandlers({
      beforeinput(e, t) {
        let i = e.inputType == "historyUndo" ? $0 : e.inputType == "historyRedo" ? Fu : null;
        return i ? (e.preventDefault(), i(t)) : !1;
      }
    })
  ];
}
function hl(n, e) {
  return function({ state: t, dispatch: i }) {
    if (!e && t.readOnly)
      return !1;
    let r = t.field(A0, !1);
    if (!r)
      return !1;
    let s = r.pop(n, t, e);
    return s ? (i(s), !0) : !1;
  };
}
const $0 = /* @__PURE__ */ hl(0, !1), Fu = /* @__PURE__ */ hl(1, !1), mN = /* @__PURE__ */ hl(0, !0), gN = /* @__PURE__ */ hl(1, !0);
class Zt {
  constructor(e, t, i, r, s) {
    this.changes = e, this.effects = t, this.mapped = i, this.startSelection = r, this.selectionsAfter = s;
  }
  setSelAfter(e) {
    return new Zt(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, t, i;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection: (i = this.startSelection) === null || i === void 0 ? void 0 : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((r) => r.toJSON())
    };
  }
  static fromJSON(e) {
    return new Zt(e.changes && ct.fromJSON(e.changes), [], e.mapped && Nn.fromJSON(e.mapped), e.startSelection && I.fromJSON(e.startSelection), e.selectionsAfter.map(I.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let i = an;
    for (let r of e.startState.facet(dN)) {
      let s = r(e);
      s.length && (i = i.concat(s));
    }
    return !i.length && e.changes.empty ? null : new Zt(e.changes.invert(e.startState.doc), i, void 0, t || e.startState.selection, an);
  }
  static selection(e) {
    return new Zt(void 0, an, void 0, void 0, e);
  }
}
function za(n, e, t, i) {
  let r = e + 1 > t + 20 ? e - t - 1 : 0, s = n.slice(r, e);
  return s.push(i), s;
}
function ON(n, e) {
  let t = [], i = !1;
  return n.iterChangedRanges((r, s) => t.push(r, s)), e.iterChangedRanges((r, s, o, a) => {
    for (let l = 0; l < t.length; ) {
      let c = t[l++], u = t[l++];
      a >= c && o <= u && (i = !0);
    }
  }), i;
}
function bN(n, e) {
  return n.ranges.length == e.ranges.length && n.ranges.filter((t, i) => t.empty != e.ranges[i].empty).length === 0;
}
function R0(n, e) {
  return n.length ? e.length ? n.concat(e) : n : e;
}
const an = [], yN = 200;
function M0(n, e) {
  if (n.length) {
    let t = n[n.length - 1], i = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - yN));
    return i.length && i[i.length - 1].eq(e) ? n : (i.push(e), za(n, n.length - 1, 1e9, t.setSelAfter(i)));
  } else
    return [Zt.selection([e])];
}
function xN(n) {
  let e = n[n.length - 1], t = n.slice();
  return t[n.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), t;
}
function fc(n, e) {
  if (!n.length)
    return n;
  let t = n.length, i = an;
  for (; t; ) {
    let r = kN(n[t - 1], e, i);
    if (r.changes && !r.changes.empty || r.effects.length) {
      let s = n.slice(0, t);
      return s[t - 1] = r, s;
    } else
      e = r.mapped, t--, i = r.selectionsAfter;
  }
  return i.length ? [Zt.selection(i)] : an;
}
function kN(n, e, t) {
  let i = R0(n.selectionsAfter.length ? n.selectionsAfter.map((a) => a.map(e)) : an, t);
  if (!n.changes)
    return Zt.selection(i);
  let r = n.changes.map(e), s = e.mapDesc(n.changes, !0), o = n.mapped ? n.mapped.composeDesc(s) : s;
  return new Zt(r, me.mapEffects(n.effects, e), o, n.startSelection.map(s), i);
}
const SN = /^(input\.type|delete)($|\.)/;
class Mn {
  constructor(e, t, i = 0, r = void 0) {
    this.done = e, this.undone = t, this.prevTime = i, this.prevUserEvent = r;
  }
  isolate() {
    return this.prevTime ? new Mn(this.done, this.undone) : this;
  }
  addChanges(e, t, i, r, s) {
    let o = this.done, a = o[o.length - 1];
    return a && a.changes && !a.changes.empty && e.changes && (!i || SN.test(i)) && (!a.selectionsAfter.length && t - this.prevTime < r.newGroupDelay && r.joinToEvent(s, ON(a.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    i == "input.type.compose") ? o = za(o, o.length - 1, r.minDepth, new Zt(e.changes.compose(a.changes), R0(me.mapEffects(e.effects, a.changes), a.effects), a.mapped, a.startSelection, an)) : o = za(o, o.length, r.minDepth, e), new Mn(o, an, t, i);
  }
  addSelection(e, t, i, r) {
    let s = this.done.length ? this.done[this.done.length - 1].selectionsAfter : an;
    return s.length > 0 && t - this.prevTime < r && i == this.prevUserEvent && i && /^select($|\.)/.test(i) && bN(s[s.length - 1], e) ? this : new Mn(M0(this.done, e), this.undone, t, i);
  }
  addMapping(e) {
    return new Mn(fc(this.done, e), fc(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, t, i) {
    let r = e == 0 ? this.done : this.undone;
    if (r.length == 0)
      return null;
    let s = r[r.length - 1], o = s.selectionsAfter[0] || t.selection;
    if (i && s.selectionsAfter.length)
      return t.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: Yu.of({ side: e, rest: xN(r), selection: o }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (s.changes) {
      let a = r.length == 1 ? an : r.slice(0, r.length - 1);
      return s.mapped && (a = fc(a, s.mapped)), t.update({
        changes: s.changes,
        selection: s.startSelection,
        effects: s.effects,
        annotations: Yu.of({ side: e, rest: a, selection: o }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
Mn.empty = /* @__PURE__ */ new Mn(an, an);
const wN = [
  { key: "Mod-z", run: $0, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Fu, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Fu, preventDefault: !0 },
  { key: "Mod-u", run: mN, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: gN, preventDefault: !0 }
];
function Dr(n, e) {
  return I.create(n.ranges.map(e), n.mainIndex);
}
function Xn(n, e) {
  return n.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function yn({ state: n, dispatch: e }, t) {
  let i = Dr(n.selection, t);
  return i.eq(n.selection, !0) ? !1 : (e(Xn(n, i)), !0);
}
function fl(n, e) {
  return I.cursor(e ? n.to : n.from);
}
function N0(n, e) {
  return yn(n, (t) => t.empty ? n.moveByChar(t, e) : fl(t, e));
}
function Qt(n) {
  return n.textDirectionAt(n.state.selection.main.head) == Ge.LTR;
}
const I0 = (n) => N0(n, !Qt(n)), L0 = (n) => N0(n, Qt(n));
function D0(n, e) {
  return yn(n, (t) => t.empty ? n.moveByGroup(t, e) : fl(t, e));
}
const vN = (n) => D0(n, !Qt(n)), EN = (n) => D0(n, Qt(n));
function _N(n, e, t) {
  if (e.type.prop(t))
    return !0;
  let i = e.to - e.from;
  return i && (i > 2 || /[^\s,.;:]/.test(n.sliceDoc(e.from, e.to))) || e.firstChild;
}
function dl(n, e, t) {
  let i = Fe(n).resolveInner(e.head), r = t ? pe.closedBy : pe.openedBy;
  for (let l = e.head; ; ) {
    let c = t ? i.childAfter(l) : i.childBefore(l);
    if (!c)
      break;
    _N(n, c, r) ? i = c : l = t ? c.to : c.from;
  }
  let s = i.type.prop(r), o, a;
  return s && (o = t ? Rn(n, i.from, 1) : Rn(n, i.to, -1)) && o.matched ? a = t ? o.end.to : o.end.from : a = t ? i.to : i.from, I.cursor(a, t ? -1 : 1);
}
const QN = (n) => yn(n, (e) => dl(n.state, e, !Qt(n))), CN = (n) => yn(n, (e) => dl(n.state, e, Qt(n)));
function B0(n, e) {
  return yn(n, (t) => {
    if (!t.empty)
      return fl(t, e);
    let i = n.moveVertically(t, e);
    return i.head != t.head ? i : n.moveToLineBoundary(t, e);
  });
}
const z0 = (n) => B0(n, !1), Z0 = (n) => B0(n, !0);
function X0(n) {
  let e = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2, t = 0, i = 0, r;
  if (e) {
    for (let s of n.state.facet(U.scrollMargins)) {
      let o = s(n);
      o?.top && (t = Math.max(o?.top, t)), o?.bottom && (i = Math.max(o?.bottom, i));
    }
    r = n.scrollDOM.clientHeight - t - i;
  } else
    r = (n.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: t,
    marginBottom: i,
    selfScroll: e,
    height: Math.max(n.defaultLineHeight, r - 5)
  };
}
function q0(n, e) {
  let t = X0(n), { state: i } = n, r = Dr(i.selection, (o) => o.empty ? n.moveVertically(o, e, t.height) : fl(o, e));
  if (r.eq(i.selection))
    return !1;
  let s;
  if (t.selfScroll) {
    let o = n.coordsAtPos(i.selection.main.head), a = n.scrollDOM.getBoundingClientRect(), l = a.top + t.marginTop, c = a.bottom - t.marginBottom;
    o && o.top > l && o.bottom < c && (s = U.scrollIntoView(r.main.head, { y: "start", yMargin: o.top - l }));
  }
  return n.dispatch(Xn(i, r), { effects: s }), !0;
}
const Sm = (n) => q0(n, !1), Uu = (n) => q0(n, !0);
function vi(n, e, t) {
  let i = n.lineBlockAt(e.head), r = n.moveToLineBoundary(e, t);
  if (r.head == e.head && r.head != (t ? i.to : i.from) && (r = n.moveToLineBoundary(e, t, !1)), !t && r.head == i.from && i.length) {
    let s = /^\s*/.exec(n.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
    s && e.head != i.from + s && (r = I.cursor(i.from + s));
  }
  return r;
}
const TN = (n) => yn(n, (e) => vi(n, e, !0)), PN = (n) => yn(n, (e) => vi(n, e, !1)), AN = (n) => yn(n, (e) => vi(n, e, !Qt(n))), $N = (n) => yn(n, (e) => vi(n, e, Qt(n))), RN = (n) => yn(n, (e) => I.cursor(n.lineBlockAt(e.head).from, 1)), MN = (n) => yn(n, (e) => I.cursor(n.lineBlockAt(e.head).to, -1));
function NN(n, e, t) {
  let i = !1, r = Dr(n.selection, (s) => {
    let o = Rn(n, s.head, -1) || Rn(n, s.head, 1) || s.head > 0 && Rn(n, s.head - 1, 1) || s.head < n.doc.length && Rn(n, s.head + 1, -1);
    if (!o || !o.end)
      return s;
    i = !0;
    let a = o.start.from == s.head ? o.end.to : o.end.from;
    return I.cursor(a);
  });
  return i ? (e(Xn(n, r)), !0) : !1;
}
const IN = ({ state: n, dispatch: e }) => NN(n, e);
function hn(n, e) {
  let t = Dr(n.state.selection, (i) => {
    let r = e(i);
    return I.range(i.anchor, r.head, r.goalColumn, r.bidiLevel || void 0);
  });
  return t.eq(n.state.selection) ? !1 : (n.dispatch(Xn(n.state, t)), !0);
}
function V0(n, e) {
  return hn(n, (t) => n.moveByChar(t, e));
}
const Y0 = (n) => V0(n, !Qt(n)), F0 = (n) => V0(n, Qt(n));
function U0(n, e) {
  return hn(n, (t) => n.moveByGroup(t, e));
}
const LN = (n) => U0(n, !Qt(n)), DN = (n) => U0(n, Qt(n)), BN = (n) => hn(n, (e) => dl(n.state, e, !Qt(n))), zN = (n) => hn(n, (e) => dl(n.state, e, Qt(n)));
function G0(n, e) {
  return hn(n, (t) => n.moveVertically(t, e));
}
const W0 = (n) => G0(n, !1), j0 = (n) => G0(n, !0);
function H0(n, e) {
  return hn(n, (t) => n.moveVertically(t, e, X0(n).height));
}
const wm = (n) => H0(n, !1), vm = (n) => H0(n, !0), ZN = (n) => hn(n, (e) => vi(n, e, !0)), XN = (n) => hn(n, (e) => vi(n, e, !1)), qN = (n) => hn(n, (e) => vi(n, e, !Qt(n))), VN = (n) => hn(n, (e) => vi(n, e, Qt(n))), YN = (n) => hn(n, (e) => I.cursor(n.lineBlockAt(e.head).from)), FN = (n) => hn(n, (e) => I.cursor(n.lineBlockAt(e.head).to)), Em = ({ state: n, dispatch: e }) => (e(Xn(n, { anchor: 0 })), !0), _m = ({ state: n, dispatch: e }) => (e(Xn(n, { anchor: n.doc.length })), !0), Qm = ({ state: n, dispatch: e }) => (e(Xn(n, { anchor: n.selection.main.anchor, head: 0 })), !0), Cm = ({ state: n, dispatch: e }) => (e(Xn(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0), UN = ({ state: n, dispatch: e }) => (e(n.update({ selection: { anchor: 0, head: n.doc.length }, userEvent: "select" })), !0), GN = ({ state: n, dispatch: e }) => {
  let t = pl(n).map(({ from: i, to: r }) => I.range(i, Math.min(r + 1, n.doc.length)));
  return e(n.update({ selection: I.create(t), userEvent: "select" })), !0;
}, WN = ({ state: n, dispatch: e }) => {
  let t = Dr(n.selection, (i) => {
    let r = Fe(n), s = r.resolveStack(i.from, 1);
    if (i.empty) {
      let o = r.resolveStack(i.from, -1);
      o.node.from >= s.node.from && o.node.to <= s.node.to && (s = o);
    }
    for (let o = s; o; o = o.next) {
      let { node: a } = o;
      if ((a.from < i.from && a.to >= i.to || a.to > i.to && a.from <= i.from) && o.next)
        return I.range(a.to, a.from);
    }
    return i;
  });
  return t.eq(n.selection) ? !1 : (e(Xn(n, t)), !0);
}, jN = ({ state: n, dispatch: e }) => {
  let t = n.selection, i = null;
  return t.ranges.length > 1 ? i = I.create([t.main]) : t.main.empty || (i = I.create([I.cursor(t.main.head)])), i ? (e(Xn(n, i)), !0) : !1;
};
function ao(n, e) {
  if (n.state.readOnly)
    return !1;
  let t = "delete.selection", { state: i } = n, r = i.changeByRange((s) => {
    let { from: o, to: a } = s;
    if (o == a) {
      let l = e(s);
      l < o ? (t = "delete.backward", l = Go(n, l, !1)) : l > o && (t = "delete.forward", l = Go(n, l, !0)), o = Math.min(o, l), a = Math.max(a, l);
    } else
      o = Go(n, o, !1), a = Go(n, a, !0);
    return o == a ? { range: s } : { changes: { from: o, to: a }, range: I.cursor(o, o < s.head ? -1 : 1) };
  });
  return r.changes.empty ? !1 : (n.dispatch(i.update(r, {
    scrollIntoView: !0,
    userEvent: t,
    effects: t == "delete.selection" ? U.announce.of(i.phrase("Selection deleted")) : void 0
  })), !0);
}
function Go(n, e, t) {
  if (n instanceof U)
    for (let i of n.state.facet(U.atomicRanges).map((r) => r(n)))
      i.between(e, e, (r, s) => {
        r < e && s > e && (e = t ? s : r);
      });
  return e;
}
const K0 = (n, e, t) => ao(n, (i) => {
  let r = i.from, { state: s } = n, o = s.doc.lineAt(r), a, l;
  if (t && !e && r > o.from && r < o.from + 200 && !/[^ \t]/.test(a = o.text.slice(0, r - o.from))) {
    if (a[a.length - 1] == "	")
      return r - 1;
    let c = gn(a, s.tabSize), u = c % La(s) || La(s);
    for (let h = 0; h < u && a[a.length - 1 - h] == " "; h++)
      r--;
    l = r;
  } else
    l = xt(o.text, r - o.from, e, e) + o.from, l == r && o.number != (e ? s.doc.lines : 1) ? l += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(o.text.slice(l - o.from, r - o.from)) && (l = xt(o.text, l - o.from, !1, !1) + o.from);
  return l;
}), Gu = (n) => K0(n, !1, !0), J0 = (n) => K0(n, !0, !1), ex = (n, e) => ao(n, (t) => {
  let i = t.head, { state: r } = n, s = r.doc.lineAt(i), o = r.charCategorizer(i);
  for (let a = null; ; ) {
    if (i == (e ? s.to : s.from)) {
      i == t.head && s.number != (e ? r.doc.lines : 1) && (i += e ? 1 : -1);
      break;
    }
    let l = xt(s.text, i - s.from, e) + s.from, c = s.text.slice(Math.min(i, l) - s.from, Math.max(i, l) - s.from), u = o(c);
    if (a != null && u != a)
      break;
    (c != " " || i != t.head) && (a = u), i = l;
  }
  return i;
}), tx = (n) => ex(n, !1), HN = (n) => ex(n, !0), KN = (n) => ao(n, (e) => {
  let t = n.lineBlockAt(e.head).to;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), JN = (n) => ao(n, (e) => {
  let t = n.moveToLineBoundary(e, !1).head;
  return e.head > t ? t : Math.max(0, e.head - 1);
}), eI = (n) => ao(n, (e) => {
  let t = n.moveToLineBoundary(e, !0).head;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), tI = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => ({
    changes: { from: i.from, to: i.to, insert: Te.of(["", ""]) },
    range: I.cursor(i.from)
  }));
  return e(n.update(t, { scrollIntoView: !0, userEvent: "input" })), !0;
}, nI = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => {
    if (!i.empty || i.from == 0 || i.from == n.doc.length)
      return { range: i };
    let r = i.from, s = n.doc.lineAt(r), o = r == s.from ? r - 1 : xt(s.text, r - s.from, !1) + s.from, a = r == s.to ? r + 1 : xt(s.text, r - s.from, !0) + s.from;
    return {
      changes: { from: o, to: a, insert: n.doc.slice(r, a).append(n.doc.slice(o, r)) },
      range: I.cursor(a)
    };
  });
  return t.changes.empty ? !1 : (e(n.update(t, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function pl(n) {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let r = n.doc.lineAt(i.from), s = n.doc.lineAt(i.to);
    if (!i.empty && i.to == s.from && (s = n.doc.lineAt(i.to - 1)), t >= r.number) {
      let o = e[e.length - 1];
      o.to = s.to, o.ranges.push(i);
    } else
      e.push({ from: r.from, to: s.to, ranges: [i] });
    t = s.number + 1;
  }
  return e;
}
function nx(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [], r = [];
  for (let s of pl(n)) {
    if (t ? s.to == n.doc.length : s.from == 0)
      continue;
    let o = n.doc.lineAt(t ? s.to + 1 : s.from - 1), a = o.length + 1;
    if (t) {
      i.push({ from: s.to, to: o.to }, { from: s.from, insert: o.text + n.lineBreak });
      for (let l of s.ranges)
        r.push(I.range(Math.min(n.doc.length, l.anchor + a), Math.min(n.doc.length, l.head + a)));
    } else {
      i.push({ from: o.from, to: s.from }, { from: s.to, insert: n.lineBreak + o.text });
      for (let l of s.ranges)
        r.push(I.range(l.anchor - a, l.head - a));
    }
  }
  return i.length ? (e(n.update({
    changes: i,
    scrollIntoView: !0,
    selection: I.create(r, n.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const iI = ({ state: n, dispatch: e }) => nx(n, e, !1), rI = ({ state: n, dispatch: e }) => nx(n, e, !0);
function ix(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [];
  for (let r of pl(n))
    t ? i.push({ from: r.from, insert: n.doc.slice(r.from, r.to) + n.lineBreak }) : i.push({ from: r.to, insert: n.lineBreak + n.doc.slice(r.from, r.to) });
  return e(n.update({ changes: i, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const sI = ({ state: n, dispatch: e }) => ix(n, e, !1), oI = ({ state: n, dispatch: e }) => ix(n, e, !0), aI = (n) => {
  if (n.state.readOnly)
    return !1;
  let { state: e } = n, t = e.changes(pl(e).map(({ from: r, to: s }) => (r > 0 ? r-- : s < e.doc.length && s++, { from: r, to: s }))), i = Dr(e.selection, (r) => {
    let s;
    if (n.lineWrapping) {
      let o = n.lineBlockAt(r.head), a = n.coordsAtPos(r.head, r.assoc || 1);
      a && (s = o.bottom + n.documentTop - a.bottom + n.defaultLineHeight / 2);
    }
    return n.moveVertically(r, !0, s);
  }).map(t);
  return n.dispatch({ changes: t, selection: i, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function lI(n, e) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let t = Fe(n).resolveInner(e), i = t.childBefore(e), r = t.childAfter(e), s;
  return i && r && i.to <= e && r.from >= e && (s = i.type.prop(pe.closedBy)) && s.indexOf(r.name) > -1 && n.doc.lineAt(i.to).from == n.doc.lineAt(r.from).from && !/\S/.test(n.sliceDoc(i.to, r.from)) ? { from: i.to, to: r.from } : null;
}
const Tm = /* @__PURE__ */ rx(!1), cI = /* @__PURE__ */ rx(!0);
function rx(n) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly)
      return !1;
    let i = e.changeByRange((r) => {
      let { from: s, to: o } = r, a = e.doc.lineAt(s), l = !n && s == o && lI(e, s);
      n && (s = o = (o <= a.to ? a : e.doc.lineAt(o)).to);
      let c = new cl(e, { simulateBreak: s, simulateDoubleBreak: !!l }), u = tf(c, s);
      for (u == null && (u = gn(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize)); o < a.to && /\s/.test(a.text[o - a.from]); )
        o++;
      l ? { from: s, to: o } = l : s > a.from && s < a.from + 100 && !/\S/.test(a.text.slice(0, s)) && (s = a.from);
      let h = ["", Ds(e, u)];
      return l && h.push(Ds(e, c.lineIndent(a.from, -1))), {
        changes: { from: s, to: o, insert: Te.of(h) },
        range: I.cursor(s + 1 + h[1].length)
      };
    });
    return t(e.update(i, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function of(n, e) {
  let t = -1;
  return n.changeByRange((i) => {
    let r = [];
    for (let o = i.from; o <= i.to; ) {
      let a = n.doc.lineAt(o);
      a.number > t && (i.empty || i.to > a.from) && (e(a, r, i), t = a.number), o = a.to + 1;
    }
    let s = n.changes(r);
    return {
      changes: r,
      range: I.range(s.mapPos(i.anchor, 1), s.mapPos(i.head, 1))
    };
  });
}
const uI = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = /* @__PURE__ */ Object.create(null), i = new cl(n, { overrideIndentation: (s) => {
    let o = t[s];
    return o ?? -1;
  } }), r = of(n, (s, o, a) => {
    let l = tf(i, s.from);
    if (l == null)
      return;
    /\S/.test(s.text) || (l = 0);
    let c = /^\s*/.exec(s.text)[0], u = Ds(n, l);
    (c != u || a.from < s.from + c.length) && (t[s.from] = l, o.push({ from: s.from, to: s.from + c.length, insert: u }));
  });
  return r.changes.empty || e(n.update(r, { userEvent: "indent" })), !0;
}, sx = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(of(n, (t, i) => {
  i.push({ from: t.from, insert: n.facet(Ir) });
}), { userEvent: "input.indent" })), !0), ox = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(of(n, (t, i) => {
  let r = /^\s*/.exec(t.text)[0];
  if (!r)
    return;
  let s = gn(r, n.tabSize), o = 0, a = Ds(n, Math.max(0, s - La(n)));
  for (; o < r.length && o < a.length && r.charCodeAt(o) == a.charCodeAt(o); )
    o++;
  i.push({ from: t.from + o, to: t.from + r.length, insert: a.slice(o) });
}), { userEvent: "delete.dedent" })), !0), hI = (n) => (n.setTabFocusMode(), !0), fI = [
  { key: "Ctrl-b", run: I0, shift: Y0, preventDefault: !0 },
  { key: "Ctrl-f", run: L0, shift: F0 },
  { key: "Ctrl-p", run: z0, shift: W0 },
  { key: "Ctrl-n", run: Z0, shift: j0 },
  { key: "Ctrl-a", run: RN, shift: YN },
  { key: "Ctrl-e", run: MN, shift: FN },
  { key: "Ctrl-d", run: J0 },
  { key: "Ctrl-h", run: Gu },
  { key: "Ctrl-k", run: KN },
  { key: "Ctrl-Alt-h", run: tx },
  { key: "Ctrl-o", run: tI },
  { key: "Ctrl-t", run: nI },
  { key: "Ctrl-v", run: Uu }
], dI = /* @__PURE__ */ [
  { key: "ArrowLeft", run: I0, shift: Y0, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: vN, shift: LN, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: AN, shift: qN, preventDefault: !0 },
  { key: "ArrowRight", run: L0, shift: F0, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: EN, shift: DN, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: $N, shift: VN, preventDefault: !0 },
  { key: "ArrowUp", run: z0, shift: W0, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: Em, shift: Qm },
  { mac: "Ctrl-ArrowUp", run: Sm, shift: wm },
  { key: "ArrowDown", run: Z0, shift: j0, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: _m, shift: Cm },
  { mac: "Ctrl-ArrowDown", run: Uu, shift: vm },
  { key: "PageUp", run: Sm, shift: wm },
  { key: "PageDown", run: Uu, shift: vm },
  { key: "Home", run: PN, shift: XN, preventDefault: !0 },
  { key: "Mod-Home", run: Em, shift: Qm },
  { key: "End", run: TN, shift: ZN, preventDefault: !0 },
  { key: "Mod-End", run: _m, shift: Cm },
  { key: "Enter", run: Tm, shift: Tm },
  { key: "Mod-a", run: UN },
  { key: "Backspace", run: Gu, shift: Gu },
  { key: "Delete", run: J0 },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: tx },
  { key: "Mod-Delete", mac: "Alt-Delete", run: HN },
  { mac: "Mod-Backspace", run: JN },
  { mac: "Mod-Delete", run: eI }
].concat(/* @__PURE__ */ fI.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))), pI = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: QN, shift: BN },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: CN, shift: zN },
  { key: "Alt-ArrowUp", run: iI },
  { key: "Shift-Alt-ArrowUp", run: sI },
  { key: "Alt-ArrowDown", run: rI },
  { key: "Shift-Alt-ArrowDown", run: oI },
  { key: "Escape", run: jN },
  { key: "Mod-Enter", run: cI },
  { key: "Alt-l", mac: "Ctrl-l", run: GN },
  { key: "Mod-i", run: WN, preventDefault: !0 },
  { key: "Mod-[", run: ox },
  { key: "Mod-]", run: sx },
  { key: "Mod-Alt-\\", run: uI },
  { key: "Shift-Mod-k", run: aI },
  { key: "Shift-Mod-\\", run: IN },
  { key: "Mod-/", run: sN },
  { key: "Alt-A", run: aN },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: hI }
].concat(dI), mI = { key: "Tab", run: sx, shift: ox }, Pm = typeof String.prototype.normalize == "function" ? (n) => n.normalize("NFKD") : (n) => n;
class Sr {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, t, i = 0, r = e.length, s, o) {
    this.test = o, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(i, r), this.bufferStart = i, this.normalize = s ? (a) => s(Pm(a)) : Pm, this.query = this.normalize(t);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return Lt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let e = this.peek();
      if (e < 0)
        return this.done = !0, this;
      let t = Rh(e), i = this.bufferStart + this.bufferPos;
      this.bufferPos += Pn(e);
      let r = this.normalize(t);
      if (r.length)
        for (let s = 0, o = i; ; s++) {
          let a = r.charCodeAt(s), l = this.match(a, o, this.bufferPos + this.bufferStart);
          if (s == r.length - 1) {
            if (l)
              return this.value = l, this;
            break;
          }
          o == i && s < t.length && t.charCodeAt(s) == a && o++;
        }
    }
  }
  match(e, t, i) {
    let r = null;
    for (let s = 0; s < this.matches.length; s += 2) {
      let o = this.matches[s], a = !1;
      this.query.charCodeAt(o) == e && (o == this.query.length - 1 ? r = { from: this.matches[s + 1], to: i } : (this.matches[s]++, a = !0)), a || (this.matches.splice(s, 2), s -= 2);
    }
    return this.query.charCodeAt(0) == e && (this.query.length == 1 ? r = { from: t, to: i } : this.matches.push(1, t)), r && this.test && !this.test(r.from, r.to, this.buffer, this.bufferStart) && (r = null), r;
  }
}
typeof Symbol < "u" && (Sr.prototype[Symbol.iterator] = function() {
  return this;
});
const ax = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, af = "gm" + (/x/.unicode == null ? "" : "u");
class lx {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, t, i, r = 0, s = e.length) {
    if (this.text = e, this.to = s, this.curLine = "", this.done = !1, this.value = ax, /\\[sWDnr]|\n|\r|\[\^/.test(t))
      return new cx(e, t, i, r, s);
    this.re = new RegExp(t, af + (i?.ignoreCase ? "i" : "")), this.test = i?.test, this.iter = e.iter();
    let o = e.lineAt(r);
    this.curLineStart = o.from, this.matchPos = Za(e, r), this.getLine(this.curLineStart);
  }
  getLine(e) {
    this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e;
      let t = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (t) {
        let i = this.curLineStart + t.index, r = i + t[0].length;
        if (this.matchPos = Za(this.text, r + (i == r ? 1 : 0)), i == this.curLineStart + this.curLine.length && this.nextLine(), (i < r || i > this.value.to) && (!this.test || this.test(i, r, t)))
          return this.value = { from: i, to: r, match: t }, this;
        e = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), e = 0;
      else
        return this.done = !0, this;
    }
  }
}
const dc = /* @__PURE__ */ new WeakMap();
class hr {
  constructor(e, t) {
    this.from = e, this.text = t;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(e, t, i) {
    let r = dc.get(e);
    if (!r || r.from >= i || r.to <= t) {
      let a = new hr(t, e.sliceString(t, i));
      return dc.set(e, a), a;
    }
    if (r.from == t && r.to == i)
      return r;
    let { text: s, from: o } = r;
    return o > t && (s = e.sliceString(t, o) + s, o = t), r.to < i && (s += e.sliceString(r.to, i)), dc.set(e, new hr(o, s)), new hr(t, s.slice(t - o, i - o));
  }
}
class cx {
  constructor(e, t, i, r, s) {
    this.text = e, this.to = s, this.done = !1, this.value = ax, this.matchPos = Za(e, r), this.re = new RegExp(t, af + (i?.ignoreCase ? "i" : "")), this.test = i?.test, this.flat = hr.get(e, r, this.chunkEnd(
      r + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to;
  }
  next() {
    for (; ; ) {
      let e = this.re.lastIndex = this.matchPos - this.flat.from, t = this.re.exec(this.flat.text);
      if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1, t = this.re.exec(this.flat.text)), t) {
        let i = this.flat.from + t.index, r = i + t[0].length;
        if ((this.flat.to >= this.to || t.index + t[0].length <= this.flat.text.length - 10) && (!this.test || this.test(i, r, t)))
          return this.value = { from: i, to: r, match: t }, this.matchPos = Za(this.text, r + (i == r ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = hr.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (lx.prototype[Symbol.iterator] = cx.prototype[Symbol.iterator] = function() {
  return this;
});
function gI(n) {
  try {
    return new RegExp(n, af), !0;
  } catch {
    return !1;
  }
}
function Za(n, e) {
  if (e >= n.length)
    return e;
  let t = n.lineAt(e), i;
  for (; e < t.to && (i = t.text.charCodeAt(e - t.from)) >= 56320 && i < 57344; )
    e++;
  return e;
}
function Wu(n) {
  let e = String(n.state.doc.lineAt(n.state.selection.main.head).number), t = De("input", { class: "cm-textfield", name: "line", value: e }), i = De("form", {
    class: "cm-gotoLine",
    onkeydown: (s) => {
      s.keyCode == 27 ? (s.preventDefault(), n.dispatch({ effects: ks.of(!1) }), n.focus()) : s.keyCode == 13 && (s.preventDefault(), r());
    },
    onsubmit: (s) => {
      s.preventDefault(), r();
    }
  }, De("label", n.state.phrase("Go to line"), ": ", t), " ", De("button", { class: "cm-button", type: "submit" }, n.state.phrase("go")), De("button", {
    name: "close",
    onclick: () => {
      n.dispatch({ effects: ks.of(!1) }), n.focus();
    },
    "aria-label": n.state.phrase("close"),
    type: "button"
  }, ["×"]));
  function r() {
    let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);
    if (!s)
      return;
    let { state: o } = n, a = o.doc.lineAt(o.selection.main.head), [, l, c, u, h] = s, f = u ? +u.slice(1) : 0, d = c ? +c : a.number;
    if (c && h) {
      let O = d / 100;
      l && (O = O * (l == "-" ? -1 : 1) + a.number / o.doc.lines), d = Math.round(o.doc.lines * O);
    } else c && l && (d = d * (l == "-" ? -1 : 1) + a.number);
    let p = o.doc.line(Math.max(1, Math.min(o.doc.lines, d))), m = I.cursor(p.from + Math.max(0, Math.min(f, p.length)));
    n.dispatch({
      effects: [ks.of(!1), U.scrollIntoView(m.from, { y: "center" })],
      selection: m
    }), n.focus();
  }
  return { dom: i };
}
const ks = /* @__PURE__ */ me.define(), Am = /* @__PURE__ */ mt.define({
  create() {
    return !0;
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(ks) && (n = t.value);
    return n;
  },
  provide: (n) => Rs.from(n, (e) => e ? Wu : null)
}), OI = (n) => {
  let e = $s(n, Wu);
  if (!e) {
    let t = [ks.of(!0)];
    n.state.field(Am, !1) == null && t.push(me.appendConfig.of([Am, bI])), n.dispatch({ effects: t }), e = $s(n, Wu);
  }
  return e && e.dom.querySelector("input").select(), !0;
}, bI = /* @__PURE__ */ U.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    position: "relative",
    "& label": { fontSize: "80%" },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      bottom: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: "0"
    }
  }
}), yI = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, xI = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, yI, {
      highlightWordAroundCursor: (e, t) => e || t,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function kI(n) {
  return [_I, EI];
}
const SI = /* @__PURE__ */ ae.mark({ class: "cm-selectionMatch" }), wI = /* @__PURE__ */ ae.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function $m(n, e, t, i) {
  return (t == 0 || n(e.sliceDoc(t - 1, t)) != We.Word) && (i == e.doc.length || n(e.sliceDoc(i, i + 1)) != We.Word);
}
function vI(n, e, t, i) {
  return n(e.sliceDoc(t, t + 1)) == We.Word && n(e.sliceDoc(i - 1, i)) == We.Word;
}
const EI = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.selectionSet || n.docChanged || n.viewportChanged) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = n.state.facet(xI), { state: t } = n, i = t.selection;
    if (i.ranges.length > 1)
      return ae.none;
    let r = i.main, s, o = null;
    if (r.empty) {
      if (!e.highlightWordAroundCursor)
        return ae.none;
      let l = t.wordAt(r.head);
      if (!l)
        return ae.none;
      o = t.charCategorizer(r.head), s = t.sliceDoc(l.from, l.to);
    } else {
      let l = r.to - r.from;
      if (l < e.minSelectionLength || l > 200)
        return ae.none;
      if (e.wholeWords) {
        if (s = t.sliceDoc(r.from, r.to), o = t.charCategorizer(r.head), !($m(o, t, r.from, r.to) && vI(o, t, r.from, r.to)))
          return ae.none;
      } else if (s = t.sliceDoc(r.from, r.to), !s)
        return ae.none;
    }
    let a = [];
    for (let l of n.visibleRanges) {
      let c = new Sr(t.doc, s, l.from, l.to);
      for (; !c.next().done; ) {
        let { from: u, to: h } = c.value;
        if ((!o || $m(o, t, u, h)) && (r.empty && u <= r.from && h >= r.to ? a.push(wI.range(u, h)) : (u >= r.to || h <= r.from) && a.push(SI.range(u, h)), a.length > e.maxMatches))
          return ae.none;
      }
    }
    return ae.set(a);
  }
}, {
  decorations: (n) => n.decorations
}), _I = /* @__PURE__ */ U.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), QI = ({ state: n, dispatch: e }) => {
  let { selection: t } = n, i = I.create(t.ranges.map((r) => n.wordAt(r.head) || I.cursor(r.head)), t.mainIndex);
  return i.eq(t) ? !1 : (e(n.update({ selection: i })), !0);
};
function CI(n, e) {
  let { main: t, ranges: i } = n.selection, r = n.wordAt(t.head), s = r && r.from == t.from && r.to == t.to;
  for (let o = !1, a = new Sr(n.doc, e, i[i.length - 1].to); ; )
    if (a.next(), a.done) {
      if (o)
        return null;
      a = new Sr(n.doc, e, 0, Math.max(0, i[i.length - 1].from - 1)), o = !0;
    } else {
      if (o && i.some((l) => l.from == a.value.from))
        continue;
      if (s) {
        let l = n.wordAt(a.value.from);
        if (!l || l.from != a.value.from || l.to != a.value.to)
          continue;
      }
      return a.value;
    }
}
const TI = ({ state: n, dispatch: e }) => {
  let { ranges: t } = n.selection;
  if (t.some((s) => s.from === s.to))
    return QI({ state: n, dispatch: e });
  let i = n.sliceDoc(t[0].from, t[0].to);
  if (n.selection.ranges.some((s) => n.sliceDoc(s.from, s.to) != i))
    return !1;
  let r = CI(n, i);
  return r ? (e(n.update({
    selection: n.selection.addRange(I.range(r.from, r.to), !1),
    effects: U.scrollIntoView(r.to)
  })), !0) : !1;
}, Br = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (e) => new ZI(e),
      scrollToMatch: (e) => U.scrollIntoView(e)
    });
  }
});
class ux {
  /**
  Create a query object.
  */
  constructor(e) {
    this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.literal = !!e.literal, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || gI(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!e.wholeWord;
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal ? e : e.replace(/\\([nrt\\])/g, (t, i) => i == "n" ? `
` : i == "r" ? "\r" : i == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new RI(this) : new AI(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, t = 0, i) {
    let r = e.doc ? e : we.create({ doc: e });
    return i == null && (i = r.doc.length), this.regexp ? nr(this, r, t, i) : tr(this, r, t, i);
  }
}
class hx {
  constructor(e) {
    this.spec = e;
  }
}
function tr(n, e, t, i) {
  return new Sr(e.doc, n.unquoted, t, i, n.caseSensitive ? void 0 : (r) => r.toLowerCase(), n.wholeWord ? PI(e.doc, e.charCategorizer(e.selection.main.head)) : void 0);
}
function PI(n, e) {
  return (t, i, r, s) => ((s > t || s + r.length < i) && (s = Math.max(0, t - 2), r = n.sliceString(s, Math.min(n.length, i + 2))), (e(Xa(r, t - s)) != We.Word || e(qa(r, t - s)) != We.Word) && (e(qa(r, i - s)) != We.Word || e(Xa(r, i - s)) != We.Word));
}
class AI extends hx {
  constructor(e) {
    super(e);
  }
  nextMatch(e, t, i) {
    let r = tr(this.spec, e, i, e.doc.length).nextOverlapping();
    if (r.done) {
      let s = Math.min(e.doc.length, t + this.spec.unquoted.length);
      r = tr(this.spec, e, 0, s).nextOverlapping();
    }
    return r.done || r.value.from == t && r.value.to == i ? null : r.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, t, i) {
    for (let r = i; ; ) {
      let s = Math.max(t, r - 1e4 - this.spec.unquoted.length), o = tr(this.spec, e, s, r), a = null;
      for (; !o.nextOverlapping().done; )
        a = o.value;
      if (a)
        return a;
      if (s == t)
        return null;
      r -= 1e4;
    }
  }
  prevMatch(e, t, i) {
    let r = this.prevMatchInRange(e, 0, t);
    return r || (r = this.prevMatchInRange(e, Math.max(0, i - this.spec.unquoted.length), e.doc.length)), r && (r.from != t || r.to != i) ? r : null;
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(e, t) {
    let i = tr(this.spec, e, 0, e.doc.length), r = [];
    for (; !i.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(i.value);
    }
    return r;
  }
  highlight(e, t, i, r) {
    let s = tr(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(i + this.spec.unquoted.length, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
function nr(n, e, t, i) {
  return new lx(e.doc, n.search, {
    ignoreCase: !n.caseSensitive,
    test: n.wholeWord ? $I(e.charCategorizer(e.selection.main.head)) : void 0
  }, t, i);
}
function Xa(n, e) {
  return n.slice(xt(n, e, !1), e);
}
function qa(n, e) {
  return n.slice(e, xt(n, e));
}
function $I(n) {
  return (e, t, i) => !i[0].length || (n(Xa(i.input, i.index)) != We.Word || n(qa(i.input, i.index)) != We.Word) && (n(qa(i.input, i.index + i[0].length)) != We.Word || n(Xa(i.input, i.index + i[0].length)) != We.Word);
}
class RI extends hx {
  nextMatch(e, t, i) {
    let r = nr(this.spec, e, i, e.doc.length).next();
    return r.done && (r = nr(this.spec, e, 0, t).next()), r.done ? null : r.value;
  }
  prevMatchInRange(e, t, i) {
    for (let r = 1; ; r++) {
      let s = Math.max(
        t,
        i - r * 1e4
        /* FindPrev.ChunkSize */
      ), o = nr(this.spec, e, s, i), a = null;
      for (; !o.next().done; )
        a = o.value;
      if (a && (s == t || a.from > s + 10))
        return a;
      if (s == t)
        return null;
    }
  }
  prevMatch(e, t, i) {
    return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, i, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (t, i) => {
      if (i == "&")
        return e.match[0];
      if (i == "$")
        return "$";
      for (let r = i.length; r > 0; r--) {
        let s = +i.slice(0, r);
        if (s > 0 && s < e.match.length)
          return e.match[s] + i.slice(r);
      }
      return t;
    });
  }
  matchAll(e, t) {
    let i = nr(this.spec, e, 0, e.doc.length), r = [];
    for (; !i.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(i.value);
    }
    return r;
  }
  highlight(e, t, i, r) {
    let s = nr(this.spec, e, Math.max(
      0,
      t - 250
      /* RegExp.HighlightMargin */
    ), Math.min(i + 250, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
const Bs = /* @__PURE__ */ me.define(), lf = /* @__PURE__ */ me.define(), Oi = /* @__PURE__ */ mt.define({
  create(n) {
    return new pc(ju(n).create(), null);
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(Bs) ? n = new pc(t.value.create(), n.panel) : t.is(lf) && (n = new pc(n.query, t.value ? cf : null));
    return n;
  },
  provide: (n) => Rs.from(n, (e) => e.panel)
});
class pc {
  constructor(e, t) {
    this.query = e, this.panel = t;
  }
}
const MI = /* @__PURE__ */ ae.mark({ class: "cm-searchMatch" }), NI = /* @__PURE__ */ ae.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), II = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.view = n, this.decorations = this.highlight(n.state.field(Oi));
  }
  update(n) {
    let e = n.state.field(Oi);
    (e != n.startState.field(Oi) || n.docChanged || n.selectionSet || n.viewportChanged) && (this.decorations = this.highlight(e));
  }
  highlight({ query: n, panel: e }) {
    if (!e || !n.spec.valid)
      return ae.none;
    let { view: t } = this, i = new ei();
    for (let r = 0, s = t.visibleRanges, o = s.length; r < o; r++) {
      let { from: a, to: l } = s[r];
      for (; r < o - 1 && l > s[r + 1].from - 500; )
        l = s[++r].to;
      n.highlight(t.state, a, l, (c, u) => {
        let h = t.state.selection.ranges.some((f) => f.from == c && f.to == u);
        i.add(c, u, h ? NI : MI);
      });
    }
    return i.finish();
  }
}, {
  decorations: (n) => n.decorations
});
function lo(n) {
  return (e) => {
    let t = e.state.field(Oi, !1);
    return t && t.query.spec.valid ? n(e, t) : px(e);
  };
}
const Va = /* @__PURE__ */ lo((n, { query: e }) => {
  let { to: t } = n.state.selection.main, i = e.nextMatch(n.state, t, t);
  if (!i)
    return !1;
  let r = I.single(i.from, i.to), s = n.state.facet(Br);
  return n.dispatch({
    selection: r,
    effects: [uf(n, i), s.scrollToMatch(r.main, n)],
    userEvent: "select.search"
  }), dx(n), !0;
}), Ya = /* @__PURE__ */ lo((n, { query: e }) => {
  let { state: t } = n, { from: i } = t.selection.main, r = e.prevMatch(t, i, i);
  if (!r)
    return !1;
  let s = I.single(r.from, r.to), o = n.state.facet(Br);
  return n.dispatch({
    selection: s,
    effects: [uf(n, r), o.scrollToMatch(s.main, n)],
    userEvent: "select.search"
  }), dx(n), !0;
}), LI = /* @__PURE__ */ lo((n, { query: e }) => {
  let t = e.matchAll(n.state, 1e3);
  return !t || !t.length ? !1 : (n.dispatch({
    selection: I.create(t.map((i) => I.range(i.from, i.to))),
    userEvent: "select.search.matches"
  }), !0);
}), DI = ({ state: n, dispatch: e }) => {
  let t = n.selection;
  if (t.ranges.length > 1 || t.main.empty)
    return !1;
  let { from: i, to: r } = t.main, s = [], o = 0;
  for (let a = new Sr(n.doc, n.sliceDoc(i, r)); !a.next().done; ) {
    if (s.length > 1e3)
      return !1;
    a.value.from == i && (o = s.length), s.push(I.range(a.value.from, a.value.to));
  }
  return e(n.update({
    selection: I.create(s, o),
    userEvent: "select.search.matches"
  })), !0;
}, Rm = /* @__PURE__ */ lo((n, { query: e }) => {
  let { state: t } = n, { from: i, to: r } = t.selection.main;
  if (t.readOnly)
    return !1;
  let s = e.nextMatch(t, i, i);
  if (!s)
    return !1;
  let o = s, a = [], l, c, u = [];
  o.from == i && o.to == r && (c = t.toText(e.getReplacement(o)), a.push({ from: o.from, to: o.to, insert: c }), o = e.nextMatch(t, o.from, o.to), u.push(U.announce.of(t.phrase("replaced match on line $", t.doc.lineAt(i).number) + ".")));
  let h = n.state.changes(a);
  return o && (l = I.single(o.from, o.to).map(h), u.push(uf(n, o)), u.push(t.facet(Br).scrollToMatch(l.main, n))), n.dispatch({
    changes: h,
    selection: l,
    effects: u,
    userEvent: "input.replace"
  }), !0;
}), BI = /* @__PURE__ */ lo((n, { query: e }) => {
  if (n.state.readOnly)
    return !1;
  let t = e.matchAll(n.state, 1e9).map((r) => {
    let { from: s, to: o } = r;
    return { from: s, to: o, insert: e.getReplacement(r) };
  });
  if (!t.length)
    return !1;
  let i = n.state.phrase("replaced $ matches", t.length) + ".";
  return n.dispatch({
    changes: t,
    effects: U.announce.of(i),
    userEvent: "input.replace.all"
  }), !0;
});
function cf(n) {
  return n.state.facet(Br).createPanel(n);
}
function ju(n, e) {
  var t, i, r, s, o;
  let a = n.selection.main, l = a.empty || a.to > a.from + 100 ? "" : n.sliceDoc(a.from, a.to);
  if (e && !l)
    return e;
  let c = n.facet(Br);
  return new ux({
    search: ((t = e?.literal) !== null && t !== void 0 ? t : c.literal) ? l : l.replace(/\n/g, "\\n"),
    caseSensitive: (i = e?.caseSensitive) !== null && i !== void 0 ? i : c.caseSensitive,
    literal: (r = e?.literal) !== null && r !== void 0 ? r : c.literal,
    regexp: (s = e?.regexp) !== null && s !== void 0 ? s : c.regexp,
    wholeWord: (o = e?.wholeWord) !== null && o !== void 0 ? o : c.wholeWord
  });
}
function fx(n) {
  let e = $s(n, cf);
  return e && e.dom.querySelector("[main-field]");
}
function dx(n) {
  let e = fx(n);
  e && e == n.root.activeElement && e.select();
}
const px = (n) => {
  let e = n.state.field(Oi, !1);
  if (e && e.panel) {
    let t = fx(n);
    if (t && t != n.root.activeElement) {
      let i = ju(n.state, e.query.spec);
      i.valid && n.dispatch({ effects: Bs.of(i) }), t.focus(), t.select();
    }
  } else
    n.dispatch({ effects: [
      lf.of(!0),
      e ? Bs.of(ju(n.state, e.query.spec)) : me.appendConfig.of(qI)
    ] });
  return !0;
}, mx = (n) => {
  let e = n.state.field(Oi, !1);
  if (!e || !e.panel)
    return !1;
  let t = $s(n, cf);
  return t && t.dom.contains(n.root.activeElement) && n.focus(), n.dispatch({ effects: lf.of(!1) }), !0;
}, zI = [
  { key: "Mod-f", run: px, scope: "editor search-panel" },
  { key: "F3", run: Va, shift: Ya, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: Va, shift: Ya, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: mx, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: DI },
  { key: "Mod-Alt-g", run: OI },
  { key: "Mod-d", run: TI, preventDefault: !0 }
];
class ZI {
  constructor(e) {
    this.view = e;
    let t = this.query = e.state.field(Oi).query.spec;
    this.commit = this.commit.bind(this), this.searchField = De("input", {
      value: t.search,
      placeholder: Ft(e, "Find"),
      "aria-label": Ft(e, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = De("input", {
      value: t.replace,
      placeholder: Ft(e, "Replace"),
      "aria-label": Ft(e, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = De("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: t.caseSensitive,
      onchange: this.commit
    }), this.reField = De("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: t.regexp,
      onchange: this.commit
    }), this.wordField = De("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: t.wholeWord,
      onchange: this.commit
    });
    function i(r, s, o) {
      return De("button", { class: "cm-button", name: r, onclick: s, type: "button" }, o);
    }
    this.dom = De("div", { onkeydown: (r) => this.keydown(r), class: "cm-search" }, [
      this.searchField,
      i("next", () => Va(e), [Ft(e, "next")]),
      i("prev", () => Ya(e), [Ft(e, "previous")]),
      i("select", () => LI(e), [Ft(e, "all")]),
      De("label", null, [this.caseField, Ft(e, "match case")]),
      De("label", null, [this.reField, Ft(e, "regexp")]),
      De("label", null, [this.wordField, Ft(e, "by word")]),
      ...e.state.readOnly ? [] : [
        De("br"),
        this.replaceField,
        i("replace", () => Rm(e), [Ft(e, "replace")]),
        i("replaceAll", () => BI(e), [Ft(e, "replace all")])
      ],
      De("button", {
        name: "close",
        onclick: () => mx(e),
        "aria-label": Ft(e, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let e = new ux({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    e.eq(this.query) || (this.query = e, this.view.dispatch({ effects: Bs.of(e) }));
  }
  keydown(e) {
    G$(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? Ya : Va)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), Rm(this.view));
  }
  update(e) {
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(Bs) && !i.value.eq(this.query) && this.setQuery(i.value);
  }
  setQuery(e) {
    this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp, this.wordField.checked = e.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(Br).top;
  }
}
function Ft(n, e) {
  return n.state.phrase(e);
}
const Wo = 30, jo = /[\s\.,:;?!]/;
function uf(n, { from: e, to: t }) {
  let i = n.state.doc.lineAt(e), r = n.state.doc.lineAt(t).to, s = Math.max(i.from, e - Wo), o = Math.min(r, t + Wo), a = n.state.sliceDoc(s, o);
  if (s != i.from) {
    for (let l = 0; l < Wo; l++)
      if (!jo.test(a[l + 1]) && jo.test(a[l])) {
        a = a.slice(l);
        break;
      }
  }
  if (o != r) {
    for (let l = a.length - 1; l > a.length - Wo; l--)
      if (!jo.test(a[l - 1]) && jo.test(a[l])) {
        a = a.slice(0, l);
        break;
      }
  }
  return U.announce.of(`${n.state.phrase("current match")}. ${a} ${n.state.phrase("on line")} ${i.number}.`);
}
const XI = /* @__PURE__ */ U.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), qI = [
  Oi,
  /* @__PURE__ */ ri.low(II),
  XI
];
class hf {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, i, r) {
    this.state = e, this.pos = t, this.explicit = i, this.view = r, this.abortListeners = [], this.abortOnDocChange = !1;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = Fe(this.state).resolveInner(this.pos, -1);
    for (; t && e.indexOf(t.name) < 0; )
      t = t.parent;
    return t ? {
      from: t.from,
      to: this.pos,
      text: this.state.sliceDoc(t.from, this.pos),
      type: t.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos), i = Math.max(t.from, this.pos - 250), r = t.text.slice(i - t.from, this.pos - t.from), s = r.search(Ox(e, !1));
    return s < 0 ? null : { from: i + s, to: this.pos, text: r.slice(s) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(e, t, i) {
    e == "abort" && this.abortListeners && (this.abortListeners.push(t), i && i.onDocChange && (this.abortOnDocChange = !0));
  }
}
function Mm(n) {
  let e = Object.keys(n).join(""), t = /\w/.test(e);
  return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function VI(n) {
  let e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null);
  for (let { label: r } of n) {
    e[r[0]] = !0;
    for (let s = 1; s < r.length; s++)
      t[r[s]] = !0;
  }
  let i = Mm(e) + Mm(t) + "*$";
  return [new RegExp("^" + i), new RegExp(i)];
}
function gx(n) {
  let e = n.map((r) => typeof r == "string" ? { label: r } : r), [t, i] = e.every((r) => /^\w+$/.test(r.label)) ? [/\w*$/, /\w+$/] : VI(e);
  return (r) => {
    let s = r.matchBefore(i);
    return s || r.explicit ? { from: s ? s.from : r.pos, options: e, validFor: t } : null;
  };
}
function YI(n, e) {
  return (t) => {
    for (let i = Fe(t.state).resolveInner(t.pos, -1); i; i = i.parent) {
      if (n.indexOf(i.name) > -1)
        return null;
      if (i.type.isTop)
        break;
    }
    return e(t);
  };
}
class Nm {
  constructor(e, t, i, r) {
    this.completion = e, this.source = t, this.match = i, this.score = r;
  }
}
function Ii(n) {
  return n.selection.main.from;
}
function Ox(n, e) {
  var t;
  let { source: i } = n, r = e && i[0] != "^", s = i[i.length - 1] != "$";
  return !r && !s ? n : new RegExp(`${r ? "^" : ""}(?:${i})${s ? "$" : ""}`, (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? "i" : "");
}
const ff = /* @__PURE__ */ Bn.define();
function FI(n, e, t, i) {
  let { main: r } = n.selection, s = t - r.from, o = i - r.from;
  return Object.assign(Object.assign({}, n.changeByRange((a) => {
    if (a != r && t != i && n.sliceDoc(a.from + s, a.from + o) != n.sliceDoc(t, i))
      return { range: a };
    let l = n.toText(e);
    return {
      changes: { from: a.from + s, to: i == r.from ? a.to : a.from + o, insert: l },
      range: I.cursor(a.from + s + l.length)
    };
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const Im = /* @__PURE__ */ new WeakMap();
function UI(n) {
  if (!Array.isArray(n))
    return n;
  let e = Im.get(n);
  return e || Im.set(n, e = gx(n)), e;
}
const Fa = /* @__PURE__ */ me.define(), zs = /* @__PURE__ */ me.define();
class GI {
  constructor(e) {
    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let t = 0; t < e.length; ) {
      let i = Lt(e, t), r = Pn(i);
      this.chars.push(i);
      let s = e.slice(t, t + r), o = s.toUpperCase();
      this.folded.push(Lt(o == s ? s.toLowerCase() : o, 0)), t += r;
    }
    this.astral = e.length != this.chars.length;
  }
  ret(e, t) {
    return this.score = e, this.matched = t, this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (e.length < this.pattern.length)
      return null;
    let { chars: t, folded: i, any: r, precise: s, byWord: o } = this;
    if (t.length == 1) {
      let y = Lt(e, 0), S = Pn(y), _ = S == e.length ? 0 : -100;
      if (y != t[0]) if (y == i[0])
        _ += -200;
      else
        return null;
      return this.ret(_, [0, S]);
    }
    let a = e.indexOf(this.pattern);
    if (a == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let l = t.length, c = 0;
    if (a < 0) {
      for (let y = 0, S = Math.min(e.length, 200); y < S && c < l; ) {
        let _ = Lt(e, y);
        (_ == t[c] || _ == i[c]) && (r[c++] = y), y += Pn(_);
      }
      if (c < l)
        return null;
    }
    let u = 0, h = 0, f = !1, d = 0, p = -1, m = -1, O = /[a-z]/.test(e), g = !0;
    for (let y = 0, S = Math.min(e.length, 200), _ = 0; y < S && h < l; ) {
      let v = Lt(e, y);
      a < 0 && (u < l && v == t[u] && (s[u++] = y), d < l && (v == t[d] || v == i[d] ? (d == 0 && (p = y), m = y + 1, d++) : d = 0));
      let x, C = v < 255 ? v >= 48 && v <= 57 || v >= 97 && v <= 122 ? 2 : v >= 65 && v <= 90 ? 1 : 0 : (x = Rh(v)) != x.toLowerCase() ? 1 : x != x.toUpperCase() ? 2 : 0;
      (!y || C == 1 && O || _ == 0 && C != 0) && (t[h] == v || i[h] == v && (f = !0) ? o[h++] = y : o.length && (g = !1)), _ = C, y += Pn(v);
    }
    return h == l && o[0] == 0 && g ? this.result(-100 + (f ? -200 : 0), o, e) : d == l && p == 0 ? this.ret(-200 - e.length + (m == e.length ? 0 : -100), [0, m]) : a > -1 ? this.ret(-700 - e.length, [a, a + this.pattern.length]) : d == l ? this.ret(-900 - e.length, [p, m]) : h == l ? this.result(-100 + (f ? -200 : 0) + -700 + (g ? 0 : -1100), o, e) : t.length == 2 ? null : this.result((r[0] ? -700 : 0) + -200 + -1100, r, e);
  }
  result(e, t, i) {
    let r = [], s = 0;
    for (let o of t) {
      let a = o + (this.astral ? Pn(Lt(i, o)) : 1);
      s && r[s - 1] == o ? r[s - 1] = a : (r[s++] = o, r[s++] = a);
    }
    return this.ret(e - i.length, r);
  }
}
class WI {
  constructor(e) {
    this.pattern = e, this.matched = [], this.score = 0, this.folded = e.toLowerCase();
  }
  match(e) {
    if (e.length < this.pattern.length)
      return null;
    let t = e.slice(0, this.pattern.length), i = t == this.pattern ? 0 : t.toLowerCase() == this.folded ? -200 : null;
    return i == null ? null : (this.matched = [0, t.length], this.score = i + (e.length == this.pattern.length ? 0 : -100), this);
  }
}
const pt = /* @__PURE__ */ K.define({
  combine(n) {
    return zn(n, {
      activateOnTyping: !0,
      activateOnCompletion: () => !1,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: jI,
      filterStrict: !1,
      compareCompletions: (e, t) => e.label.localeCompare(t.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (e, t) => e && t,
      closeOnBlur: (e, t) => e && t,
      icons: (e, t) => e && t,
      tooltipClass: (e, t) => (i) => Lm(e(i), t(i)),
      optionClass: (e, t) => (i) => Lm(e(i), t(i)),
      addToOptions: (e, t) => e.concat(t),
      filterStrict: (e, t) => e || t
    });
  }
});
function Lm(n, e) {
  return n ? e ? n + " " + e : n : e;
}
function jI(n, e, t, i, r, s) {
  let o = n.textDirection == Ge.RTL, a = o, l = !1, c = "top", u, h, f = e.left - r.left, d = r.right - e.right, p = i.right - i.left, m = i.bottom - i.top;
  if (a && f < Math.min(p, d) ? a = !1 : !a && d < Math.min(p, f) && (a = !0), p <= (a ? f : d))
    u = Math.max(r.top, Math.min(t.top, r.bottom - m)) - e.top, h = Math.min(400, a ? f : d);
  else {
    l = !0, h = Math.min(
      400,
      (o ? e.right : r.right - e.left) - 30
      /* Info.Margin */
    );
    let y = r.bottom - e.bottom;
    y >= m || y > e.top ? u = t.bottom - e.top : (c = "bottom", u = e.bottom - t.top);
  }
  let O = (e.bottom - e.top) / s.offsetHeight, g = (e.right - e.left) / s.offsetWidth;
  return {
    style: `${c}: ${u / O}px; max-width: ${h / g}px`,
    class: "cm-completionInfo-" + (l ? o ? "left-narrow" : "right-narrow" : a ? "left" : "right")
  };
}
function HI(n) {
  let e = n.addToOptions.slice();
  return n.icons && e.push({
    render(t) {
      let i = document.createElement("div");
      return i.classList.add("cm-completionIcon"), t.type && i.classList.add(...t.type.split(/\s+/g).map((r) => "cm-completionIcon-" + r)), i.setAttribute("aria-hidden", "true"), i;
    },
    position: 20
  }), e.push({
    render(t, i, r, s) {
      let o = document.createElement("span");
      o.className = "cm-completionLabel";
      let a = t.displayLabel || t.label, l = 0;
      for (let c = 0; c < s.length; ) {
        let u = s[c++], h = s[c++];
        u > l && o.appendChild(document.createTextNode(a.slice(l, u)));
        let f = o.appendChild(document.createElement("span"));
        f.appendChild(document.createTextNode(a.slice(u, h))), f.className = "cm-completionMatchedText", l = h;
      }
      return l < a.length && o.appendChild(document.createTextNode(a.slice(l))), o;
    },
    position: 50
  }, {
    render(t) {
      if (!t.detail)
        return null;
      let i = document.createElement("span");
      return i.className = "cm-completionDetail", i.textContent = t.detail, i;
    },
    position: 80
  }), e.sort((t, i) => t.position - i.position).map((t) => t.render);
}
function mc(n, e, t) {
  if (n <= t)
    return { from: 0, to: n };
  if (e < 0 && (e = 0), e <= n >> 1) {
    let r = Math.floor(e / t);
    return { from: r * t, to: (r + 1) * t };
  }
  let i = Math.floor((n - e) / t);
  return { from: n - (i + 1) * t, to: n - i * t };
}
class KI {
  constructor(e, t, i) {
    this.view = e, this.stateField = t, this.applyCompletion = i, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (l) => this.placeInfo(l),
      key: this
    }, this.space = null, this.currentClass = "";
    let r = e.state.field(t), { options: s, selected: o } = r.open, a = e.state.facet(pt);
    this.optionContent = HI(a), this.optionClass = a.optionClass, this.tooltipClass = a.tooltipClass, this.range = mc(s.length, o, a.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(e.state), this.dom.addEventListener("mousedown", (l) => {
      let { options: c } = e.state.field(t).open;
      for (let u = l.target, h; u && u != this.dom; u = u.parentNode)
        if (u.nodeName == "LI" && (h = /-(\d+)$/.exec(u.id)) && +h[1] < c.length) {
          this.applyCompletion(e, c[+h[1]]), l.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (l) => {
      let c = e.state.field(this.stateField, !1);
      c && c.tooltip && e.state.facet(pt).closeOnBlur && l.relatedTarget != e.contentDOM && e.dispatch({ effects: zs.of(null) });
    }), this.showOptions(s, r.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(e, t) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, t, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(e) {
    var t;
    let i = e.state.field(this.stateField), r = e.startState.field(this.stateField);
    if (this.updateTooltipClass(e.state), i != r) {
      let { options: s, selected: o, disabled: a } = i.open;
      (!r.open || r.open.options != s) && (this.range = mc(s.length, o, e.state.facet(pt).maxRenderedOptions), this.showOptions(s, i.id)), this.updateSel(), a != ((t = r.open) === null || t === void 0 ? void 0 : t.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!a);
    }
  }
  updateTooltipClass(e) {
    let t = this.tooltipClass(e);
    if (t != this.currentClass) {
      for (let i of this.currentClass.split(" "))
        i && this.dom.classList.remove(i);
      for (let i of t.split(" "))
        i && this.dom.classList.add(i);
      this.currentClass = t;
    }
  }
  positioned(e) {
    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let e = this.view.state.field(this.stateField), t = e.open;
    if ((t.selected > -1 && t.selected < this.range.from || t.selected >= this.range.to) && (this.range = mc(t.options.length, t.selected, this.view.state.facet(pt).maxRenderedOptions), this.showOptions(t.options, e.id)), this.updateSelectedOption(t.selected)) {
      this.destroyInfo();
      let { completion: i } = t.options[t.selected], { info: r } = i;
      if (!r)
        return;
      let s = typeof r == "string" ? document.createTextNode(r) : r(i);
      if (!s)
        return;
      "then" in s ? s.then((o) => {
        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, i);
      }).catch((o) => zt(this.view.state, o, "completion info")) : this.addInfoPane(s, i);
    }
  }
  addInfoPane(e, t) {
    this.destroyInfo();
    let i = this.info = document.createElement("div");
    if (i.className = "cm-tooltip cm-completionInfo", e.nodeType != null)
      i.appendChild(e), this.infoDestroy = null;
    else {
      let { dom: r, destroy: s } = e;
      i.appendChild(r), this.infoDestroy = s || null;
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(e) {
    let t = null;
    for (let i = this.list.firstChild, r = this.range.from; i; i = i.nextSibling, r++)
      i.nodeName != "LI" || !i.id ? r-- : r == e ? i.hasAttribute("aria-selected") || (i.setAttribute("aria-selected", "true"), t = i) : i.hasAttribute("aria-selected") && i.removeAttribute("aria-selected");
    return t && eL(this.list, t), t;
  }
  measureInfo() {
    let e = this.dom.querySelector("[aria-selected]");
    if (!e || !this.info)
      return null;
    let t = this.dom.getBoundingClientRect(), i = this.info.getBoundingClientRect(), r = e.getBoundingClientRect(), s = this.space;
    if (!s) {
      let o = this.dom.ownerDocument.documentElement;
      s = { left: 0, top: 0, right: o.clientWidth, bottom: o.clientHeight };
    }
    return r.top > Math.min(s.bottom, t.bottom) - 10 || r.bottom < Math.max(s.top, t.top) + 10 ? null : this.view.state.facet(pt).positionInfo(this.view, t, r, i, s, this.dom);
  }
  placeInfo(e) {
    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(e, t, i) {
    const r = document.createElement("ul");
    r.id = t, r.setAttribute("role", "listbox"), r.setAttribute("aria-expanded", "true"), r.setAttribute("aria-label", this.view.state.phrase("Completions")), r.addEventListener("mousedown", (o) => {
      o.target == r && o.preventDefault();
    });
    let s = null;
    for (let o = i.from; o < i.to; o++) {
      let { completion: a, match: l } = e[o], { section: c } = a;
      if (c) {
        let f = typeof c == "string" ? c : c.name;
        if (f != s && (o > i.from || i.from == 0))
          if (s = f, typeof c != "string" && c.header)
            r.appendChild(c.header(c));
          else {
            let d = r.appendChild(document.createElement("completion-section"));
            d.textContent = f;
          }
      }
      const u = r.appendChild(document.createElement("li"));
      u.id = t + "-" + o, u.setAttribute("role", "option");
      let h = this.optionClass(a);
      h && (u.className = h);
      for (let f of this.optionContent) {
        let d = f(a, this.view.state, this.view, l);
        d && u.appendChild(d);
      }
    }
    return i.from && r.classList.add("cm-completionListIncompleteTop"), i.to < e.length && r.classList.add("cm-completionListIncompleteBottom"), r;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function JI(n, e) {
  return (t) => new KI(t, n, e);
}
function eL(n, e) {
  let t = n.getBoundingClientRect(), i = e.getBoundingClientRect(), r = t.height / n.offsetHeight;
  i.top < t.top ? n.scrollTop -= (t.top - i.top) / r : i.bottom > t.bottom && (n.scrollTop += (i.bottom - t.bottom) / r);
}
function Dm(n) {
  return (n.boost || 0) * 100 + (n.apply ? 10 : 0) + (n.info ? 5 : 0) + (n.type ? 1 : 0);
}
function tL(n, e) {
  let t = [], i = null, r = (c) => {
    t.push(c);
    let { section: u } = c.completion;
    if (u) {
      i || (i = []);
      let h = typeof u == "string" ? u : u.name;
      i.some((f) => f.name == h) || i.push(typeof u == "string" ? { name: h } : u);
    }
  }, s = e.facet(pt);
  for (let c of n)
    if (c.hasResult()) {
      let u = c.result.getMatch;
      if (c.result.filter === !1)
        for (let h of c.result.options)
          r(new Nm(h, c.source, u ? u(h) : [], 1e9 - t.length));
      else {
        let h = e.sliceDoc(c.from, c.to), f, d = s.filterStrict ? new WI(h) : new GI(h);
        for (let p of c.result.options)
          if (f = d.match(p.label)) {
            let m = p.displayLabel ? u ? u(p, f.matched) : [] : f.matched;
            r(new Nm(p, c.source, m, f.score + (p.boost || 0)));
          }
      }
    }
  if (i) {
    let c = /* @__PURE__ */ Object.create(null), u = 0, h = (f, d) => {
      var p, m;
      return ((p = f.rank) !== null && p !== void 0 ? p : 1e9) - ((m = d.rank) !== null && m !== void 0 ? m : 1e9) || (f.name < d.name ? -1 : 1);
    };
    for (let f of i.sort(h))
      u -= 1e5, c[f.name] = u;
    for (let f of t) {
      let { section: d } = f.completion;
      d && (f.score += c[typeof d == "string" ? d : d.name]);
    }
  }
  let o = [], a = null, l = s.compareCompletions;
  for (let c of t.sort((u, h) => h.score - u.score || l(u.completion, h.completion))) {
    let u = c.completion;
    !a || a.label != u.label || a.detail != u.detail || a.type != null && u.type != null && a.type != u.type || a.apply != u.apply || a.boost != u.boost ? o.push(c) : Dm(c.completion) > Dm(a) && (o[o.length - 1] = c), a = c.completion;
  }
  return o;
}
class or {
  constructor(e, t, i, r, s, o) {
    this.options = e, this.attrs = t, this.tooltip = i, this.timestamp = r, this.selected = s, this.disabled = o;
  }
  setSelected(e, t) {
    return e == this.selected || e >= this.options.length ? this : new or(this.options, Bm(t, e), this.tooltip, this.timestamp, e, this.disabled);
  }
  static build(e, t, i, r, s, o) {
    if (r && !o && e.some((c) => c.isPending))
      return r.setDisabled();
    let a = tL(e, t);
    if (!a.length)
      return r && e.some((c) => c.isPending) ? r.setDisabled() : null;
    let l = t.facet(pt).selectOnOpen ? 0 : -1;
    if (r && r.selected != l && r.selected != -1) {
      let c = r.options[r.selected].completion;
      for (let u = 0; u < a.length; u++)
        if (a[u].completion == c) {
          l = u;
          break;
        }
    }
    return new or(a, Bm(i, l), {
      pos: e.reduce((c, u) => u.hasResult() ? Math.min(c, u.from) : c, 1e8),
      create: aL,
      above: s.aboveCursor
    }, r ? r.timestamp : Date.now(), l, !1);
  }
  map(e) {
    return new or(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
  setDisabled() {
    return new or(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, !0);
  }
}
class Ua {
  constructor(e, t, i) {
    this.active = e, this.id = t, this.open = i;
  }
  static start() {
    return new Ua(sL, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(e) {
    let { state: t } = e, i = t.facet(pt), s = (i.override || t.languageDataAt("autocomplete", Ii(t)).map(UI)).map((l) => (this.active.find((u) => u.source == l) || new ln(
      l,
      this.active.some(
        (u) => u.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(e, i));
    s.length == this.active.length && s.every((l, c) => l == this.active[c]) && (s = this.active);
    let o = this.open, a = e.effects.some((l) => l.is(df));
    o && e.docChanged && (o = o.map(e.changes)), e.selection || s.some((l) => l.hasResult() && e.changes.touchesRange(l.from, l.to)) || !nL(s, this.active) || a ? o = or.build(s, t, this.id, o, i, a) : o && o.disabled && !s.some((l) => l.isPending) && (o = null), !o && s.every((l) => !l.isPending) && s.some((l) => l.hasResult()) && (s = s.map((l) => l.hasResult() ? new ln(
      l.source,
      0
      /* State.Inactive */
    ) : l));
    for (let l of e.effects)
      l.is(yx) && (o = o && o.setSelected(l.value, this.id));
    return s == this.active && o == this.open ? this : new Ua(s, this.id, o);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? iL : rL;
  }
}
function nL(n, e) {
  if (n == e)
    return !0;
  for (let t = 0, i = 0; ; ) {
    for (; t < n.length && !n[t].hasResult(); )
      t++;
    for (; i < e.length && !e[i].hasResult(); )
      i++;
    let r = t == n.length, s = i == e.length;
    if (r || s)
      return r == s;
    if (n[t++].result != e[i++].result)
      return !1;
  }
}
const iL = {
  "aria-autocomplete": "list"
}, rL = {};
function Bm(n, e) {
  let t = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": n
  };
  return e > -1 && (t["aria-activedescendant"] = n + "-" + e), t;
}
const sL = [];
function bx(n, e) {
  if (n.isUserEvent("input.complete")) {
    let i = n.annotation(ff);
    if (i && e.activateOnCompletion(i))
      return 12;
  }
  let t = n.isUserEvent("input.type");
  return t && e.activateOnTyping ? 5 : t ? 1 : n.isUserEvent("delete.backward") ? 2 : n.selection ? 8 : n.docChanged ? 16 : 0;
}
class ln {
  constructor(e, t, i = !1) {
    this.source = e, this.state = t, this.explicit = i;
  }
  hasResult() {
    return !1;
  }
  get isPending() {
    return this.state == 1;
  }
  update(e, t) {
    let i = bx(e, t), r = this;
    (i & 8 || i & 16 && this.touches(e)) && (r = new ln(
      r.source,
      0
      /* State.Inactive */
    )), i & 4 && r.state == 0 && (r = new ln(
      this.source,
      1
      /* State.Pending */
    )), r = r.updateFor(e, i);
    for (let s of e.effects)
      if (s.is(Fa))
        r = new ln(r.source, 1, s.value);
      else if (s.is(zs))
        r = new ln(
          r.source,
          0
          /* State.Inactive */
        );
      else if (s.is(df))
        for (let o of s.value)
          o.source == r.source && (r = o);
    return r;
  }
  updateFor(e, t) {
    return this.map(e.changes);
  }
  map(e) {
    return this;
  }
  touches(e) {
    return e.changes.touchesRange(Ii(e.state));
  }
}
class fr extends ln {
  constructor(e, t, i, r, s, o) {
    super(e, 3, t), this.limit = i, this.result = r, this.from = s, this.to = o;
  }
  hasResult() {
    return !0;
  }
  updateFor(e, t) {
    var i;
    if (!(t & 3))
      return this.map(e.changes);
    let r = this.result;
    r.map && !e.changes.empty && (r = r.map(r, e.changes));
    let s = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), a = Ii(e.state);
    if (a > o || !r || t & 2 && (Ii(e.startState) == this.from || a < this.limit))
      return new ln(
        this.source,
        t & 4 ? 1 : 0
        /* State.Inactive */
      );
    let l = e.changes.mapPos(this.limit);
    return oL(r.validFor, e.state, s, o) ? new fr(this.source, this.explicit, l, r, s, o) : r.update && (r = r.update(r, s, o, new hf(e.state, a, !1))) ? new fr(this.source, this.explicit, l, r, r.from, (i = r.to) !== null && i !== void 0 ? i : Ii(e.state)) : new ln(this.source, 1, this.explicit);
  }
  map(e) {
    return e.empty ? this : (this.result.map ? this.result.map(this.result, e) : this.result) ? new fr(this.source, this.explicit, e.mapPos(this.limit), this.result, e.mapPos(this.from), e.mapPos(this.to, 1)) : new ln(
      this.source,
      0
      /* State.Inactive */
    );
  }
  touches(e) {
    return e.changes.touchesRange(this.from, this.to);
  }
}
function oL(n, e, t, i) {
  if (!n)
    return !1;
  let r = e.sliceDoc(t, i);
  return typeof n == "function" ? n(r, t, i, e) : Ox(n, !0).test(r);
}
const df = /* @__PURE__ */ me.define({
  map(n, e) {
    return n.map((t) => t.map(e));
  }
}), yx = /* @__PURE__ */ me.define(), Bt = /* @__PURE__ */ mt.define({
  create() {
    return Ua.start();
  },
  update(n, e) {
    return n.update(e);
  },
  provide: (n) => [
    Gh.from(n, (e) => e.tooltip),
    U.contentAttributes.from(n, (e) => e.attrs)
  ]
});
function pf(n, e) {
  const t = e.completion.apply || e.completion.label;
  let i = n.state.field(Bt).active.find((r) => r.source == e.source);
  return i instanceof fr ? (typeof t == "string" ? n.dispatch(Object.assign(Object.assign({}, FI(n.state, t, i.from, i.to)), { annotations: ff.of(e.completion) })) : t(n, e.completion, i.from, i.to), !0) : !1;
}
const aL = /* @__PURE__ */ JI(Bt, pf);
function Ho(n, e = "option") {
  return (t) => {
    let i = t.state.field(Bt, !1);
    if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < t.state.facet(pt).interactionDelay)
      return !1;
    let r = 1, s;
    e == "page" && (s = Jy(t, i.open.tooltip)) && (r = Math.max(2, Math.floor(s.dom.offsetHeight / s.dom.querySelector("li").offsetHeight) - 1));
    let { length: o } = i.open.options, a = i.open.selected > -1 ? i.open.selected + r * (n ? 1 : -1) : n ? 0 : o - 1;
    return a < 0 ? a = e == "page" ? 0 : o - 1 : a >= o && (a = e == "page" ? o - 1 : 0), t.dispatch({ effects: yx.of(a) }), !0;
  };
}
const lL = (n) => {
  let e = n.state.field(Bt, !1);
  return n.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < n.state.facet(pt).interactionDelay ? !1 : pf(n, e.open.options[e.open.selected]);
}, zm = (n) => n.state.field(Bt, !1) ? (n.dispatch({ effects: Fa.of(!0) }), !0) : !1, cL = (n) => {
  let e = n.state.field(Bt, !1);
  return !e || !e.active.some(
    (t) => t.state != 0
    /* State.Inactive */
  ) ? !1 : (n.dispatch({ effects: zs.of(null) }), !0);
};
class uL {
  constructor(e, t) {
    this.active = e, this.context = t, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const hL = 50, fL = 1e3, dL = /* @__PURE__ */ nt.fromClass(class {
  constructor(n) {
    this.view = n, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let e of n.state.field(Bt).active)
      e.isPending && this.startQuery(e);
  }
  update(n) {
    let e = n.state.field(Bt), t = n.state.facet(pt);
    if (!n.selectionSet && !n.docChanged && n.startState.field(Bt) == e)
      return;
    let i = n.transactions.some((s) => {
      let o = bx(s, t);
      return o & 8 || (s.selection || s.docChanged) && !(o & 3);
    });
    for (let s = 0; s < this.running.length; s++) {
      let o = this.running[s];
      if (i || o.context.abortOnDocChange && n.docChanged || o.updates.length + n.transactions.length > hL && Date.now() - o.time > fL) {
        for (let a of o.context.abortListeners)
          try {
            a();
          } catch (l) {
            zt(this.view.state, l);
          }
        o.context.abortListeners = null, this.running.splice(s--, 1);
      } else
        o.updates.push(...n.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), n.transactions.some((s) => s.effects.some((o) => o.is(Fa))) && (this.pendingStart = !0);
    let r = this.pendingStart ? 50 : t.activateOnTypingDelay;
    if (this.debounceUpdate = e.active.some((s) => s.isPending && !this.running.some((o) => o.active.source == s.source)) ? setTimeout(() => this.startUpdate(), r) : -1, this.composing != 0)
      for (let s of n.transactions)
        s.isUserEvent("input.type") ? this.composing = 2 : this.composing == 2 && s.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: n } = this.view, e = n.field(Bt);
    for (let t of e.active)
      t.isPending && !this.running.some((i) => i.active.source == t.source) && this.startQuery(t);
    this.running.length && e.open && e.open.disabled && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(pt).updateSyncTime));
  }
  startQuery(n) {
    let { state: e } = this.view, t = Ii(e), i = new hf(e, t, n.explicit, this.view), r = new uL(n, i);
    this.running.push(r), Promise.resolve(n.source(i)).then((s) => {
      r.context.aborted || (r.done = s || null, this.scheduleAccept());
    }, (s) => {
      this.view.dispatch({ effects: zs.of(null) }), zt(this.view.state, s);
    });
  }
  scheduleAccept() {
    this.running.every((n) => n.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(pt).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var n;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let e = [], t = this.view.state.facet(pt), i = this.view.state.field(Bt);
    for (let r = 0; r < this.running.length; r++) {
      let s = this.running[r];
      if (s.done === void 0)
        continue;
      if (this.running.splice(r--, 1), s.done) {
        let a = Ii(s.updates.length ? s.updates[0].startState : this.view.state), l = Math.min(a, s.done.from + (s.active.explicit ? 0 : 1)), c = new fr(s.active.source, s.active.explicit, l, s.done, s.done.from, (n = s.done.to) !== null && n !== void 0 ? n : a);
        for (let u of s.updates)
          c = c.update(u, t);
        if (c.hasResult()) {
          e.push(c);
          continue;
        }
      }
      let o = i.active.find((a) => a.source == s.active.source);
      if (o && o.isPending)
        if (s.done == null) {
          let a = new ln(
            s.active.source,
            0
            /* State.Inactive */
          );
          for (let l of s.updates)
            a = a.update(l, t);
          a.isPending || e.push(a);
        } else
          this.startQuery(o);
    }
    (e.length || i.open && i.open.disabled) && this.view.dispatch({ effects: df.of(e) });
  }
}, {
  eventHandlers: {
    blur(n) {
      let e = this.view.state.field(Bt, !1);
      if (e && e.tooltip && this.view.state.facet(pt).closeOnBlur) {
        let t = e.open && Jy(this.view, e.open.tooltip);
        (!t || !t.dom.contains(n.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: zs.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: Fa.of(!1) }), 20), this.composing = 0;
    }
  }
}), pL = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform), mL = /* @__PURE__ */ ri.highest(/* @__PURE__ */ U.domEventHandlers({
  keydown(n, e) {
    let t = e.state.field(Bt, !1);
    if (!t || !t.open || t.open.disabled || t.open.selected < 0 || n.key.length > 1 || n.ctrlKey && !(pL && n.altKey) || n.metaKey)
      return !1;
    let i = t.open.options[t.open.selected], r = t.active.find((o) => o.source == i.source), s = i.completion.commitCharacters || r.result.commitCharacters;
    return s && s.indexOf(n.key) > -1 && pf(e, i), !1;
  }
})), xx = /* @__PURE__ */ U.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class gL {
  constructor(e, t, i, r) {
    this.field = e, this.line = t, this.from = i, this.to = r;
  }
}
class mf {
  constructor(e, t, i) {
    this.field = e, this.from = t, this.to = i;
  }
  map(e) {
    let t = e.mapPos(this.from, -1, yt.TrackDel), i = e.mapPos(this.to, 1, yt.TrackDel);
    return t == null || i == null ? null : new mf(this.field, t, i);
  }
}
class gf {
  constructor(e, t) {
    this.lines = e, this.fieldPositions = t;
  }
  instantiate(e, t) {
    let i = [], r = [t], s = e.doc.lineAt(t), o = /^\s*/.exec(s.text)[0];
    for (let l of this.lines) {
      if (i.length) {
        let c = o, u = /^\t*/.exec(l)[0].length;
        for (let h = 0; h < u; h++)
          c += e.facet(Ir);
        r.push(t + c.length - u), l = c + l.slice(u);
      }
      i.push(l), t += l.length + 1;
    }
    let a = this.fieldPositions.map((l) => new mf(l.field, r[l.line] + l.from, r[l.line] + l.to));
    return { text: i, ranges: a };
  }
  static parse(e) {
    let t = [], i = [], r = [], s;
    for (let o of e.split(/\r\n?|\n/)) {
      for (; s = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(o); ) {
        let a = s[1] ? +s[1] : null, l = s[2] || s[3] || "", c = -1, u = l.replace(/\\[{}]/g, (h) => h[1]);
        for (let h = 0; h < t.length; h++)
          (a != null ? t[h].seq == a : u && t[h].name == u) && (c = h);
        if (c < 0) {
          let h = 0;
          for (; h < t.length && (a == null || t[h].seq != null && t[h].seq < a); )
            h++;
          t.splice(h, 0, { seq: a, name: u }), c = h;
          for (let f of r)
            f.field >= c && f.field++;
        }
        r.push(new gL(c, i.length, s.index, s.index + u.length)), o = o.slice(0, s.index) + l + o.slice(s.index + s[0].length);
      }
      o = o.replace(/\\([{}])/g, (a, l, c) => {
        for (let u of r)
          u.line == i.length && u.from > c && (u.from--, u.to--);
        return l;
      }), i.push(o);
    }
    return new gf(i, r);
  }
}
let OL = /* @__PURE__ */ ae.widget({ widget: /* @__PURE__ */ new class extends Zn {
  toDOM() {
    let n = document.createElement("span");
    return n.className = "cm-snippetFieldPosition", n;
  }
  ignoreEvent() {
    return !1;
  }
}() }), bL = /* @__PURE__ */ ae.mark({ class: "cm-snippetField" });
class zr {
  constructor(e, t) {
    this.ranges = e, this.active = t, this.deco = ae.set(e.map((i) => (i.from == i.to ? OL : bL).range(i.from, i.to)));
  }
  map(e) {
    let t = [];
    for (let i of this.ranges) {
      let r = i.map(e);
      if (!r)
        return null;
      t.push(r);
    }
    return new zr(t, this.active);
  }
  selectionInsideField(e) {
    return e.ranges.every((t) => this.ranges.some((i) => i.field == this.active && i.from <= t.from && i.to >= t.to));
  }
}
const co = /* @__PURE__ */ me.define({
  map(n, e) {
    return n && n.map(e);
  }
}), yL = /* @__PURE__ */ me.define(), Zs = /* @__PURE__ */ mt.define({
  create() {
    return null;
  },
  update(n, e) {
    for (let t of e.effects) {
      if (t.is(co))
        return t.value;
      if (t.is(yL) && n)
        return new zr(n.ranges, t.value);
    }
    return n && e.docChanged && (n = n.map(e.changes)), n && e.selection && !n.selectionInsideField(e.selection) && (n = null), n;
  },
  provide: (n) => U.decorations.from(n, (e) => e ? e.deco : ae.none)
});
function Of(n, e) {
  return I.create(n.filter((t) => t.field == e).map((t) => I.range(t.from, t.to)));
}
function xL(n) {
  let e = gf.parse(n);
  return (t, i, r, s) => {
    let { text: o, ranges: a } = e.instantiate(t.state, r), { main: l } = t.state.selection, c = {
      changes: { from: r, to: s == l.from ? l.to : s, insert: Te.of(o) },
      scrollIntoView: !0,
      annotations: i ? [ff.of(i), ot.userEvent.of("input.complete")] : void 0
    };
    if (a.length && (c.selection = Of(a, 0)), a.some((u) => u.field > 0)) {
      let u = new zr(a, 0), h = c.effects = [co.of(u)];
      t.state.field(Zs, !1) === void 0 && h.push(me.appendConfig.of([Zs, EL, _L, xx]));
    }
    t.dispatch(t.state.update(c));
  };
}
function kx(n) {
  return ({ state: e, dispatch: t }) => {
    let i = e.field(Zs, !1);
    if (!i || n < 0 && i.active == 0)
      return !1;
    let r = i.active + n, s = n > 0 && !i.ranges.some((o) => o.field == r + n);
    return t(e.update({
      selection: Of(i.ranges, r),
      effects: co.of(s ? null : new zr(i.ranges, r)),
      scrollIntoView: !0
    })), !0;
  };
}
const kL = ({ state: n, dispatch: e }) => n.field(Zs, !1) ? (e(n.update({ effects: co.of(null) })), !0) : !1, SL = /* @__PURE__ */ kx(1), wL = /* @__PURE__ */ kx(-1), vL = [
  { key: "Tab", run: SL, shift: wL },
  { key: "Escape", run: kL }
], Zm = /* @__PURE__ */ K.define({
  combine(n) {
    return n.length ? n[0] : vL;
  }
}), EL = /* @__PURE__ */ ri.highest(/* @__PURE__ */ Mr.compute([Zm], (n) => n.facet(Zm)));
function Nt(n, e) {
  return Object.assign(Object.assign({}, e), { apply: xL(n) });
}
const _L = /* @__PURE__ */ U.domEventHandlers({
  mousedown(n, e) {
    let t = e.state.field(Zs, !1), i;
    if (!t || (i = e.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
      return !1;
    let r = t.ranges.find((s) => s.from <= i && s.to >= i);
    return !r || r.field == t.active ? !1 : (e.dispatch({
      selection: Of(t.ranges, r.field),
      effects: co.of(t.ranges.some((s) => s.field > r.field) ? new zr(t.ranges, r.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), Xs = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, Ni = /* @__PURE__ */ me.define({
  map(n, e) {
    let t = e.mapPos(n, -1, yt.TrackAfter);
    return t ?? void 0;
  }
}), bf = /* @__PURE__ */ new class extends Di {
}();
bf.startSide = 1;
bf.endSide = -1;
const Sx = /* @__PURE__ */ mt.define({
  create() {
    return $e.empty;
  },
  update(n, e) {
    if (n = n.map(e.changes), e.selection) {
      let t = e.state.doc.lineAt(e.selection.main.head);
      n = n.update({ filter: (i) => i >= t.from && i <= t.to });
    }
    for (let t of e.effects)
      t.is(Ni) && (n = n.update({ add: [bf.range(t.value, t.value + 1)] }));
    return n;
  }
});
function QL() {
  return [TL, Sx];
}
const gc = "()[]{}<>«»»«［］｛｝";
function wx(n) {
  for (let e = 0; e < gc.length; e += 2)
    if (gc.charCodeAt(e) == n)
      return gc.charAt(e + 1);
  return Rh(n < 128 ? n : n + 1);
}
function vx(n, e) {
  return n.languageDataAt("closeBrackets", e)[0] || Xs;
}
const CL = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), TL = /* @__PURE__ */ U.inputHandler.of((n, e, t, i) => {
  if ((CL ? n.composing : n.compositionStarted) || n.state.readOnly)
    return !1;
  let r = n.state.selection.main;
  if (i.length > 2 || i.length == 2 && Pn(Lt(i, 0)) == 1 || e != r.from || t != r.to)
    return !1;
  let s = $L(n.state, i);
  return s ? (n.dispatch(s), !0) : !1;
}), PL = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let i = vx(n, n.selection.main.head).brackets || Xs.brackets, r = null, s = n.changeByRange((o) => {
    if (o.empty) {
      let a = RL(n.doc, o.head);
      for (let l of i)
        if (l == a && ml(n.doc, o.head) == wx(Lt(l, 0)))
          return {
            changes: { from: o.head - l.length, to: o.head + l.length },
            range: I.cursor(o.head - l.length)
          };
    }
    return { range: r = o };
  });
  return r || e(n.update(s, { scrollIntoView: !0, userEvent: "delete.backward" })), !r;
}, AL = [
  { key: "Backspace", run: PL }
];
function $L(n, e) {
  let t = vx(n, n.selection.main.head), i = t.brackets || Xs.brackets;
  for (let r of i) {
    let s = wx(Lt(r, 0));
    if (e == r)
      return s == r ? IL(n, r, i.indexOf(r + r + r) > -1, t) : ML(n, r, s, t.before || Xs.before);
    if (e == s && Ex(n, n.selection.main.from))
      return NL(n, r, s);
  }
  return null;
}
function Ex(n, e) {
  let t = !1;
  return n.field(Sx).between(0, n.doc.length, (i) => {
    i == e && (t = !0);
  }), t;
}
function ml(n, e) {
  let t = n.sliceString(e, e + 2);
  return t.slice(0, Pn(Lt(t, 0)));
}
function RL(n, e) {
  let t = n.sliceString(e - 2, e);
  return Pn(Lt(t, 0)) == t.length ? t : t.slice(1);
}
function ML(n, e, t, i) {
  let r = null, s = n.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: e, from: o.from }, { insert: t, from: o.to }],
        effects: Ni.of(o.to + e.length),
        range: I.range(o.anchor + e.length, o.head + e.length)
      };
    let a = ml(n.doc, o.head);
    return !a || /\s/.test(a) || i.indexOf(a) > -1 ? {
      changes: { insert: e + t, from: o.head },
      effects: Ni.of(o.head + e.length),
      range: I.cursor(o.head + e.length)
    } : { range: r = o };
  });
  return r ? null : n.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function NL(n, e, t) {
  let i = null, r = n.changeByRange((s) => s.empty && ml(n.doc, s.head) == t ? {
    changes: { from: s.head, to: s.head + t.length, insert: t },
    range: I.cursor(s.head + t.length)
  } : i = { range: s });
  return i ? null : n.update(r, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function IL(n, e, t, i) {
  let r = i.stringPrefixes || Xs.stringPrefixes, s = null, o = n.changeByRange((a) => {
    if (!a.empty)
      return {
        changes: [{ insert: e, from: a.from }, { insert: e, from: a.to }],
        effects: Ni.of(a.to + e.length),
        range: I.range(a.anchor + e.length, a.head + e.length)
      };
    let l = a.head, c = ml(n.doc, l), u;
    if (c == e) {
      if (Xm(n, l))
        return {
          changes: { insert: e + e, from: l },
          effects: Ni.of(l + e.length),
          range: I.cursor(l + e.length)
        };
      if (Ex(n, l)) {
        let f = t && n.sliceDoc(l, l + e.length * 3) == e + e + e ? e + e + e : e;
        return {
          changes: { from: l, to: l + f.length, insert: f },
          range: I.cursor(l + f.length)
        };
      }
    } else {
      if (t && n.sliceDoc(l - 2 * e.length, l) == e + e && (u = qm(n, l - 2 * e.length, r)) > -1 && Xm(n, u))
        return {
          changes: { insert: e + e + e + e, from: l },
          effects: Ni.of(l + e.length),
          range: I.cursor(l + e.length)
        };
      if (n.charCategorizer(l)(c) != We.Word && qm(n, l, r) > -1 && !LL(n, l, e, r))
        return {
          changes: { insert: e + e, from: l },
          effects: Ni.of(l + e.length),
          range: I.cursor(l + e.length)
        };
    }
    return { range: s = a };
  });
  return s ? null : n.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function Xm(n, e) {
  let t = Fe(n).resolveInner(e + 1);
  return t.parent && t.from == e;
}
function LL(n, e, t, i) {
  let r = Fe(n).resolveInner(e, -1), s = i.reduce((o, a) => Math.max(o, a.length), 0);
  for (let o = 0; o < 5; o++) {
    let a = n.sliceDoc(r.from, Math.min(r.to, r.from + t.length + s)), l = a.indexOf(t);
    if (!l || l > -1 && i.indexOf(a.slice(0, l)) > -1) {
      let u = r.firstChild;
      for (; u && u.from == r.from && u.to - u.from > t.length + l; ) {
        if (n.sliceDoc(u.to - t.length, u.to) == t)
          return !1;
        u = u.firstChild;
      }
      return !0;
    }
    let c = r.to == e && r.parent;
    if (!c)
      break;
    r = c;
  }
  return !1;
}
function qm(n, e, t) {
  let i = n.charCategorizer(e);
  if (i(n.sliceDoc(e - 1, e)) != We.Word)
    return e;
  for (let r of t) {
    let s = e - r.length;
    if (n.sliceDoc(s, e) == r && i(n.sliceDoc(s - 1, s)) != We.Word)
      return s;
  }
  return -1;
}
function DL(n = {}) {
  return [
    mL,
    Bt,
    pt.of(n),
    dL,
    BL,
    xx
  ];
}
const _x = [
  { key: "Ctrl-Space", run: zm },
  { mac: "Alt-`", run: zm },
  { key: "Escape", run: cL },
  { key: "ArrowDown", run: /* @__PURE__ */ Ho(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ Ho(!1) },
  { key: "PageDown", run: /* @__PURE__ */ Ho(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ Ho(!1, "page") },
  { key: "Enter", run: lL }
], BL = /* @__PURE__ */ ri.highest(/* @__PURE__ */ Mr.computeN([pt], (n) => n.facet(pt).defaultKeymap ? [_x] : []));
class Vm {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.diagnostic = i;
  }
}
class $i {
  constructor(e, t, i) {
    this.diagnostics = e, this.panel = t, this.selected = i;
  }
  static init(e, t, i) {
    let r = i.facet(qs).markerFilter;
    r && (e = r(e, i));
    let s = e.slice().sort((u, h) => u.from - h.from || u.to - h.to), o = new ei(), a = [], l = 0;
    for (let u = 0; ; ) {
      let h = u == s.length ? null : s[u];
      if (!h && !a.length)
        break;
      let f, d;
      for (a.length ? (f = l, d = a.reduce((m, O) => Math.min(m, O.to), h && h.from > f ? h.from : 1e8)) : (f = h.from, d = h.to, a.push(h), u++); u < s.length; ) {
        let m = s[u];
        if (m.from == f && (m.to > m.from || m.to == f))
          a.push(m), u++, d = Math.min(m.to, d);
        else {
          d = Math.min(m.from, d);
          break;
        }
      }
      let p = KL(a);
      if (a.some((m) => m.from == m.to || m.from == m.to - 1 && i.doc.lineAt(m.from).to == m.from))
        o.add(f, f, ae.widget({
          widget: new GL(p),
          diagnostics: a.slice()
        }));
      else {
        let m = a.reduce((O, g) => g.markClass ? O + " " + g.markClass : O, "");
        o.add(f, d, ae.mark({
          class: "cm-lintRange cm-lintRange-" + p + m,
          diagnostics: a.slice(),
          inclusiveEnd: a.some((O) => O.to > d)
        }));
      }
      l = d;
      for (let m = 0; m < a.length; m++)
        a[m].to <= l && a.splice(m--, 1);
    }
    let c = o.finish();
    return new $i(c, t, wr(c));
  }
}
function wr(n, e = null, t = 0) {
  let i = null;
  return n.between(t, 1e9, (r, s, { spec: o }) => {
    if (!(e && o.diagnostics.indexOf(e) < 0))
      if (!i)
        i = new Vm(r, s, e || o.diagnostics[0]);
      else {
        if (o.diagnostics.indexOf(i.diagnostic) < 0)
          return !1;
        i = new Vm(i.from, s, i.diagnostic);
      }
  }), i;
}
function zL(n, e) {
  let t = e.pos, i = e.end || t, r = n.state.facet(qs).hideOn(n, t, i);
  if (r != null)
    return r;
  let s = n.startState.doc.lineAt(e.pos);
  return !!(n.effects.some((o) => o.is(Qx)) || n.changes.touchesRange(s.from, Math.max(s.to, i)));
}
function ZL(n, e) {
  return n.field(Jt, !1) ? e : e.concat(me.appendConfig.of(JL));
}
const Qx = /* @__PURE__ */ me.define(), yf = /* @__PURE__ */ me.define(), Cx = /* @__PURE__ */ me.define(), Jt = /* @__PURE__ */ mt.define({
  create() {
    return new $i(ae.none, null, null);
  },
  update(n, e) {
    if (e.docChanged && n.diagnostics.size) {
      let t = n.diagnostics.map(e.changes), i = null, r = n.panel;
      if (n.selected) {
        let s = e.changes.mapPos(n.selected.from, 1);
        i = wr(t, n.selected.diagnostic, s) || wr(t, null, s);
      }
      !t.size && r && e.state.facet(qs).autoPanel && (r = null), n = new $i(t, r, i);
    }
    for (let t of e.effects)
      if (t.is(Qx)) {
        let i = e.state.facet(qs).autoPanel ? t.value.length ? Vs.open : null : n.panel;
        n = $i.init(t.value, i, e.state);
      } else t.is(yf) ? n = new $i(n.diagnostics, t.value ? Vs.open : null, n.selected) : t.is(Cx) && (n = new $i(n.diagnostics, n.panel, t.value));
    return n;
  },
  provide: (n) => [
    Rs.from(n, (e) => e.panel),
    U.decorations.from(n, (e) => e.diagnostics)
  ]
}), XL = /* @__PURE__ */ ae.mark({ class: "cm-lintRange cm-lintRange-active" });
function qL(n, e, t) {
  let { diagnostics: i } = n.state.field(Jt), r, s = -1, o = -1;
  i.between(e - (t < 0 ? 1 : 0), e + (t > 0 ? 1 : 0), (l, c, { spec: u }) => {
    if (e >= l && e <= c && (l == c || (e > l || t > 0) && (e < c || t < 0)))
      return r = u.diagnostics, s = l, o = c, !1;
  });
  let a = n.state.facet(qs).tooltipFilter;
  return r && a && (r = a(r, n.state)), r ? {
    pos: s,
    end: o,
    above: n.state.doc.lineAt(s).to < o,
    create() {
      return { dom: VL(n, r) };
    }
  } : null;
}
function VL(n, e) {
  return De("ul", { class: "cm-tooltip-lint" }, e.map((t) => Px(n, t, !1)));
}
const YL = (n) => {
  let e = n.state.field(Jt, !1);
  (!e || !e.panel) && n.dispatch({ effects: ZL(n.state, [yf.of(!0)]) });
  let t = $s(n, Vs.open);
  return t && t.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, Ym = (n) => {
  let e = n.state.field(Jt, !1);
  return !e || !e.panel ? !1 : (n.dispatch({ effects: yf.of(!1) }), !0);
}, FL = (n) => {
  let e = n.state.field(Jt, !1);
  if (!e)
    return !1;
  let t = n.state.selection.main, i = e.diagnostics.iter(t.to + 1);
  return !i.value && (i = e.diagnostics.iter(0), !i.value || i.from == t.from && i.to == t.to) ? !1 : (n.dispatch({ selection: { anchor: i.from, head: i.to }, scrollIntoView: !0 }), !0);
}, UL = [
  { key: "Mod-Shift-m", run: YL, preventDefault: !0 },
  { key: "F8", run: FL }
], qs = /* @__PURE__ */ K.define({
  combine(n) {
    return Object.assign({ sources: n.map((e) => e.source).filter((e) => e != null) }, zn(n.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (e, t) => e ? t ? (i) => e(i) || t(i) : e : t
    }));
  }
});
function Tx(n) {
  let e = [];
  if (n)
    e: for (let { name: t } of n) {
      for (let i = 0; i < t.length; i++) {
        let r = t[i];
        if (/[a-zA-Z]/.test(r) && !e.some((s) => s.toLowerCase() == r.toLowerCase())) {
          e.push(r);
          continue e;
        }
      }
      e.push("");
    }
  return e;
}
function Px(n, e, t) {
  var i;
  let r = t ? Tx(e.actions) : [];
  return De("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, De("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage(n) : e.message), (i = e.actions) === null || i === void 0 ? void 0 : i.map((s, o) => {
    let a = !1, l = (f) => {
      if (f.preventDefault(), a)
        return;
      a = !0;
      let d = wr(n.state.field(Jt).diagnostics, e);
      d && s.apply(n, d.from, d.to);
    }, { name: c } = s, u = r[o] ? c.indexOf(r[o]) : -1, h = u < 0 ? c : [
      c.slice(0, u),
      De("u", c.slice(u, u + 1)),
      c.slice(u + 1)
    ];
    return De("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: l,
      onmousedown: l,
      "aria-label": ` Action: ${c}${u < 0 ? "" : ` (access key "${r[o]})"`}.`
    }, h);
  }), e.source && De("div", { class: "cm-diagnosticSource" }, e.source));
}
class GL extends Zn {
  constructor(e) {
    super(), this.sev = e;
  }
  eq(e) {
    return e.sev == this.sev;
  }
  toDOM() {
    return De("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
}
class Fm {
  constructor(e, t) {
    this.diagnostic = t, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = Px(e, t, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class Vs {
  constructor(e) {
    this.view = e, this.items = [];
    let t = (r) => {
      if (r.keyCode == 27)
        Ym(this.view), this.view.focus();
      else if (r.keyCode == 38 || r.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (r.keyCode == 40 || r.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (r.keyCode == 36)
        this.moveSelection(0);
      else if (r.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (r.keyCode == 13)
        this.view.focus();
      else if (r.keyCode >= 65 && r.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: s } = this.items[this.selectedIndex], o = Tx(s.actions);
        for (let a = 0; a < o.length; a++)
          if (o[a].toUpperCase().charCodeAt(0) == r.keyCode) {
            let l = wr(this.view.state.field(Jt).diagnostics, s);
            l && s.actions[a].apply(e, l.from, l.to);
          }
      } else
        return;
      r.preventDefault();
    }, i = (r) => {
      for (let s = 0; s < this.items.length; s++)
        this.items[s].dom.contains(r.target) && this.moveSelection(s);
    };
    this.list = De("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: t,
      onclick: i
    }), this.dom = De("div", { class: "cm-panel-lint" }, this.list, De("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => Ym(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(Jt).selected;
    if (!e)
      return -1;
    for (let t = 0; t < this.items.length; t++)
      if (this.items[t].diagnostic == e.diagnostic)
        return t;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: t } = this.view.state.field(Jt), i = 0, r = !1, s = null, o = /* @__PURE__ */ new Set();
    for (e.between(0, this.view.state.doc.length, (a, l, { spec: c }) => {
      for (let u of c.diagnostics) {
        if (o.has(u))
          continue;
        o.add(u);
        let h = -1, f;
        for (let d = i; d < this.items.length; d++)
          if (this.items[d].diagnostic == u) {
            h = d;
            break;
          }
        h < 0 ? (f = new Fm(this.view, u), this.items.splice(i, 0, f), r = !0) : (f = this.items[h], h > i && (this.items.splice(i, h - i), r = !0)), t && f.diagnostic == t.diagnostic ? f.dom.hasAttribute("aria-selected") || (f.dom.setAttribute("aria-selected", "true"), s = f) : f.dom.hasAttribute("aria-selected") && f.dom.removeAttribute("aria-selected"), i++;
      }
    }); i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      r = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new Fm(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), r = !0), s ? (this.list.setAttribute("aria-activedescendant", s.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: s.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: a, panel: l }) => {
        let c = l.height / this.list.offsetHeight;
        a.top < l.top ? this.list.scrollTop -= (l.top - a.top) / c : a.bottom > l.bottom && (this.list.scrollTop += (a.bottom - l.bottom) / c);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), r && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function t() {
      let i = e;
      e = i.nextSibling, i.remove();
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; e != i.dom; )
          t();
        e = i.dom.nextSibling;
      } else
        this.list.insertBefore(i.dom, e);
    for (; e; )
      t();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let t = this.view.state.field(Jt), i = wr(t.diagnostics, this.items[e].diagnostic);
    i && this.view.dispatch({
      selection: { anchor: i.from, head: i.to },
      scrollIntoView: !0,
      effects: Cx.of(i)
    });
  }
  static open(e) {
    return new Vs(e);
  }
}
function WL(n, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(n)}</svg>')`;
}
function Ko(n) {
  return WL(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const jL = /* @__PURE__ */ U.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Ko("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Ko("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Ko("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ Ko("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function HL(n) {
  return n == "error" ? 4 : n == "warning" ? 3 : n == "info" ? 2 : 1;
}
function KL(n) {
  let e = "hint", t = 1;
  for (let i of n) {
    let r = HL(i.severity);
    r > t && (t = r, e = i.severity);
  }
  return e;
}
const JL = [
  Jt,
  /* @__PURE__ */ U.decorations.compute([Jt], (n) => {
    let { selected: e, panel: t } = n.field(Jt);
    return !e || !t || e.from == e.to ? ae.none : ae.set([
      XL.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ IR(qL, { hideOn: zL }),
  jL
];
var Um = function(e) {
  e === void 0 && (e = {});
  var {
    crosshairCursor: t = !1
  } = e, i = [];
  e.closeBracketsKeymap !== !1 && (i = i.concat(AL)), e.defaultKeymap !== !1 && (i = i.concat(pI)), e.searchKeymap !== !1 && (i = i.concat(zI)), e.historyKeymap !== !1 && (i = i.concat(wN)), e.foldKeymap !== !1 && (i = i.concat(DM)), e.completionKeymap !== !1 && (i = i.concat(_x)), e.lintKeymap !== !1 && (i = i.concat(UL));
  var r = [];
  return e.lineNumbers !== !1 && r.push(UR()), e.highlightActiveLineGutter !== !1 && r.push(jR()), e.highlightSpecialChars !== !1 && r.push(hR()), e.history !== !1 && r.push(pN()), e.foldGutter !== !1 && r.push(XM()), e.drawSelection !== !1 && r.push(eR()), e.dropCursor !== !1 && r.push(sR()), e.allowMultipleSelections !== !1 && r.push(we.allowMultipleSelections.of(!0)), e.indentOnInput !== !1 && r.push(PM()), e.syntaxHighlighting !== !1 && r.push(v0(FM, {
    fallback: !0
  })), e.bracketMatching !== !1 && r.push(JM()), e.closeBrackets !== !1 && r.push(QL()), e.autocompletion !== !1 && r.push(DL()), e.rectangularSelection !== !1 && r.push(ER()), t !== !1 && r.push(CR()), e.highlightActiveLine !== !1 && r.push(OR()), e.highlightSelectionMatches !== !1 && r.push(kI()), e.tabSize && typeof e.tabSize == "number" && r.push(Ir.of(" ".repeat(e.tabSize))), r.concat([Mr.of(i.flat())]).filter(Boolean);
};
const e2 = "#e5c07b", Gm = "#e06c75", t2 = "#56b6c2", n2 = "#ffffff", pa = "#abb2bf", Hu = "#7d8799", i2 = "#61afef", r2 = "#98c379", Wm = "#d19a66", s2 = "#c678dd", o2 = "#21252b", jm = "#2c313a", Hm = "#282c34", Oc = "#353a42", a2 = "#3E4451", Km = "#528bff", l2 = /* @__PURE__ */ U.theme({
  "&": {
    color: pa,
    backgroundColor: Hm
  },
  ".cm-content": {
    caretColor: Km
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: Km },
  "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: a2 },
  ".cm-panels": { backgroundColor: o2, color: pa },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847"
  },
  ".cm-gutters": {
    backgroundColor: Hm,
    color: Hu,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: jm
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: Oc
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: Oc,
    borderBottomColor: Oc
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: jm,
      color: pa
    }
  }
}, { dark: !0 }), c2 = /* @__PURE__ */ oo.define([
  {
    tag: k.keyword,
    color: s2
  },
  {
    tag: [k.name, k.deleted, k.character, k.propertyName, k.macroName],
    color: Gm
  },
  {
    tag: [/* @__PURE__ */ k.function(k.variableName), k.labelName],
    color: i2
  },
  {
    tag: [k.color, /* @__PURE__ */ k.constant(k.name), /* @__PURE__ */ k.standard(k.name)],
    color: Wm
  },
  {
    tag: [/* @__PURE__ */ k.definition(k.name), k.separator],
    color: pa
  },
  {
    tag: [k.typeName, k.className, k.number, k.changed, k.annotation, k.modifier, k.self, k.namespace],
    color: e2
  },
  {
    tag: [k.operator, k.operatorKeyword, k.url, k.escape, k.regexp, k.link, /* @__PURE__ */ k.special(k.string)],
    color: t2
  },
  {
    tag: [k.meta, k.comment],
    color: Hu
  },
  {
    tag: k.strong,
    fontWeight: "bold"
  },
  {
    tag: k.emphasis,
    fontStyle: "italic"
  },
  {
    tag: k.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: k.link,
    color: Hu,
    textDecoration: "underline"
  },
  {
    tag: k.heading,
    fontWeight: "bold",
    color: Gm
  },
  {
    tag: [k.atom, k.bool, /* @__PURE__ */ k.special(k.variableName)],
    color: Wm
  },
  {
    tag: [k.processingInstruction, k.string, k.inserted],
    color: r2
  },
  {
    tag: k.invalid,
    color: n2
  }
]), u2 = [l2, /* @__PURE__ */ v0(c2)];
var h2 = U.theme({
  "&": {
    backgroundColor: "#fff"
  }
}, {
  dark: !1
}), f2 = function(e) {
  e === void 0 && (e = {});
  var {
    indentWithTab: t = !0,
    editable: i = !0,
    readOnly: r = !1,
    theme: s = "light",
    placeholder: o = "",
    basicSetup: a = !0
  } = e, l = [];
  switch (t && l.unshift(Mr.of([mI])), a && (typeof a == "boolean" ? l.unshift(Um()) : l.unshift(Um(a))), o && l.unshift(kR(o)), s) {
    case "light":
      l.push(h2);
      break;
    case "dark":
      l.push(u2);
      break;
    case "none":
      break;
    default:
      l.push(s);
      break;
  }
  return i === !1 && l.push(U.editable.of(!1)), r && l.push(we.readOnly.of(!0)), [...l];
}, d2 = (n) => ({
  line: n.state.doc.lineAt(n.state.selection.main.from),
  lineCount: n.state.doc.lines,
  lineBreak: n.state.lineBreak,
  length: n.state.doc.length,
  readOnly: n.state.readOnly,
  tabSize: n.state.tabSize,
  selection: n.state.selection,
  selectionAsSingle: n.state.selection.asSingle().main,
  ranges: n.state.selection.ranges,
  selectionCode: n.state.sliceDoc(n.state.selection.main.from, n.state.selection.main.to),
  selections: n.state.selection.ranges.map((e) => n.state.sliceDoc(e.from, e.to)),
  selectedText: n.state.selection.ranges.some((e) => !e.empty)
});
class p2 {
  constructor(e, t) {
    this.timeLeftMS = void 0, this.timeoutMS = void 0, this.isCancelled = !1, this.isTimeExhausted = !1, this.callbacks = [], this.timeLeftMS = t, this.timeoutMS = t, this.callbacks.push(e);
  }
  tick() {
    if (!this.isCancelled && !this.isTimeExhausted && (this.timeLeftMS--, this.timeLeftMS <= 0)) {
      this.isTimeExhausted = !0;
      var e = this.callbacks.slice();
      this.callbacks.length = 0, e.forEach((t) => {
        try {
          t();
        } catch (i) {
          console.error("TimeoutLatch callback error:", i);
        }
      });
    }
  }
  cancel() {
    this.isCancelled = !0, this.callbacks.length = 0;
  }
  reset() {
    this.timeLeftMS = this.timeoutMS, this.isCancelled = !1, this.isTimeExhausted = !1;
  }
  get isDone() {
    return this.isCancelled || this.isTimeExhausted;
  }
}
class Jm {
  constructor() {
    this.interval = null, this.latches = /* @__PURE__ */ new Set();
  }
  add(e) {
    this.latches.add(e), this.start();
  }
  remove(e) {
    this.latches.delete(e), this.latches.size === 0 && this.stop();
  }
  start() {
    this.interval === null && (this.interval = setInterval(() => {
      this.latches.forEach((e) => {
        e.tick(), e.isDone && this.remove(e);
      });
    }, 1));
  }
  stop() {
    this.interval !== null && (clearInterval(this.interval), this.interval = null);
  }
}
var bc = null, m2 = () => typeof window > "u" ? new Jm() : (bc || (bc = new Jm()), bc), eg = Bn.define(), g2 = 200, O2 = [];
function b2(n) {
  var {
    value: e,
    selection: t,
    onChange: i,
    onStatistics: r,
    onCreateEditor: s,
    onUpdate: o,
    extensions: a = O2,
    autoFocus: l,
    theme: c = "light",
    height: u = null,
    minHeight: h = null,
    maxHeight: f = null,
    width: d = null,
    minWidth: p = null,
    maxWidth: m = null,
    placeholder: O = "",
    editable: g = !0,
    readOnly: y = !1,
    indentWithTab: S = !0,
    basicSetup: _ = !0,
    root: v,
    initialState: x
  } = n, [C, T] = He(), [A, Q] = He(), [M, R] = He(), L = He(() => ({
    current: null
  }))[0], P = He(() => ({
    current: null
  }))[0], $ = U.theme({
    "&": {
      height: u,
      minHeight: h,
      maxHeight: f,
      width: d,
      minWidth: p,
      maxWidth: m
    },
    "& .cm-scroller": {
      height: "100% !important"
    }
  }), Y = U.updateListener.of((ee) => {
    if (ee.docChanged && typeof i == "function" && // Fix echoing of the remote changes:
    // If transaction is market as remote we don't have to call `onChange` handler again
    !ee.transactions.some((j) => j.annotation(eg))) {
      L.current ? L.current.reset() : (L.current = new p2(() => {
        if (P.current) {
          var j = P.current;
          P.current = null, j();
        }
        L.current = null;
      }, g2), m2().add(L.current));
      var b = ee.state.doc, Z = b.toString();
      i(Z, ee);
    }
    r && r(d2(ee));
  }), ie = f2({
    theme: c,
    editable: g,
    readOnly: y,
    placeholder: O,
    indentWithTab: S,
    basicSetup: _
  }), D = [Y, $, ...ie];
  return o && typeof o == "function" && D.push(U.updateListener.of(o)), D = D.concat(a), lS(() => {
    if (C && !M) {
      var ee = {
        doc: e,
        selection: t,
        extensions: D
      }, b = x ? we.fromJSON(x.json, ee, x.fields) : we.create(ee);
      if (R(b), !A) {
        var Z = new U({
          state: b,
          parent: C,
          root: v
        });
        Q(Z), s && s(Z, b);
      }
    }
    return () => {
      A && (R(void 0), Q(void 0));
    };
  }, [C, M]), dt(() => {
    n.container && T(n.container);
  }, [n.container]), dt(() => () => {
    A && (A.destroy(), Q(void 0)), L.current && (L.current.cancel(), L.current = null);
  }, [A]), dt(() => {
    l && A && A.focus();
  }, [l, A]), dt(() => {
    A && A.dispatch({
      effects: me.reconfigure.of(D)
    });
  }, [c, a, u, h, f, d, p, m, O, g, y, S, _, i, o]), dt(() => {
    if (e !== void 0) {
      var ee = A ? A.state.doc.toString() : "";
      if (A && e !== ee) {
        var b = L.current && !L.current.isDone, Z = () => {
          A && e !== A.state.doc.toString() && A.dispatch({
            changes: {
              from: 0,
              to: A.state.doc.toString().length,
              insert: e || ""
            },
            annotations: [eg.of(!0)]
          });
        };
        b ? P.current = Z : Z();
      }
    }
  }, [e, A]), {
    state: M,
    setState: R,
    view: A,
    setView: Q,
    container: C,
    setContainer: T
  };
}
var y2 = ["className", "value", "selection", "extensions", "onChange", "onStatistics", "onCreateEditor", "onUpdate", "autoFocus", "theme", "height", "minHeight", "maxHeight", "width", "minWidth", "maxWidth", "basicSetup", "placeholder", "indentWithTab", "editable", "readOnly", "root", "initialState"], Ax = /* @__PURE__ */ uh((n, e) => {
  var {
    className: t,
    value: i = "",
    selection: r,
    extensions: s = [],
    onChange: o,
    onStatistics: a,
    onCreateEditor: l,
    onUpdate: c,
    autoFocus: u,
    theme: h = "light",
    height: f,
    minHeight: d,
    maxHeight: p,
    width: m,
    minWidth: O,
    maxWidth: g,
    basicSetup: y,
    placeholder: S,
    indentWithTab: _,
    editable: v,
    readOnly: x,
    root: C,
    initialState: T
  } = n, A = WP(n, y2), Q = ft(null), {
    state: M,
    view: R,
    container: L,
    setContainer: P
  } = b2({
    root: C,
    value: i,
    autoFocus: u,
    theme: h,
    height: f,
    minHeight: d,
    maxHeight: p,
    width: m,
    minWidth: O,
    maxWidth: g,
    basicSetup: y,
    placeholder: S,
    indentWithTab: _,
    editable: v,
    readOnly: x,
    selection: r,
    onChange: o,
    onStatistics: a,
    onCreateEditor: l,
    onUpdate: c,
    extensions: s,
    initialState: T
  });
  cS(e, () => ({
    editor: Q.current,
    state: M,
    view: R
  }), [Q, L, M, R]);
  var $ = Kt((ie) => {
    Q.current = ie, P(ie);
  }, [P]);
  if (typeof i != "string")
    throw new Error("value must be typeof string but got " + typeof i);
  var Y = typeof h == "string" ? "cm-theme-" + h : "cm-theme";
  return /* @__PURE__ */ ce.jsx("div", nu({
    ref: $,
    className: "" + Y + (t ? " " + t : "")
  }, A));
});
Ax.displayName = "CodeMirror";
class Ga {
  static create(e, t, i, r, s) {
    let o = r + (r << 8) + e + (t << 4) | 0;
    return new Ga(e, t, i, o, s, [], []);
  }
  constructor(e, t, i, r, s, o, a) {
    this.type = e, this.value = t, this.from = i, this.hash = r, this.end = s, this.children = o, this.positions = a, this.hashProp = [[pe.contextHash, r]];
  }
  addChild(e, t) {
    e.prop(pe.contextHash) != this.hash && (e = new Me(e.type, e.children, e.positions, e.length, this.hashProp)), this.children.push(e), this.positions.push(t);
  }
  toTree(e, t = this.end) {
    let i = this.children.length - 1;
    return i >= 0 && (t = Math.max(t, this.positions[i] + this.children[i].length + this.from)), new Me(e.types[this.type], this.children, this.positions, t - this.from).balance({
      makeTree: (r, s, o) => new Me(ut.none, r, s, o, this.hashProp)
    });
  }
}
var X;
(function(n) {
  n[n.Document = 1] = "Document", n[n.CodeBlock = 2] = "CodeBlock", n[n.FencedCode = 3] = "FencedCode", n[n.Blockquote = 4] = "Blockquote", n[n.HorizontalRule = 5] = "HorizontalRule", n[n.BulletList = 6] = "BulletList", n[n.OrderedList = 7] = "OrderedList", n[n.ListItem = 8] = "ListItem", n[n.ATXHeading1 = 9] = "ATXHeading1", n[n.ATXHeading2 = 10] = "ATXHeading2", n[n.ATXHeading3 = 11] = "ATXHeading3", n[n.ATXHeading4 = 12] = "ATXHeading4", n[n.ATXHeading5 = 13] = "ATXHeading5", n[n.ATXHeading6 = 14] = "ATXHeading6", n[n.SetextHeading1 = 15] = "SetextHeading1", n[n.SetextHeading2 = 16] = "SetextHeading2", n[n.HTMLBlock = 17] = "HTMLBlock", n[n.LinkReference = 18] = "LinkReference", n[n.Paragraph = 19] = "Paragraph", n[n.CommentBlock = 20] = "CommentBlock", n[n.ProcessingInstructionBlock = 21] = "ProcessingInstructionBlock", n[n.Escape = 22] = "Escape", n[n.Entity = 23] = "Entity", n[n.HardBreak = 24] = "HardBreak", n[n.Emphasis = 25] = "Emphasis", n[n.StrongEmphasis = 26] = "StrongEmphasis", n[n.Link = 27] = "Link", n[n.Image = 28] = "Image", n[n.InlineCode = 29] = "InlineCode", n[n.HTMLTag = 30] = "HTMLTag", n[n.Comment = 31] = "Comment", n[n.ProcessingInstruction = 32] = "ProcessingInstruction", n[n.Autolink = 33] = "Autolink", n[n.HeaderMark = 34] = "HeaderMark", n[n.QuoteMark = 35] = "QuoteMark", n[n.ListMark = 36] = "ListMark", n[n.LinkMark = 37] = "LinkMark", n[n.EmphasisMark = 38] = "EmphasisMark", n[n.CodeMark = 39] = "CodeMark", n[n.CodeText = 40] = "CodeText", n[n.CodeInfo = 41] = "CodeInfo", n[n.LinkTitle = 42] = "LinkTitle", n[n.LinkLabel = 43] = "LinkLabel", n[n.URL = 44] = "URL";
})(X || (X = {}));
class x2 {
  /**
  @internal
  */
  constructor(e, t) {
    this.start = e, this.content = t, this.marks = [], this.parsers = [];
  }
}
class k2 {
  constructor() {
    this.text = "", this.baseIndent = 0, this.basePos = 0, this.depth = 0, this.markers = [], this.pos = 0, this.indent = 0, this.next = -1;
  }
  /**
  @internal
  */
  forward() {
    this.basePos > this.pos && this.forwardInner();
  }
  /**
  @internal
  */
  forwardInner() {
    let e = this.skipSpace(this.basePos);
    this.indent = this.countIndent(e, this.pos, this.indent), this.pos = e, this.next = e == this.text.length ? -1 : this.text.charCodeAt(e);
  }
  /**
  Skip whitespace after the given position, return the position of
  the next non-space character or the end of the line if there's
  only space after `from`.
  */
  skipSpace(e) {
    return Ss(this.text, e);
  }
  /**
  @internal
  */
  reset(e) {
    for (this.text = e, this.baseIndent = this.basePos = this.pos = this.indent = 0, this.forwardInner(), this.depth = 1; this.markers.length; )
      this.markers.pop();
  }
  /**
  Move the line's base position forward to the given position.
  This should only be called by composite [block
  parsers](#BlockParser.parse) or [markup skipping
  functions](#NodeSpec.composite).
  */
  moveBase(e) {
    this.basePos = e, this.baseIndent = this.countIndent(e, this.pos, this.indent);
  }
  /**
  Move the line's base position forward to the given _column_.
  */
  moveBaseColumn(e) {
    this.baseIndent = e, this.basePos = this.findColumn(e);
  }
  /**
  Store a composite-block-level marker. Should be called from
  [markup skipping functions](#NodeSpec.composite) when they
  consume any non-whitespace characters.
  */
  addMarker(e) {
    this.markers.push(e);
  }
  /**
  Find the column position at `to`, optionally starting at a given
  position and column.
  */
  countIndent(e, t = 0, i = 0) {
    for (let r = t; r < e; r++)
      i += this.text.charCodeAt(r) == 9 ? 4 - i % 4 : 1;
    return i;
  }
  /**
  Find the position corresponding to the given column.
  */
  findColumn(e) {
    let t = 0;
    for (let i = 0; t < this.text.length && i < e; t++)
      i += this.text.charCodeAt(t) == 9 ? 4 - i % 4 : 1;
    return t;
  }
  /**
  @internal
  */
  scrub() {
    if (!this.baseIndent)
      return this.text;
    let e = "";
    for (let t = 0; t < this.basePos; t++)
      e += " ";
    return e + this.text.slice(this.basePos);
  }
}
function tg(n, e, t) {
  if (t.pos == t.text.length || n != e.block && t.indent >= e.stack[t.depth + 1].value + t.baseIndent)
    return !0;
  if (t.indent >= t.baseIndent + 4)
    return !1;
  let i = (n.type == X.OrderedList ? Sf : kf)(t, e, !1);
  return i > 0 && (n.type != X.BulletList || xf(t, e, !1) < 0) && t.text.charCodeAt(t.pos + i - 1) == n.value;
}
const $x = {
  [X.Blockquote](n, e, t) {
    return t.next != 62 ? !1 : (t.markers.push(Ce(X.QuoteMark, e.lineStart + t.pos, e.lineStart + t.pos + 1)), t.moveBase(t.pos + (fn(t.text.charCodeAt(t.pos + 1)) ? 2 : 1)), n.end = e.lineStart + t.text.length, !0);
  },
  [X.ListItem](n, e, t) {
    return t.indent < t.baseIndent + n.value && t.next > -1 ? !1 : (t.moveBaseColumn(t.baseIndent + n.value), !0);
  },
  [X.OrderedList]: tg,
  [X.BulletList]: tg,
  [X.Document]() {
    return !0;
  }
};
function fn(n) {
  return n == 32 || n == 9 || n == 10 || n == 13;
}
function Ss(n, e = 0) {
  for (; e < n.length && fn(n.charCodeAt(e)); )
    e++;
  return e;
}
function ng(n, e, t) {
  for (; e > t && fn(n.charCodeAt(e - 1)); )
    e--;
  return e;
}
function Rx(n) {
  if (n.next != 96 && n.next != 126)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  if (e < n.pos + 3)
    return -1;
  if (n.next == 96) {
    for (let t = e; t < n.text.length; t++)
      if (n.text.charCodeAt(t) == 96)
        return -1;
  }
  return e;
}
function Mx(n) {
  return n.next != 62 ? -1 : n.text.charCodeAt(n.pos + 1) == 32 ? 2 : 1;
}
function xf(n, e, t) {
  if (n.next != 42 && n.next != 45 && n.next != 95)
    return -1;
  let i = 1;
  for (let r = n.pos + 1; r < n.text.length; r++) {
    let s = n.text.charCodeAt(r);
    if (s == n.next)
      i++;
    else if (!fn(s))
      return -1;
  }
  return t && n.next == 45 && Lx(n) > -1 && n.depth == e.stack.length && e.parser.leafBlockParsers.indexOf(Zx.SetextHeading) > -1 || i < 3 ? -1 : 1;
}
function Nx(n, e) {
  for (let t = n.stack.length - 1; t >= 0; t--)
    if (n.stack[t].type == e)
      return !0;
  return !1;
}
function kf(n, e, t) {
  return (n.next == 45 || n.next == 43 || n.next == 42) && (n.pos == n.text.length - 1 || fn(n.text.charCodeAt(n.pos + 1))) && (!t || Nx(e, X.BulletList) || n.skipSpace(n.pos + 2) < n.text.length) ? 1 : -1;
}
function Sf(n, e, t) {
  let i = n.pos, r = n.next;
  for (; r >= 48 && r <= 57; ) {
    i++;
    if (i == n.text.length)
      return -1;
    r = n.text.charCodeAt(i);
  }
  return i == n.pos || i > n.pos + 9 || r != 46 && r != 41 || i < n.text.length - 1 && !fn(n.text.charCodeAt(i + 1)) || t && !Nx(e, X.OrderedList) && (n.skipSpace(i + 1) == n.text.length || i > n.pos + 1 || n.next != 49) ? -1 : i + 1 - n.pos;
}
function Ix(n) {
  if (n.next != 35)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == 35; )
    e++;
  if (e < n.text.length && n.text.charCodeAt(e) != 32)
    return -1;
  let t = e - n.pos;
  return t > 6 ? -1 : t;
}
function Lx(n) {
  if (n.next != 45 && n.next != 61 || n.indent >= n.baseIndent + 4)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  let t = e;
  for (; e < n.text.length && fn(n.text.charCodeAt(e)); )
    e++;
  return e == n.text.length ? t : -1;
}
const Ku = /^[ \t]*$/, Dx = /-->/, Bx = /\?>/, Ju = [
  [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
  [/^\s*<!--/, Dx],
  [/^\s*<\?/, Bx],
  [/^\s*<![A-Z]/, />/],
  [/^\s*<!\[CDATA\[/, /\]\]>/],
  [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, Ku],
  [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, Ku]
];
function zx(n, e, t) {
  if (n.next != 60)
    return -1;
  let i = n.text.slice(n.pos);
  for (let r = 0, s = Ju.length - (t ? 1 : 0); r < s; r++)
    if (Ju[r][0].test(i))
      return r;
  return -1;
}
function ig(n, e) {
  let t = n.countIndent(e, n.pos, n.indent), i = n.countIndent(n.skipSpace(e), e, t);
  return i >= t + 5 ? t + 1 : i;
}
function Pi(n, e, t) {
  let i = n.length - 1;
  i >= 0 && n[i].to == e && n[i].type == X.CodeText ? n[i].to = t : n.push(Ce(X.CodeText, e, t));
}
const Jo = {
  LinkReference: void 0,
  IndentedCode(n, e) {
    let t = e.baseIndent + 4;
    if (e.indent < t)
      return !1;
    let i = e.findColumn(t), r = n.lineStart + i, s = n.lineStart + e.text.length, o = [], a = [];
    for (Pi(o, r, s); n.nextLine() && e.depth >= n.stack.length; )
      if (e.pos == e.text.length) {
        Pi(a, n.lineStart - 1, n.lineStart);
        for (let l of e.markers)
          a.push(l);
      } else {
        if (e.indent < t)
          break;
        {
          if (a.length) {
            for (let c of a)
              c.type == X.CodeText ? Pi(o, c.from, c.to) : o.push(c);
            a = [];
          }
          Pi(o, n.lineStart - 1, n.lineStart);
          for (let c of e.markers)
            o.push(c);
          s = n.lineStart + e.text.length;
          let l = n.lineStart + e.findColumn(e.baseIndent + 4);
          l < s && Pi(o, l, s);
        }
      }
    return a.length && (a = a.filter((l) => l.type != X.CodeText), a.length && (e.markers = a.concat(e.markers))), n.addNode(n.buffer.writeElements(o, -r).finish(X.CodeBlock, s - r), r), !0;
  },
  FencedCode(n, e) {
    let t = Rx(e);
    if (t < 0)
      return !1;
    let i = n.lineStart + e.pos, r = e.next, s = t - e.pos, o = e.skipSpace(t), a = ng(e.text, e.text.length, o), l = [Ce(X.CodeMark, i, i + s)];
    o < a && l.push(Ce(X.CodeInfo, n.lineStart + o, n.lineStart + a));
    for (let c = !0; n.nextLine() && e.depth >= n.stack.length; c = !1) {
      let u = e.pos;
      if (e.indent - e.baseIndent < 4)
        for (; u < e.text.length && e.text.charCodeAt(u) == r; )
          u++;
      if (u - e.pos >= s && e.skipSpace(u) == e.text.length) {
        for (let h of e.markers)
          l.push(h);
        l.push(Ce(X.CodeMark, n.lineStart + e.pos, n.lineStart + u)), n.nextLine();
        break;
      } else {
        c || Pi(l, n.lineStart - 1, n.lineStart);
        for (let d of e.markers)
          l.push(d);
        let h = n.lineStart + e.basePos, f = n.lineStart + e.text.length;
        h < f && Pi(l, h, f);
      }
    }
    return n.addNode(n.buffer.writeElements(l, -i).finish(X.FencedCode, n.prevLineEnd() - i), i), !0;
  },
  Blockquote(n, e) {
    let t = Mx(e);
    return t < 0 ? !1 : (n.startContext(X.Blockquote, e.pos), n.addNode(X.QuoteMark, n.lineStart + e.pos, n.lineStart + e.pos + 1), e.moveBase(e.pos + t), null);
  },
  HorizontalRule(n, e) {
    if (xf(e, n, !1) < 0)
      return !1;
    let t = n.lineStart + e.pos;
    return n.nextLine(), n.addNode(X.HorizontalRule, t), !0;
  },
  BulletList(n, e) {
    let t = kf(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != X.BulletList && n.startContext(X.BulletList, e.basePos, e.next);
    let i = ig(e, e.pos + 1);
    return n.startContext(X.ListItem, e.basePos, i - e.baseIndent), n.addNode(X.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(i), null;
  },
  OrderedList(n, e) {
    let t = Sf(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != X.OrderedList && n.startContext(X.OrderedList, e.basePos, e.text.charCodeAt(e.pos + t - 1));
    let i = ig(e, e.pos + t);
    return n.startContext(X.ListItem, e.basePos, i - e.baseIndent), n.addNode(X.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(i), null;
  },
  ATXHeading(n, e) {
    let t = Ix(e);
    if (t < 0)
      return !1;
    let i = e.pos, r = n.lineStart + i, s = ng(e.text, e.text.length, i), o = s;
    for (; o > i && e.text.charCodeAt(o - 1) == e.next; )
      o--;
    (o == s || o == i || !fn(e.text.charCodeAt(o - 1))) && (o = e.text.length);
    let a = n.buffer.write(X.HeaderMark, 0, t).writeElements(n.parser.parseInline(e.text.slice(i + t + 1, o), r + t + 1), -r);
    o < e.text.length && a.write(X.HeaderMark, o - i, s - i);
    let l = a.finish(X.ATXHeading1 - 1 + t, e.text.length - i);
    return n.nextLine(), n.addNode(l, r), !0;
  },
  HTMLBlock(n, e) {
    let t = zx(e, n, !1);
    if (t < 0)
      return !1;
    let i = n.lineStart + e.pos, r = Ju[t][1], s = [], o = r != Ku;
    for (; !r.test(e.text) && n.nextLine(); ) {
      if (e.depth < n.stack.length) {
        o = !1;
        break;
      }
      for (let c of e.markers)
        s.push(c);
    }
    o && n.nextLine();
    let a = r == Dx ? X.CommentBlock : r == Bx ? X.ProcessingInstructionBlock : X.HTMLBlock, l = n.prevLineEnd();
    return n.addNode(n.buffer.writeElements(s, -i).finish(a, l - i), i), !0;
  },
  SetextHeading: void 0
  // Specifies relative precedence for block-continue function
};
class S2 {
  constructor(e) {
    this.stage = 0, this.elts = [], this.pos = 0, this.start = e.start, this.advance(e.content);
  }
  nextLine(e, t, i) {
    if (this.stage == -1)
      return !1;
    let r = i.content + `
` + t.scrub(), s = this.advance(r);
    return s > -1 && s < r.length ? this.complete(e, i, s) : !1;
  }
  finish(e, t) {
    return (this.stage == 2 || this.stage == 3) && Ss(t.content, this.pos) == t.content.length ? this.complete(e, t, t.content.length) : !1;
  }
  complete(e, t, i) {
    return e.addLeafElement(t, Ce(X.LinkReference, this.start, this.start + i, this.elts)), !0;
  }
  nextStage(e) {
    return e ? (this.pos = e.to - this.start, this.elts.push(e), this.stage++, !0) : (e === !1 && (this.stage = -1), !1);
  }
  advance(e) {
    for (; ; ) {
      if (this.stage == -1)
        return -1;
      if (this.stage == 0) {
        if (!this.nextStage(jx(e, this.pos, this.start, !0)))
          return -1;
        if (e.charCodeAt(this.pos) != 58)
          return this.stage = -1;
        this.elts.push(Ce(X.LinkMark, this.pos + this.start, this.pos + this.start + 1)), this.pos++;
      } else if (this.stage == 1) {
        if (!this.nextStage(Gx(e, Ss(e, this.pos), this.start)))
          return -1;
      } else if (this.stage == 2) {
        let t = Ss(e, this.pos), i = 0;
        if (t > this.pos) {
          let r = Wx(e, t, this.start);
          if (r) {
            let s = yc(e, r.to - this.start);
            s > 0 && (this.nextStage(r), i = s);
          }
        }
        return i || (i = yc(e, this.pos)), i > 0 && i < e.length ? i : -1;
      } else
        return yc(e, this.pos);
    }
  }
}
function yc(n, e) {
  for (; e < n.length; e++) {
    let t = n.charCodeAt(e);
    if (t == 10)
      break;
    if (!fn(t))
      return -1;
  }
  return e;
}
class w2 {
  nextLine(e, t, i) {
    let r = t.depth < e.stack.length ? -1 : Lx(t), s = t.next;
    if (r < 0)
      return !1;
    let o = Ce(X.HeaderMark, e.lineStart + t.pos, e.lineStart + r);
    return e.nextLine(), e.addLeafElement(i, Ce(s == 61 ? X.SetextHeading1 : X.SetextHeading2, i.start, e.prevLineEnd(), [
      ...e.parser.parseInline(i.content, i.start),
      o
    ])), !0;
  }
  finish() {
    return !1;
  }
}
const Zx = {
  LinkReference(n, e) {
    return e.content.charCodeAt(0) == 91 ? new S2(e) : null;
  },
  SetextHeading() {
    return new w2();
  }
}, v2 = [
  (n, e) => Ix(e) >= 0,
  (n, e) => Rx(e) >= 0,
  (n, e) => Mx(e) >= 0,
  (n, e) => kf(e, n, !0) >= 0,
  (n, e) => Sf(e, n, !0) >= 0,
  (n, e) => xf(e, n, !0) >= 0,
  (n, e) => zx(e, n, !0) >= 0
], E2 = { text: "", end: 0 };
class _2 {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.parser = e, this.input = t, this.ranges = r, this.line = new k2(), this.atEnd = !1, this.reusePlaceholders = /* @__PURE__ */ new Map(), this.stoppedAt = null, this.rangeI = 0, this.to = r[r.length - 1].to, this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = r[0].from, this.block = Ga.create(X.Document, 0, this.lineStart, 0, 0), this.stack = [this.block], this.fragments = i.length ? new P2(i, t) : null, this.readLine();
  }
  get parsedPos() {
    return this.absoluteLineStart;
  }
  advance() {
    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
      return this.finish();
    let { line: e } = this;
    for (; ; ) {
      for (let i = 0; ; ) {
        let r = e.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
        for (; i < e.markers.length && (!r || e.markers[i].from < r.end); ) {
          let s = e.markers[i++];
          this.addNode(s.type, s.from, s.to);
        }
        if (!r)
          break;
        this.finishContext();
      }
      if (e.pos < e.text.length)
        break;
      if (!this.nextLine())
        return this.finish();
    }
    if (this.fragments && this.reuseFragment(e.basePos))
      return null;
    e: for (; ; ) {
      for (let i of this.parser.blockParsers)
        if (i) {
          let r = i(this, e);
          if (r != !1) {
            if (r == !0)
              return null;
            e.forward();
            continue e;
          }
        }
      break;
    }
    let t = new x2(this.lineStart + e.pos, e.text.slice(e.pos));
    for (let i of this.parser.leafBlockParsers)
      if (i) {
        let r = i(this, t);
        r && t.parsers.push(r);
      }
    e: for (; this.nextLine() && e.pos != e.text.length; ) {
      if (e.indent < e.baseIndent + 4) {
        for (let i of this.parser.endLeafBlock)
          if (i(this, e, t))
            break e;
      }
      for (let i of t.parsers)
        if (i.nextLine(this, e, t))
          return null;
      t.content += `
` + e.scrub();
      for (let i of e.markers)
        t.marks.push(i);
    }
    return this.finishLeaf(t), null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  reuseFragment(e) {
    if (!this.fragments.moveTo(this.absoluteLineStart + e, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
      return !1;
    let t = this.fragments.takeNodes(this);
    return t ? (this.absoluteLineStart += t, this.lineStart = Hx(this.absoluteLineStart, this.ranges), this.moveRangeI(), this.absoluteLineStart < this.to ? (this.lineStart++, this.absoluteLineStart++, this.readLine()) : (this.atEnd = !0, this.readLine()), !0) : !1;
  }
  /**
  The number of parent blocks surrounding the current block.
  */
  get depth() {
    return this.stack.length;
  }
  /**
  Get the type of the parent block at the given depth. When no
  depth is passed, return the type of the innermost parent.
  */
  parentType(e = this.depth - 1) {
    return this.parser.nodeSet.types[this.stack[e].type];
  }
  /**
  Move to the next input line. This should only be called by
  (non-composite) [block parsers](#BlockParser.parse) that consume
  the line directly, or leaf block parser
  [`nextLine`](#LeafBlockParser.nextLine) methods when they
  consume the current line (and return true).
  */
  nextLine() {
    return this.lineStart += this.line.text.length, this.absoluteLineEnd >= this.to ? (this.absoluteLineStart = this.absoluteLineEnd, this.atEnd = !0, this.readLine(), !1) : (this.lineStart++, this.absoluteLineStart = this.absoluteLineEnd + 1, this.moveRangeI(), this.readLine(), !0);
  }
  /**
  Retrieve the text of the line after the current one, without
  actually moving the context's current line forward.
  */
  peekLine() {
    return this.scanLine(this.absoluteLineEnd + 1).text;
  }
  moveRangeI() {
    for (; this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to; )
      this.rangeI++, this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
  }
  /**
  @internal
  Collect the text for the next line.
  */
  scanLine(e) {
    let t = E2;
    if (t.end = e, e >= this.to)
      t.text = "";
    else if (t.text = this.lineChunkAt(e), t.end += t.text.length, this.ranges.length > 1) {
      let i = this.absoluteLineStart, r = this.rangeI;
      for (; this.ranges[r].to < t.end; ) {
        r++;
        let s = this.ranges[r].from, o = this.lineChunkAt(s);
        t.end = s + o.length, t.text = t.text.slice(0, this.ranges[r - 1].to - i) + o, i = t.end - t.text.length;
      }
    }
    return t;
  }
  /**
  @internal
  Populate this.line with the content of the next line. Skip
  leading characters covered by composite blocks.
  */
  readLine() {
    let { line: e } = this, { text: t, end: i } = this.scanLine(this.absoluteLineStart);
    for (this.absoluteLineEnd = i, e.reset(t); e.depth < this.stack.length; e.depth++) {
      let r = this.stack[e.depth], s = this.parser.skipContextMarkup[r.type];
      if (!s)
        throw new Error("Unhandled block context " + X[r.type]);
      if (!s(r, this, e))
        break;
      e.forward();
    }
  }
  lineChunkAt(e) {
    let t = this.input.chunk(e), i;
    if (this.input.lineChunks)
      i = t == `
` ? "" : t;
    else {
      let r = t.indexOf(`
`);
      i = r < 0 ? t : t.slice(0, r);
    }
    return e + i.length > this.to ? i.slice(0, this.to - e) : i;
  }
  /**
  The end position of the previous line.
  */
  prevLineEnd() {
    return this.atEnd ? this.lineStart : this.lineStart - 1;
  }
  /**
  @internal
  */
  startContext(e, t, i = 0) {
    this.block = Ga.create(e, i, this.lineStart + t, this.block.hash, this.lineStart + this.line.text.length), this.stack.push(this.block);
  }
  /**
  Start a composite block. Should only be called from [block
  parser functions](#BlockParser.parse) that return null.
  */
  startComposite(e, t, i = 0) {
    this.startContext(this.parser.getNodeType(e), t, i);
  }
  /**
  @internal
  */
  addNode(e, t, i) {
    typeof e == "number" && (e = new Me(this.parser.nodeSet.types[e], vr, vr, (i ?? this.prevLineEnd()) - t)), this.block.addChild(e, t - this.block.from);
  }
  /**
  Add a block element. Can be called by [block
  parsers](#BlockParser.parse).
  */
  addElement(e) {
    this.block.addChild(e.toTree(this.parser.nodeSet), e.from - this.block.from);
  }
  /**
  Add a block element from a [leaf parser](#LeafBlockParser). This
  makes sure any extra composite block markup (such as blockquote
  markers) inside the block are also added to the syntax tree.
  */
  addLeafElement(e, t) {
    this.addNode(this.buffer.writeElements(nh(t.children, e.marks), -t.from).finish(t.type, t.to - t.from), t.from);
  }
  /**
  @internal
  */
  finishContext() {
    let e = this.stack.pop(), t = this.stack[this.stack.length - 1];
    t.addChild(e.toTree(this.parser.nodeSet), e.from - t.from), this.block = t;
  }
  finish() {
    for (; this.stack.length > 1; )
      this.finishContext();
    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
  }
  addGaps(e) {
    return this.ranges.length > 1 ? Xx(this.ranges, 0, e.topNode, this.ranges[0].from, this.reusePlaceholders) : e;
  }
  /**
  @internal
  */
  finishLeaf(e) {
    for (let i of e.parsers)
      if (i.finish(this, e))
        return;
    let t = nh(this.parser.parseInline(e.content, e.start), e.marks);
    this.addNode(this.buffer.writeElements(t, -e.start).finish(X.Paragraph, e.content.length), e.start);
  }
  elt(e, t, i, r) {
    return typeof e == "string" ? Ce(this.parser.getNodeType(e), t, i, r) : new Yx(e, t);
  }
  /**
  @internal
  */
  get buffer() {
    return new Vx(this.parser.nodeSet);
  }
}
function Xx(n, e, t, i, r) {
  let s = n[e].to, o = [], a = [], l = t.from + i;
  function c(u, h) {
    for (; h ? u >= s : u > s; ) {
      let f = n[e + 1].from - s;
      i += f, u += f, e++, s = n[e].to;
    }
  }
  for (let u = t.firstChild; u; u = u.nextSibling) {
    c(u.from + i, !0);
    let h = u.from + i, f, d = r.get(u.tree);
    d ? f = d : u.to + i > s ? (f = Xx(n, e, u, i, r), c(u.to + i, !1)) : f = u.toTree(), o.push(f), a.push(h - l);
  }
  return c(t.to + i, !1), new Me(t.type, o, a, t.to + i - l, t.tree ? t.tree.propValues : void 0);
}
class gl extends Kh {
  /**
  @internal
  */
  constructor(e, t, i, r, s, o, a, l, c) {
    super(), this.nodeSet = e, this.blockParsers = t, this.leafBlockParsers = i, this.blockNames = r, this.endLeafBlock = s, this.skipContextMarkup = o, this.inlineParsers = a, this.inlineNames = l, this.wrappers = c, this.nodeTypes = /* @__PURE__ */ Object.create(null);
    for (let u of e.types)
      this.nodeTypes[u.name] = u.id;
  }
  createParse(e, t, i) {
    let r = new _2(this, e, t, i);
    for (let s of this.wrappers)
      r = s(r, e, t, i);
    return r;
  }
  /**
  Reconfigure the parser.
  */
  configure(e) {
    let t = eh(e);
    if (!t)
      return this;
    let { nodeSet: i, skipContextMarkup: r } = this, s = this.blockParsers.slice(), o = this.leafBlockParsers.slice(), a = this.blockNames.slice(), l = this.inlineParsers.slice(), c = this.inlineNames.slice(), u = this.endLeafBlock.slice(), h = this.wrappers;
    if (ss(t.defineNodes)) {
      r = Object.assign({}, r);
      let f = i.types.slice(), d;
      for (let p of t.defineNodes) {
        let { name: m, block: O, composite: g, style: y } = typeof p == "string" ? { name: p } : p;
        if (f.some((v) => v.name == m))
          continue;
        g && (r[f.length] = (v, x, C) => g(x, C, v.value));
        let S = f.length, _ = g ? ["Block", "BlockContext"] : O ? S >= X.ATXHeading1 && S <= X.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"] : void 0;
        f.push(ut.define({
          id: S,
          name: m,
          props: _ && [[pe.group, _]]
        })), y && (d || (d = {}), Array.isArray(y) || y instanceof Ht ? d[m] = y : Object.assign(d, y));
      }
      i = new io(f), d && (i = i.extend(Nr(d)));
    }
    if (ss(t.props) && (i = i.extend(...t.props)), ss(t.remove))
      for (let f of t.remove) {
        let d = this.blockNames.indexOf(f), p = this.inlineNames.indexOf(f);
        d > -1 && (s[d] = o[d] = void 0), p > -1 && (l[p] = void 0);
      }
    if (ss(t.parseBlock))
      for (let f of t.parseBlock) {
        let d = a.indexOf(f.name);
        if (d > -1)
          s[d] = f.parse, o[d] = f.leaf;
        else {
          let p = f.before ? ea(a, f.before) : f.after ? ea(a, f.after) + 1 : a.length - 1;
          s.splice(p, 0, f.parse), o.splice(p, 0, f.leaf), a.splice(p, 0, f.name);
        }
        f.endLeaf && u.push(f.endLeaf);
      }
    if (ss(t.parseInline))
      for (let f of t.parseInline) {
        let d = c.indexOf(f.name);
        if (d > -1)
          l[d] = f.parse;
        else {
          let p = f.before ? ea(c, f.before) : f.after ? ea(c, f.after) + 1 : c.length - 1;
          l.splice(p, 0, f.parse), c.splice(p, 0, f.name);
        }
      }
    return t.wrap && (h = h.concat(t.wrap)), new gl(i, s, o, a, u, r, l, c, h);
  }
  /**
  @internal
  */
  getNodeType(e) {
    let t = this.nodeTypes[e];
    if (t == null)
      throw new RangeError(`Unknown node type '${e}'`);
    return t;
  }
  /**
  Parse the given piece of inline text at the given offset,
  returning an array of [`Element`](#Element) objects representing
  the inline content.
  */
  parseInline(e, t) {
    let i = new C2(this, e, t);
    e: for (let r = t; r < i.end; ) {
      let s = i.char(r);
      for (let o of this.inlineParsers)
        if (o) {
          let a = o(i, s, r);
          if (a >= 0) {
            r = a;
            continue e;
          }
        }
      r++;
    }
    return i.resolveMarkers(0);
  }
}
function ss(n) {
  return n != null && n.length > 0;
}
function eh(n) {
  if (!Array.isArray(n))
    return n;
  if (n.length == 0)
    return null;
  let e = eh(n[0]);
  if (n.length == 1)
    return e;
  let t = eh(n.slice(1));
  if (!t || !e)
    return e || t;
  let i = (o, a) => (o || vr).concat(a || vr), r = e.wrap, s = t.wrap;
  return {
    props: i(e.props, t.props),
    defineNodes: i(e.defineNodes, t.defineNodes),
    parseBlock: i(e.parseBlock, t.parseBlock),
    parseInline: i(e.parseInline, t.parseInline),
    remove: i(e.remove, t.remove),
    wrap: r ? s ? (o, a, l, c) => r(s(o, a, l, c), a, l, c) : r : s
  };
}
function ea(n, e) {
  let t = n.indexOf(e);
  if (t < 0)
    throw new RangeError(`Position specified relative to unknown parser ${e}`);
  return t;
}
let qx = [ut.none];
for (let n = 1, e; e = X[n]; n++)
  qx[n] = ut.define({
    id: n,
    name: e,
    props: n >= X.Escape ? [] : [[pe.group, n in $x ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
    top: e == "Document"
  });
const vr = [];
class Vx {
  constructor(e) {
    this.nodeSet = e, this.content = [], this.nodes = [];
  }
  write(e, t, i, r = 0) {
    return this.content.push(e, t, i, 4 + r * 4), this;
  }
  writeElements(e, t = 0) {
    for (let i of e)
      i.writeTo(this, t);
    return this;
  }
  finish(e, t) {
    return Me.build({
      buffer: this.content,
      nodeSet: this.nodeSet,
      reused: this.nodes,
      topID: e,
      length: t
    });
  }
}
let Ys = class {
  /**
  @internal
  */
  constructor(e, t, i, r = vr) {
    this.type = e, this.from = t, this.to = i, this.children = r;
  }
  /**
  @internal
  */
  writeTo(e, t) {
    let i = e.content.length;
    e.writeElements(this.children, t), e.content.push(this.type, this.from + t, this.to + t, e.content.length + 4 - i);
  }
  /**
  @internal
  */
  toTree(e) {
    return new Vx(e).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
  }
};
class Yx {
  constructor(e, t) {
    this.tree = e, this.from = t;
  }
  get to() {
    return this.from + this.tree.length;
  }
  get type() {
    return this.tree.type.id;
  }
  get children() {
    return vr;
  }
  writeTo(e, t) {
    e.nodes.push(this.tree), e.content.push(e.nodes.length - 1, this.from + t, this.to + t, -1);
  }
  toTree() {
    return this.tree;
  }
}
function Ce(n, e, t, i) {
  return new Ys(n, e, t, i);
}
const Fx = { resolve: "Emphasis", mark: "EmphasisMark" }, Ux = { resolve: "Emphasis", mark: "EmphasisMark" }, ir = {}, th = {};
class nn {
  constructor(e, t, i, r) {
    this.type = e, this.from = t, this.to = i, this.side = r;
  }
}
const rg = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
let Fs = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  Fs = new RegExp("[\\p{S}|\\p{P}]", "u");
} catch {
}
const xc = {
  Escape(n, e, t) {
    if (e != 92 || t == n.end - 1)
      return -1;
    let i = n.char(t + 1);
    for (let r = 0; r < rg.length; r++)
      if (rg.charCodeAt(r) == i)
        return n.append(Ce(X.Escape, t, t + 2));
    return -1;
  },
  Entity(n, e, t) {
    if (e != 38)
      return -1;
    let i = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(n.slice(t + 1, t + 31));
    return i ? n.append(Ce(X.Entity, t, t + 1 + i[0].length)) : -1;
  },
  InlineCode(n, e, t) {
    if (e != 96 || t && n.char(t - 1) == 96)
      return -1;
    let i = t + 1;
    for (; i < n.end && n.char(i) == 96; )
      i++;
    let r = i - t, s = 0;
    for (; i < n.end; i++)
      if (n.char(i) == 96) {
        if (s++, s == r && n.char(i + 1) != 96)
          return n.append(Ce(X.InlineCode, t, i + 1, [
            Ce(X.CodeMark, t, t + r),
            Ce(X.CodeMark, i + 1 - r, i + 1)
          ]));
      } else
        s = 0;
    return -1;
  },
  HTMLTag(n, e, t) {
    if (e != 60 || t == n.end - 1)
      return -1;
    let i = n.slice(t + 1, n.end), r = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(i);
    if (r)
      return n.append(Ce(X.Autolink, t, t + 1 + r[0].length, [
        Ce(X.LinkMark, t, t + 1),
        // url[0] includes the closing bracket, so exclude it from this slice
        Ce(X.URL, t + 1, t + r[0].length),
        Ce(X.LinkMark, t + r[0].length, t + 1 + r[0].length)
      ]));
    let s = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(i);
    if (s)
      return n.append(Ce(X.Comment, t, t + 1 + s[0].length));
    let o = /^\?[^]*?\?>/.exec(i);
    if (o)
      return n.append(Ce(X.ProcessingInstruction, t, t + 1 + o[0].length));
    let a = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(i);
    return a ? n.append(Ce(X.HTMLTag, t, t + 1 + a[0].length)) : -1;
  },
  Emphasis(n, e, t) {
    if (e != 95 && e != 42)
      return -1;
    let i = t + 1;
    for (; n.char(i) == e; )
      i++;
    let r = n.slice(t - 1, t), s = n.slice(i, i + 1), o = Fs.test(r), a = Fs.test(s), l = /\s|^$/.test(r), c = /\s|^$/.test(s), u = !c && (!a || l || o), h = !l && (!o || c || a), f = u && (e == 42 || !h || o), d = h && (e == 42 || !u || a);
    return n.append(new nn(e == 95 ? Fx : Ux, t, i, (f ? 1 : 0) | (d ? 2 : 0)));
  },
  HardBreak(n, e, t) {
    if (e == 92 && n.char(t + 1) == 10)
      return n.append(Ce(X.HardBreak, t, t + 2));
    if (e == 32) {
      let i = t + 1;
      for (; n.char(i) == 32; )
        i++;
      if (n.char(i) == 10 && i >= t + 2)
        return n.append(Ce(X.HardBreak, t, i + 1));
    }
    return -1;
  },
  Link(n, e, t) {
    return e == 91 ? n.append(new nn(
      ir,
      t,
      t + 1,
      1
      /* Mark.Open */
    )) : -1;
  },
  Image(n, e, t) {
    return e == 33 && n.char(t + 1) == 91 ? n.append(new nn(
      th,
      t,
      t + 2,
      1
      /* Mark.Open */
    )) : -1;
  },
  LinkEnd(n, e, t) {
    if (e != 93)
      return -1;
    for (let i = n.parts.length - 1; i >= 0; i--) {
      let r = n.parts[i];
      if (r instanceof nn && (r.type == ir || r.type == th)) {
        if (!r.side || n.skipSpace(r.to) == t && !/[(\[]/.test(n.slice(t + 1, t + 2)))
          return n.parts[i] = null, -1;
        let s = n.takeContent(i), o = n.parts[i] = Q2(n, s, r.type == ir ? X.Link : X.Image, r.from, t + 1);
        if (r.type == ir)
          for (let a = 0; a < i; a++) {
            let l = n.parts[a];
            l instanceof nn && l.type == ir && (l.side = 0);
          }
        return o.to;
      }
    }
    return -1;
  }
};
function Q2(n, e, t, i, r) {
  let { text: s } = n, o = n.char(r), a = r;
  if (e.unshift(Ce(X.LinkMark, i, i + (t == X.Image ? 2 : 1))), e.push(Ce(X.LinkMark, r - 1, r)), o == 40) {
    let l = n.skipSpace(r + 1), c = Gx(s, l - n.offset, n.offset), u;
    c && (l = n.skipSpace(c.to), l != c.to && (u = Wx(s, l - n.offset, n.offset), u && (l = n.skipSpace(u.to)))), n.char(l) == 41 && (e.push(Ce(X.LinkMark, r, r + 1)), a = l + 1, c && e.push(c), u && e.push(u), e.push(Ce(X.LinkMark, l, a)));
  } else if (o == 91) {
    let l = jx(s, r - n.offset, n.offset, !1);
    l && (e.push(l), a = l.to);
  }
  return Ce(t, i, a, e);
}
function Gx(n, e, t) {
  if (n.charCodeAt(e) == 60) {
    for (let r = e + 1; r < n.length; r++) {
      let s = n.charCodeAt(r);
      if (s == 62)
        return Ce(X.URL, e + t, r + 1 + t);
      if (s == 60 || s == 10)
        return !1;
    }
    return null;
  } else {
    let r = 0, s = e;
    for (let o = !1; s < n.length; s++) {
      let a = n.charCodeAt(s);
      if (fn(a))
        break;
      if (o)
        o = !1;
      else if (a == 40)
        r++;
      else if (a == 41) {
        if (!r)
          break;
        r--;
      } else a == 92 && (o = !0);
    }
    return s > e ? Ce(X.URL, e + t, s + t) : s == n.length ? null : !1;
  }
}
function Wx(n, e, t) {
  let i = n.charCodeAt(e);
  if (i != 39 && i != 34 && i != 40)
    return !1;
  let r = i == 40 ? 41 : i;
  for (let s = e + 1, o = !1; s < n.length; s++) {
    let a = n.charCodeAt(s);
    if (o)
      o = !1;
    else {
      if (a == r)
        return Ce(X.LinkTitle, e + t, s + 1 + t);
      a == 92 && (o = !0);
    }
  }
  return null;
}
function jx(n, e, t, i) {
  for (let r = !1, s = e + 1, o = Math.min(n.length, s + 999); s < o; s++) {
    let a = n.charCodeAt(s);
    if (r)
      r = !1;
    else {
      if (a == 93)
        return i ? !1 : Ce(X.LinkLabel, e + t, s + 1 + t);
      if (i && !fn(a) && (i = !1), a == 91)
        return !1;
      a == 92 && (r = !0);
    }
  }
  return null;
}
class C2 {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.parser = e, this.text = t, this.offset = i, this.parts = [];
  }
  /**
  Get the character code at the given (document-relative)
  position.
  */
  char(e) {
    return e >= this.end ? -1 : this.text.charCodeAt(e - this.offset);
  }
  /**
  The position of the end of this inline section.
  */
  get end() {
    return this.offset + this.text.length;
  }
  /**
  Get a substring of this inline section. Again uses
  document-relative positions.
  */
  slice(e, t) {
    return this.text.slice(e - this.offset, t - this.offset);
  }
  /**
  @internal
  */
  append(e) {
    return this.parts.push(e), e.to;
  }
  /**
  Add a [delimiter](#DelimiterType) at this given position. `open`
  and `close` indicate whether this delimiter is opening, closing,
  or both. Returns the end of the delimiter, for convenient
  returning from [parse functions](#InlineParser.parse).
  */
  addDelimiter(e, t, i, r, s) {
    return this.append(new nn(e, t, i, (r ? 1 : 0) | (s ? 2 : 0)));
  }
  /**
  Returns true when there is an unmatched link or image opening
  token before the current position.
  */
  get hasOpenLink() {
    for (let e = this.parts.length - 1; e >= 0; e--) {
      let t = this.parts[e];
      if (t instanceof nn && (t.type == ir || t.type == th))
        return !0;
    }
    return !1;
  }
  /**
  Add an inline element. Returns the end of the element.
  */
  addElement(e) {
    return this.append(e);
  }
  /**
  Resolve markers between this.parts.length and from, wrapping matched markers in the
  appropriate node and updating the content of this.parts. @internal
  */
  resolveMarkers(e) {
    for (let i = e; i < this.parts.length; i++) {
      let r = this.parts[i];
      if (!(r instanceof nn && r.type.resolve && r.side & 2))
        continue;
      let s = r.type == Fx || r.type == Ux, o = r.to - r.from, a, l = i - 1;
      for (; l >= e; l--) {
        let m = this.parts[l];
        if (m instanceof nn && m.side & 1 && m.type == r.type && // Ignore emphasis delimiters where the character count doesn't match
        !(s && (r.side & 1 || m.side & 2) && (m.to - m.from + o) % 3 == 0 && ((m.to - m.from) % 3 || o % 3))) {
          a = m;
          break;
        }
      }
      if (!a)
        continue;
      let c = r.type.resolve, u = [], h = a.from, f = r.to;
      if (s) {
        let m = Math.min(2, a.to - a.from, o);
        h = a.to - m, f = r.from + m, c = m == 1 ? "Emphasis" : "StrongEmphasis";
      }
      a.type.mark && u.push(this.elt(a.type.mark, h, a.to));
      for (let m = l + 1; m < i; m++)
        this.parts[m] instanceof Ys && u.push(this.parts[m]), this.parts[m] = null;
      r.type.mark && u.push(this.elt(r.type.mark, r.from, f));
      let d = this.elt(c, h, f, u);
      this.parts[l] = s && a.from != h ? new nn(a.type, a.from, h, a.side) : null, (this.parts[i] = s && r.to != f ? new nn(r.type, f, r.to, r.side) : null) ? this.parts.splice(i, 0, d) : this.parts[i] = d;
    }
    let t = [];
    for (let i = e; i < this.parts.length; i++) {
      let r = this.parts[i];
      r instanceof Ys && t.push(r);
    }
    return t;
  }
  /**
  Find an opening delimiter of the given type. Returns `null` if
  no delimiter is found, or an index that can be passed to
  [`takeContent`](#InlineContext.takeContent) otherwise.
  */
  findOpeningDelimiter(e) {
    for (let t = this.parts.length - 1; t >= 0; t--) {
      let i = this.parts[t];
      if (i instanceof nn && i.type == e)
        return t;
    }
    return null;
  }
  /**
  Remove all inline elements and delimiters starting from the
  given index (which you should get from
  [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
  resolve delimiters inside of them, and return them as an array
  of elements.
  */
  takeContent(e) {
    let t = this.resolveMarkers(e);
    return this.parts.length = e, t;
  }
  /**
  Skip space after the given (document) position, returning either
  the position of the next non-space character or the end of the
  section.
  */
  skipSpace(e) {
    return Ss(this.text, e - this.offset) + this.offset;
  }
  elt(e, t, i, r) {
    return typeof e == "string" ? Ce(this.parser.getNodeType(e), t, i, r) : new Yx(e, t);
  }
}
function nh(n, e) {
  if (!e.length)
    return n;
  if (!n.length)
    return e;
  let t = n.slice(), i = 0;
  for (let r of e) {
    for (; i < t.length && t[i].to < r.to; )
      i++;
    if (i < t.length && t[i].from < r.from) {
      let s = t[i];
      s instanceof Ys && (t[i] = new Ys(s.type, s.from, s.to, nh(s.children, [r])));
    } else
      t.splice(i++, 0, r);
  }
  return t;
}
const T2 = [X.CodeBlock, X.ListItem, X.OrderedList, X.BulletList];
let P2 = class {
  constructor(e, t) {
    this.fragments = e, this.input = t, this.i = 0, this.fragment = null, this.fragmentEnd = -1, this.cursor = null, e.length && (this.fragment = e[this.i++]);
  }
  nextFragment() {
    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null, this.cursor = null, this.fragmentEnd = -1;
  }
  moveTo(e, t) {
    for (; this.fragment && this.fragment.to <= e; )
      this.nextFragment();
    if (!this.fragment || this.fragment.from > (e ? e - 1 : 0))
      return !1;
    if (this.fragmentEnd < 0) {
      let s = this.fragment.to;
      for (; s > 0 && this.input.read(s - 1, s) != `
`; )
        s--;
      this.fragmentEnd = s ? s - 1 : 0;
    }
    let i = this.cursor;
    i || (i = this.cursor = this.fragment.tree.cursor(), i.firstChild());
    let r = e + this.fragment.offset;
    for (; i.to <= r; )
      if (!i.parent())
        return !1;
    for (; ; ) {
      if (i.from >= r)
        return this.fragment.from <= t;
      if (!i.childAfter(r))
        return !1;
    }
  }
  matches(e) {
    let t = this.cursor.tree;
    return t && t.prop(pe.contextHash) == e;
  }
  takeNodes(e) {
    let t = this.cursor, i = this.fragment.offset, r = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0), s = e.absoluteLineStart, o = s, a = e.block.children.length, l = o, c = a;
    for (; ; ) {
      if (t.to - i > r) {
        if (t.type.isAnonymous && t.firstChild())
          continue;
        break;
      }
      let u = Hx(t.from - i, e.ranges);
      if (t.to - i <= e.ranges[e.rangeI].to)
        e.addNode(t.tree, u);
      else {
        let h = new Me(e.parser.nodeSet.types[X.Paragraph], [], [], 0, e.block.hashProp);
        e.reusePlaceholders.set(h, t.tree), e.addNode(h, u);
      }
      if (t.type.is("Block") && (T2.indexOf(t.type.id) < 0 ? (o = t.to - i, a = e.block.children.length) : (o = l, a = c, l = t.to - i, c = e.block.children.length)), !t.nextSibling())
        break;
    }
    for (; e.block.children.length > a; )
      e.block.children.pop(), e.block.positions.pop();
    return o - s;
  }
};
function Hx(n, e) {
  let t = n;
  for (let i = 1; i < e.length; i++) {
    let r = e[i - 1].to, s = e[i].from;
    r < n && (t -= s - r);
  }
  return t;
}
const A2 = Nr({
  "Blockquote/...": k.quote,
  HorizontalRule: k.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": k.heading1,
  "ATXHeading2/... SetextHeading2/...": k.heading2,
  "ATXHeading3/...": k.heading3,
  "ATXHeading4/...": k.heading4,
  "ATXHeading5/...": k.heading5,
  "ATXHeading6/...": k.heading6,
  "Comment CommentBlock": k.comment,
  Escape: k.escape,
  Entity: k.character,
  "Emphasis/...": k.emphasis,
  "StrongEmphasis/...": k.strong,
  "Link/... Image/...": k.link,
  "OrderedList/... BulletList/...": k.list,
  "BlockQuote/...": k.quote,
  "InlineCode CodeText": k.monospace,
  "URL Autolink": k.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": k.processingInstruction,
  "CodeInfo LinkLabel": k.labelName,
  LinkTitle: k.string,
  Paragraph: k.content
}), $2 = new gl(new io(qx).extend(A2), Object.keys(Jo).map((n) => Jo[n]), Object.keys(Jo).map((n) => Zx[n]), Object.keys(Jo), v2, $x, Object.keys(xc).map((n) => xc[n]), Object.keys(xc), []);
function R2(n, e, t) {
  let i = [];
  for (let r = n.firstChild, s = e; ; r = r.nextSibling) {
    let o = r ? r.from : t;
    if (o > s && i.push({ from: s, to: o }), !r)
      break;
    s = r.to;
  }
  return i;
}
function M2(n) {
  let { codeParser: e, htmlParser: t } = n;
  return { wrap: l0((r, s) => {
    let o = r.type.id;
    if (e && (o == X.CodeBlock || o == X.FencedCode)) {
      let a = "";
      if (o == X.FencedCode) {
        let c = r.node.getChild(X.CodeInfo);
        c && (a = s.read(c.from, c.to));
      }
      let l = e(a);
      if (l)
        return { parser: l, overlay: (c) => c.type.id == X.CodeText };
    } else if (t && (o == X.HTMLBlock || o == X.HTMLTag || o == X.CommentBlock))
      return { parser: t, overlay: R2(r.node, r.from, r.to) };
    return null;
  }) };
}
const N2 = { resolve: "Strikethrough", mark: "StrikethroughMark" }, I2 = {
  defineNodes: [{
    name: "Strikethrough",
    style: { "Strikethrough/...": k.strikethrough }
  }, {
    name: "StrikethroughMark",
    style: k.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse(n, e, t) {
      if (e != 126 || n.char(t + 1) != 126 || n.char(t + 2) == 126)
        return -1;
      let i = n.slice(t - 1, t), r = n.slice(t + 2, t + 3), s = /\s|^$/.test(i), o = /\s|^$/.test(r), a = Fs.test(i), l = Fs.test(r);
      return n.addDelimiter(N2, t, t + 2, !o && (!l || s || a), !s && (!a || o || l));
    },
    after: "Emphasis"
  }]
};
function ws(n, e, t = 0, i, r = 0) {
  let s = 0, o = !0, a = -1, l = -1, c = !1, u = () => {
    i.push(n.elt("TableCell", r + a, r + l, n.parser.parseInline(e.slice(a, l), r + a)));
  };
  for (let h = t; h < e.length; h++) {
    let f = e.charCodeAt(h);
    f == 124 && !c ? ((!o || a > -1) && s++, o = !1, i && (a > -1 && u(), i.push(n.elt("TableDelimiter", h + r, h + r + 1))), a = l = -1) : (c || f != 32 && f != 9) && (a < 0 && (a = h), l = h + 1), c = !c && f == 92;
  }
  return a > -1 && (s++, i && u()), s;
}
function sg(n, e) {
  for (let t = e; t < n.length; t++) {
    let i = n.charCodeAt(t);
    if (i == 124)
      return !0;
    i == 92 && t++;
  }
  return !1;
}
const Kx = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
class og {
  constructor() {
    this.rows = null;
  }
  nextLine(e, t, i) {
    if (this.rows == null) {
      this.rows = !1;
      let r;
      if ((t.next == 45 || t.next == 58 || t.next == 124) && Kx.test(r = t.text.slice(t.pos))) {
        let s = [];
        ws(e, i.content, 0, s, i.start) == ws(e, r, t.pos) && (this.rows = [
          e.elt("TableHeader", i.start, i.start + i.content.length, s),
          e.elt("TableDelimiter", e.lineStart + t.pos, e.lineStart + t.text.length)
        ]);
      }
    } else if (this.rows) {
      let r = [];
      ws(e, t.text, t.pos, r, e.lineStart), this.rows.push(e.elt("TableRow", e.lineStart + t.pos, e.lineStart + t.text.length, r));
    }
    return !1;
  }
  finish(e, t) {
    return this.rows ? (e.addLeafElement(t, e.elt("Table", t.start, t.start + t.content.length, this.rows)), !0) : !1;
  }
}
const L2 = {
  defineNodes: [
    { name: "Table", block: !0 },
    { name: "TableHeader", style: { "TableHeader/...": k.heading } },
    "TableRow",
    { name: "TableCell", style: k.content },
    { name: "TableDelimiter", style: k.processingInstruction }
  ],
  parseBlock: [{
    name: "Table",
    leaf(n, e) {
      return sg(e.content, 0) ? new og() : null;
    },
    endLeaf(n, e, t) {
      if (t.parsers.some((r) => r instanceof og) || !sg(e.text, e.basePos))
        return !1;
      let i = n.peekLine();
      return Kx.test(i) && ws(n, e.text, e.basePos) == ws(n, i, e.basePos);
    },
    before: "SetextHeading"
  }]
};
class D2 {
  nextLine() {
    return !1;
  }
  finish(e, t) {
    return e.addLeafElement(t, e.elt("Task", t.start, t.start + t.content.length, [
      e.elt("TaskMarker", t.start, t.start + 3),
      ...e.parser.parseInline(t.content.slice(3), t.start + 3)
    ])), !0;
  }
}
const B2 = {
  defineNodes: [
    { name: "Task", block: !0, style: k.list },
    { name: "TaskMarker", style: k.atom }
  ],
  parseBlock: [{
    name: "TaskList",
    leaf(n, e) {
      return /^\[[ xX]\][ \t]/.test(e.content) && n.parentType().name == "ListItem" ? new D2() : null;
    },
    after: "SetextHeading"
  }]
}, ag = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy, lg = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy, z2 = /[\w-]+\.[\w-]+($|\/)/, cg = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy, ug = /\/[a-zA-Z\d@.]+/gy;
function hg(n, e, t, i) {
  let r = 0;
  for (let s = e; s < t; s++)
    n[s] == i && r++;
  return r;
}
function Z2(n, e) {
  lg.lastIndex = e;
  let t = lg.exec(n);
  if (!t || z2.exec(t[0])[0].indexOf("_") > -1)
    return -1;
  let i = e + t[0].length;
  for (; ; ) {
    let r = n[i - 1], s;
    if (/[?!.,:*_~]/.test(r) || r == ")" && hg(n, e, i, ")") > hg(n, e, i, "("))
      i--;
    else if (r == ";" && (s = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(n.slice(e, i))))
      i = e + s.index;
    else
      break;
  }
  return i;
}
function fg(n, e) {
  cg.lastIndex = e;
  let t = cg.exec(n);
  if (!t)
    return -1;
  let i = t[0][t[0].length - 1];
  return i == "_" || i == "-" ? -1 : e + t[0].length - (i == "." ? 1 : 0);
}
const X2 = {
  parseInline: [{
    name: "Autolink",
    parse(n, e, t) {
      let i = t - n.offset;
      if (i && /\w/.test(n.text[i - 1]))
        return -1;
      ag.lastIndex = i;
      let r = ag.exec(n.text), s = -1;
      if (!r)
        return -1;
      if (r[1] || r[2]) {
        if (s = Z2(n.text, i + r[0].length), s > -1 && n.hasOpenLink) {
          let o = /([^\[\]]|\[[^\]]*\])*/.exec(n.text.slice(i, s));
          s = i + o[0].length;
        }
      } else r[3] ? s = fg(n.text, i) : (s = fg(n.text, i + r[0].length), s > -1 && r[0] == "xmpp:" && (ug.lastIndex = s, r = ug.exec(n.text), r && (s = r.index + r[0].length)));
      return s < 0 ? -1 : (n.addElement(n.elt("URL", t, s + n.offset)), s + n.offset);
    }
  }]
}, q2 = [L2, B2, I2, X2];
function Jx(n, e, t) {
  return (i, r, s) => {
    if (r != n || i.char(s + 1) == n)
      return -1;
    let o = [i.elt(t, s, s + 1)];
    for (let a = s + 1; a < i.end; a++) {
      let l = i.char(a);
      if (l == n)
        return i.addElement(i.elt(e, s, a + 1, o.concat(i.elt(t, a, a + 1))));
      if (l == 92 && o.push(i.elt("Escape", a, a++ + 2)), fn(l))
        break;
    }
    return -1;
  };
}
const V2 = {
  defineNodes: [
    { name: "Superscript", style: k.special(k.content) },
    { name: "SuperscriptMark", style: k.processingInstruction }
  ],
  parseInline: [{
    name: "Superscript",
    parse: Jx(94, "Superscript", "SuperscriptMark")
  }]
}, Y2 = {
  defineNodes: [
    { name: "Subscript", style: k.special(k.content) },
    { name: "SubscriptMark", style: k.processingInstruction }
  ],
  parseInline: [{
    name: "Subscript",
    parse: Jx(126, "Subscript", "SubscriptMark")
  }]
}, F2 = {
  defineNodes: [{ name: "Emoji", style: k.character }],
  parseInline: [{
    name: "Emoji",
    parse(n, e, t) {
      let i;
      return e != 58 || !(i = /^[a-zA-Z_0-9]+:/.exec(n.slice(t + 1, n.end))) ? -1 : n.addElement(n.elt("Emoji", t, t + 1 + i[0].length));
    }
  }]
};
class Wa {
  /**
  @internal
  */
  constructor(e, t, i, r, s, o, a, l, c, u = 0, h) {
    this.p = e, this.stack = t, this.state = i, this.reducePos = r, this.pos = s, this.score = o, this.buffer = a, this.bufferBase = l, this.curContext = c, this.lookAhead = u, this.parent = h;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, i = 0) {
    let r = e.parser.context;
    return new Wa(e, [], t, i, i, 0, [], 0, r ? new dg(r, r.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length), this.state = e;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t;
    let i = e >> 19, r = e & 65535, { parser: s } = this.p, o = this.reducePos < this.pos - 25;
    o && this.setLookAhead(this.pos);
    let a = s.dynamicPrecedence(r);
    if (a && (this.score += a), i == 0) {
      this.pushState(s.getGoto(this.state, r, !0), this.reducePos), r < s.minRepeatTerm && this.storeNode(r, this.reducePos, this.reducePos, o ? 8 : 4, !0), this.reduceContext(r, this.reducePos);
      return;
    }
    let l = this.stack.length - (i - 1) * 3 - (e & 262144 ? 6 : 0), c = l ? this.stack[l - 2] : this.p.ranges[0].from, u = this.reducePos - c;
    u >= 2e3 && !(!((t = this.p.parser.nodeSet.types[r]) === null || t === void 0) && t.isAnonymous) && (c == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = u) : this.p.lastBigReductionSize < u && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = c, this.p.lastBigReductionSize = u));
    let h = l ? this.stack[l - 1] : 0, f = this.bufferBase + this.buffer.length - h;
    if (r < s.minRepeatTerm || e & 131072) {
      let d = s.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(r, c, d, f + 4, !0);
    }
    if (e & 262144)
      this.state = this.stack[l];
    else {
      let d = this.stack[l - 3];
      this.state = s.getGoto(d, r, !0);
    }
    for (; this.stack.length > l; )
      this.stack.pop();
    this.reduceContext(r, c);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, i, r = 4, s = !1) {
    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o = this, a = this.buffer.length;
      if (a == 0 && o.parent && (a = o.bufferBase - o.parent.bufferBase, o = o.parent), a > 0 && o.buffer[a - 4] == 0 && o.buffer[a - 1] > -1) {
        if (t == i)
          return;
        if (o.buffer[a - 2] >= t) {
          o.buffer[a - 2] = i;
          return;
        }
      }
    }
    if (!s || this.pos == i)
      this.buffer.push(e, t, i, r);
    else {
      let o = this.buffer.length;
      if (o > 0 && this.buffer[o - 4] != 0) {
        let a = !1;
        for (let l = o; l > 0 && this.buffer[l - 2] > i; l -= 4)
          if (this.buffer[l - 1] >= 0) {
            a = !0;
            break;
          }
        if (a)
          for (; o > 0 && this.buffer[o - 2] > i; )
            this.buffer[o] = this.buffer[o - 4], this.buffer[o + 1] = this.buffer[o - 3], this.buffer[o + 2] = this.buffer[o - 2], this.buffer[o + 3] = this.buffer[o - 1], o -= 4, r > 4 && (r -= 4);
      }
      this.buffer[o] = e, this.buffer[o + 1] = t, this.buffer[o + 2] = i, this.buffer[o + 3] = r;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, i, r) {
    if (e & 131072)
      this.pushState(e & 65535, this.pos);
    else if ((e & 262144) == 0) {
      let s = e, { parser: o } = this.p;
      (r > this.pos || t <= o.maxNode) && (this.pos = r, o.stateFlag(
        s,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = r)), this.pushState(s, i), this.shiftContext(t, i), t <= o.maxNode && this.buffer.push(t, i, r, 4);
    } else
      this.pos = r, this.shiftContext(t, i), t <= this.p.parser.maxNode && this.buffer.push(t, i, r, 4);
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, i, r) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, i, r);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let i = this.p.reused.length - 1;
    (i < 0 || this.p.reused[i] != e) && (this.p.reused.push(e), i++);
    let r = this.pos;
    this.reducePos = this.pos = r + e.length, this.pushState(t, r), this.buffer.push(
      i,
      r,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this, t = e.buffer.length;
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; )
      t -= 4;
    let i = e.buffer.slice(t), r = e.bufferBase + t;
    for (; e && r == e.bufferBase; )
      e = e.parent;
    return new Wa(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i, r, this.curContext, this.lookAhead, e);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let i = e <= this.p.parser.maxNode;
    i && this.storeNode(e, this.pos, t, 4), this.storeNode(0, this.pos, t, i ? 8 : 4), this.pos = this.reducePos = t, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new U2(this); ; ) {
      let i = this.p.parser.stateSlot(
        t.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(t.state, e);
      if (i == 0)
        return !1;
      if ((i & 65536) == 0)
        return !0;
      t.reduce(i);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300)
      return [];
    let t = this.p.parser.nextStates(this.state);
    if (t.length > 8 || this.stack.length >= 120) {
      let r = [];
      for (let s = 0, o; s < t.length; s += 2)
        (o = t[s + 1]) != this.state && this.p.parser.hasAction(o, e) && r.push(t[s], o);
      if (this.stack.length < 120)
        for (let s = 0; r.length < 8 && s < t.length; s += 2) {
          let o = t[s + 1];
          r.some((a, l) => l & 1 && a == o) || r.push(t[s], o);
        }
      t = r;
    }
    let i = [];
    for (let r = 0; r < t.length && i.length < 4; r += 2) {
      let s = t[r + 1];
      if (s == this.state)
        continue;
      let o = this.split();
      o.pushState(s, this.pos), o.storeNode(0, o.pos, o.pos, 4, !0), o.shiftContext(t[r], this.pos), o.reducePos = this.pos, o.score -= 200, i.push(o);
    }
    return i;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p, t = e.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((t & 65536) == 0)
      return !1;
    if (!e.validAction(this.state, t)) {
      let i = t >> 19, r = t & 65535, s = this.stack.length - i * 3;
      if (s < 0 || e.getGoto(this.stack[s], r, !1) < 0) {
        let o = this.findForcedReduction();
        if (o == null)
          return !1;
        t = o;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p, t = [], i = (r, s) => {
      if (!t.includes(r))
        return t.push(r), e.allActions(r, (o) => {
          if (!(o & 393216)) if (o & 65536) {
            let a = (o >> 19) - s;
            if (a > 1) {
              let l = o & 65535, c = this.stack.length - a * 3;
              if (c >= 0 && e.getGoto(this.stack[c], l, !1) >= 0)
                return a << 19 | 65536 | l;
            }
          } else {
            let a = i(o, s + 1);
            if (a != null)
              return a;
          }
        });
    };
    return i(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: e } = this.p;
    return e.data[e.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !e.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length)
      return !1;
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e];
  }
  shiftContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  reduceContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new dg(this.curContext.tracker, e);
      t.hash != this.curContext.hash && this.emitContext(), this.curContext = t;
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class dg {
  constructor(e, t) {
    this.tracker = e, this.context = t, this.hash = e.strict ? e.hash(t) : 0;
  }
}
class U2 {
  constructor(e) {
    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;
  }
  reduce(e) {
    let t = e & 65535, i = e >> 19;
    i == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i - 1) * 3;
    let r = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
    this.state = r;
  }
}
class ja {
  constructor(e, t, i) {
    this.stack = e, this.pos = t, this.index = i, this.buffer = e.buffer, this.index == 0 && this.maybeNext();
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new ja(e, t, t - e.bufferBase);
  }
  maybeNext() {
    let e = this.stack.parent;
    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new ja(this.stack, this.pos, this.index);
  }
}
function fs(n, e = Uint16Array) {
  if (typeof n != "string")
    return n;
  let t = null;
  for (let i = 0, r = 0; i < n.length; ) {
    let s = 0;
    for (; ; ) {
      let o = n.charCodeAt(i++), a = !1;
      if (o == 126) {
        s = 65535;
        break;
      }
      o >= 92 && o--, o >= 34 && o--;
      let l = o - 32;
      if (l >= 46 && (l -= 46, a = !0), s += l, a)
        break;
      s *= 46;
    }
    t ? t[r++] = s : t = new e(s);
  }
  return t;
}
class ma {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const pg = new ma();
class G2 {
  /**
  @internal
  */
  constructor(e, t) {
    this.input = e, this.ranges = t, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = pg, this.rangeIndex = 0, this.pos = this.chunkPos = t[0].from, this.range = t[0], this.end = t[t.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let i = this.range, r = this.rangeIndex, s = this.pos + e;
    for (; s < i.from; ) {
      if (!r)
        return null;
      let o = this.ranges[--r];
      s -= i.from - o.to, i = o;
    }
    for (; t < 0 ? s > i.to : s >= i.to; ) {
      if (r == this.ranges.length - 1)
        return null;
      let o = this.ranges[++r];
      s += o.from - i.to, i = o;
    }
    return s;
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to)
      return e;
    for (let t of this.ranges)
      if (t.to > e)
        return Math.max(e, t.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e, i, r;
    if (t >= 0 && t < this.chunk.length)
      i = this.pos + e, r = this.chunk.charCodeAt(t);
    else {
      let s = this.resolveOffset(e, 1);
      if (s == null)
        return -1;
      if (i = s, i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
        r = this.chunk2.charCodeAt(i - this.chunk2Pos);
      else {
        let o = this.rangeIndex, a = this.range;
        for (; a.to <= i; )
          a = this.ranges[++o];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i), i + this.chunk2.length > a.to && (this.chunk2 = this.chunk2.slice(0, a.to - i)), r = this.chunk2.charCodeAt(0);
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), r;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let i = t ? this.resolveOffset(t, -1) : this.pos;
    if (i == null || i < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = e, this.token.end = i;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(e, t) {
    this.token.value = e, this.token.end = t;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: e, chunkPos: t } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = t, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let e = this.input.chunk(this.pos), t = this.pos + e.length;
      this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(e, t) {
    if (t ? (this.token = t, t.start = e, t.lookAhead = e + 1, t.value = t.extended = -1) : this.token = pg, this.pos != e) {
      if (this.pos = e, e == this.end)
        return this.setDone(), this;
      for (; e < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; e >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
    if (e >= this.range.from && t <= this.range.to)
      return this.input.read(e, t);
    let i = "";
    for (let r of this.ranges) {
      if (r.from >= t)
        break;
      r.to > e && (i += this.input.read(Math.max(r.from, e), Math.min(r.to, t)));
    }
    return i;
  }
}
class dr {
  constructor(e, t) {
    this.data = e, this.id = t;
  }
  token(e, t) {
    let { parser: i } = t.p;
    ek(this.data, e, t, this.id, i.data, i.tokenPrecTable);
  }
}
dr.prototype.contextual = dr.prototype.fallback = dr.prototype.extend = !1;
class Ha {
  constructor(e, t, i) {
    this.precTable = t, this.elseToken = i, this.data = typeof e == "string" ? fs(e) : e;
  }
  token(e, t) {
    let i = e.pos, r = 0;
    for (; ; ) {
      let s = e.next < 0, o = e.resolveOffset(1, 1);
      if (ek(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (s || r++, o == null)
        break;
      e.reset(o, e.token);
    }
    r && (e.reset(i, e.token), e.acceptToken(this.elseToken, r));
  }
}
Ha.prototype.contextual = dr.prototype.fallback = dr.prototype.extend = !1;
class tn {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    this.token = e, this.contextual = !!t.contextual, this.fallback = !!t.fallback, this.extend = !!t.extend;
  }
}
function ek(n, e, t, i, r, s) {
  let o = 0, a = 1 << i, { dialect: l } = t.p.parser;
  e: for (; (a & n[o]) != 0; ) {
    let c = n[o + 1];
    for (let d = o + 3; d < c; d += 2)
      if ((n[d + 1] & a) > 0) {
        let p = n[d];
        if (l.allows(p) && (e.token.value == -1 || e.token.value == p || W2(p, e.token.value, r, s))) {
          e.acceptToken(p);
          break;
        }
      }
    let u = e.next, h = 0, f = n[o + 2];
    if (e.next < 0 && f > h && n[c + f * 3 - 3] == 65535) {
      o = n[c + f * 3 - 1];
      continue e;
    }
    for (; h < f; ) {
      let d = h + f >> 1, p = c + d + (d << 1), m = n[p], O = n[p + 1] || 65536;
      if (u < m)
        f = d;
      else if (u >= O)
        h = d + 1;
      else {
        o = n[p + 2], e.advance();
        continue e;
      }
    }
    break;
  }
}
function mg(n, e, t) {
  for (let i = e, r; (r = n[i]) != 65535; i++)
    if (r == t)
      return i - e;
  return -1;
}
function W2(n, e, t, i) {
  let r = mg(t, i, e);
  return r < 0 || mg(t, i, n) < r;
}
const Ut = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let kc = null;
function gg(n, e, t) {
  let i = n.cursor(Ye.IncludeAnonymous);
  for (i.moveTo(e); ; )
    if (!(t < 0 ? i.childBefore(e) : i.childAfter(e)))
      for (; ; ) {
        if ((t < 0 ? i.to < e : i.from > e) && !i.type.isError)
          return t < 0 ? Math.max(0, Math.min(
            i.to - 1,
            e - 25
            /* Lookahead.Margin */
          )) : Math.min(n.length, Math.max(
            i.from + 1,
            e + 25
            /* Lookahead.Margin */
          ));
        if (t < 0 ? i.prevSibling() : i.nextSibling())
          break;
        if (!i.parent())
          return t < 0 ? 0 : n.length;
      }
}
class j2 {
  constructor(e, t) {
    this.fragments = e, this.nodeSet = t, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (e) {
      for (this.safeFrom = e.openStart ? gg(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? gg(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= e; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let t = this.trees.length - 1;
      if (t < 0)
        return this.nextFragment(), null;
      let i = this.trees[t], r = this.index[t];
      if (r == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let s = i.children[r], o = this.start[t] + i.positions[r];
      if (o > e)
        return this.nextStart = o, null;
      if (s instanceof Me) {
        if (o == e) {
          if (o < this.safeFrom)
            return null;
          let a = o + s.length;
          if (a <= this.safeTo) {
            let l = s.prop(pe.lookAhead);
            if (!l || a + l < this.fragment.to)
              return s;
          }
        }
        this.index[t]++, o + s.length >= Math.max(this.safeFrom, e) && (this.trees.push(s), this.start.push(o), this.index.push(0));
      } else
        this.index[t]++, this.nextStart = o + s.length;
    }
  }
}
class H2 {
  constructor(e, t) {
    this.stream = t, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((i) => new ma());
  }
  getActions(e) {
    let t = 0, i = null, { parser: r } = e.p, { tokenizers: s } = r, o = r.stateSlot(
      e.state,
      3
      /* ParseState.TokenizerMask */
    ), a = e.curContext ? e.curContext.hash : 0, l = 0;
    for (let c = 0; c < s.length; c++) {
      if ((1 << c & o) == 0)
        continue;
      let u = s[c], h = this.tokens[c];
      if (!(i && !u.fallback) && ((u.contextual || h.start != e.pos || h.mask != o || h.context != a) && (this.updateCachedToken(h, u, e), h.mask = o, h.context = a), h.lookAhead > h.end + 25 && (l = Math.max(h.lookAhead, l)), h.value != 0)) {
        let f = t;
        if (h.extended > -1 && (t = this.addActions(e, h.extended, h.end, t)), t = this.addActions(e, h.value, h.end, t), !u.extend && (i = h, t > f))
          break;
      }
    }
    for (; this.actions.length > t; )
      this.actions.pop();
    return l && e.setLookAhead(l), !i && e.pos == this.stream.end && (i = new ma(), i.value = e.p.parser.eofTerm, i.start = i.end = e.pos, t = this.addActions(e, i.value, i.end, t)), this.mainToken = i, this.actions;
  }
  getMainToken(e) {
    if (this.mainToken)
      return this.mainToken;
    let t = new ma(), { pos: i, p: r } = e;
    return t.start = i, t.end = Math.min(i + 1, r.stream.end), t.value = i == r.stream.end ? r.parser.eofTerm : 0, t;
  }
  updateCachedToken(e, t, i) {
    let r = this.stream.clipPos(i.pos);
    if (t.token(this.stream.reset(r, e), i), e.value > -1) {
      let { parser: s } = i.p;
      for (let o = 0; o < s.specialized.length; o++)
        if (s.specialized[o] == e.value) {
          let a = s.specializers[o](this.stream.read(e.start, e.end), i);
          if (a >= 0 && i.p.parser.dialect.allows(a >> 1)) {
            (a & 1) == 0 ? e.value = a >> 1 : e.extended = a >> 1;
            break;
          }
        }
    } else
      e.value = 0, e.end = this.stream.clipPos(r + 1);
  }
  putAction(e, t, i, r) {
    for (let s = 0; s < r; s += 3)
      if (this.actions[s] == e)
        return r;
    return this.actions[r++] = e, this.actions[r++] = t, this.actions[r++] = i, r;
  }
  addActions(e, t, i, r) {
    let { state: s } = e, { parser: o } = e.p, { data: a } = o;
    for (let l = 0; l < 2; l++)
      for (let c = o.stateSlot(
        s,
        l ? 2 : 1
        /* ParseState.Actions */
      ); ; c += 3) {
        if (a[c] == 65535)
          if (a[c + 1] == 1)
            c = jn(a, c + 2);
          else {
            r == 0 && a[c + 1] == 2 && (r = this.putAction(jn(a, c + 2), t, i, r));
            break;
          }
        a[c] == t && (r = this.putAction(jn(a, c + 1), t, i, r));
      }
    return r;
  }
}
class K2 {
  constructor(e, t, i, r) {
    this.parser = e, this.input = t, this.ranges = r, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new G2(t, r), this.tokens = new H2(e, this.stream), this.topTerm = e.top[1];
    let { from: s } = r[0];
    this.stacks = [Wa.start(this, e.top[0], s)], this.fragments = i.length && this.stream.end - s > e.bufferLength * 4 ? new j2(i, e.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks, t = this.minStackPos, i = this.stacks = [], r, s;
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [o] = e;
      for (; o.forceReduce() && o.stack.length && o.stack[o.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o = 0; o < e.length; o++) {
      let a = e[o];
      for (; ; ) {
        if (this.tokens.mainToken = null, a.pos > t)
          i.push(a);
        else {
          if (this.advanceStack(a, i, e))
            continue;
          {
            r || (r = [], s = []), r.push(a);
            let l = this.tokens.getMainToken(a);
            s.push(l.value, l.end);
          }
        }
        break;
      }
    }
    if (!i.length) {
      let o = r && eD(r);
      if (o)
        return Ut && console.log("Finish with " + this.stackID(o)), this.stackToTree(o);
      if (this.parser.strict)
        throw Ut && r && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + t);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && r) {
      let o = this.stoppedAt != null && r[0].pos > this.stoppedAt ? r[0] : this.runRecovery(r, s, i);
      if (o)
        return Ut && console.log("Force-finish " + this.stackID(o)), this.stackToTree(o.forceAll());
    }
    if (this.recovering) {
      let o = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i.length > o)
        for (i.sort((a, l) => l.score - a.score); i.length > o; )
          i.pop();
      i.some((a) => a.reducePos > t) && this.recovering--;
    } else if (i.length > 1) {
      e: for (let o = 0; o < i.length - 1; o++) {
        let a = i[o];
        for (let l = o + 1; l < i.length; l++) {
          let c = i[l];
          if (a.sameState(c) || a.buffer.length > 500 && c.buffer.length > 500)
            if ((a.score - c.score || a.buffer.length - c.buffer.length) > 0)
              i.splice(l--, 1);
            else {
              i.splice(o--, 1);
              continue e;
            }
        }
      }
      i.length > 12 && i.splice(
        12,
        i.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i[0].pos;
    for (let o = 1; o < i.length; o++)
      i[o].pos < this.minStackPos && (this.minStackPos = i[o].pos);
    return null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, i) {
    let r = e.pos, { parser: s } = this, o = Ut ? this.stackID(e) + " -> " : "";
    if (this.stoppedAt != null && r > this.stoppedAt)
      return e.forceReduce() ? e : null;
    if (this.fragments) {
      let c = e.curContext && e.curContext.tracker.strict, u = c ? e.curContext.hash : 0;
      for (let h = this.fragments.nodeAt(r); h; ) {
        let f = this.parser.nodeSet.types[h.type.id] == h.type ? s.getGoto(e.state, h.type.id) : -1;
        if (f > -1 && h.length && (!c || (h.prop(pe.contextHash) || 0) == u))
          return e.useNode(h, f), Ut && console.log(o + this.stackID(e) + ` (via reuse of ${s.getName(h.type.id)})`), !0;
        if (!(h instanceof Me) || h.children.length == 0 || h.positions[0] > 0)
          break;
        let d = h.children[0];
        if (d instanceof Me && h.positions[0] == 0)
          h = d;
        else
          break;
      }
    }
    let a = s.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (a > 0)
      return e.reduce(a), Ut && console.log(o + this.stackID(e) + ` (via always-reduce ${s.getName(
        a & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); )
        ;
    let l = this.tokens.getActions(e);
    for (let c = 0; c < l.length; ) {
      let u = l[c++], h = l[c++], f = l[c++], d = c == l.length || !i, p = d ? e : e.split(), m = this.tokens.mainToken;
      if (p.apply(u, h, m ? m.start : p.pos, f), Ut && console.log(o + this.stackID(p) + ` (via ${(u & 65536) == 0 ? "shift" : `reduce of ${s.getName(
        u & 65535
        /* Action.ValueMask */
      )}`} for ${s.getName(h)} @ ${r}${p == e ? "" : ", split"})`), d)
        return !0;
      p.pos > r ? t.push(p) : i.push(p);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let i = e.pos;
    for (; ; ) {
      if (!this.advanceStack(e, null, null))
        return !1;
      if (e.pos > i)
        return Og(e, t), !0;
    }
  }
  runRecovery(e, t, i) {
    let r = null, s = !1;
    for (let o = 0; o < e.length; o++) {
      let a = e[o], l = t[o << 1], c = t[(o << 1) + 1], u = Ut ? this.stackID(a) + " -> " : "";
      if (a.deadEnd && (s || (s = !0, a.restart(), Ut && console.log(u + this.stackID(a) + " (restarted)"), this.advanceFully(a, i))))
        continue;
      let h = a.split(), f = u;
      for (let d = 0; h.forceReduce() && d < 10 && (Ut && console.log(f + this.stackID(h) + " (via force-reduce)"), !this.advanceFully(h, i)); d++)
        Ut && (f = this.stackID(h) + " -> ");
      for (let d of a.recoverByInsert(l))
        Ut && console.log(u + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, i);
      this.stream.end > a.pos ? (c == a.pos && (c++, l = 0), a.recoverByDelete(l, c), Ut && console.log(u + this.stackID(a) + ` (via recover-delete ${this.parser.getName(l)})`), Og(a, i)) : (!r || r.score < a.score) && (r = a);
    }
    return r;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return e.close(), Me.build({
      buffer: ja.create(e),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: e.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(e) {
    let t = (kc || (kc = /* @__PURE__ */ new WeakMap())).get(e);
    return t || kc.set(e, t = String.fromCodePoint(this.nextStackID++)), t + e;
  }
}
function Og(n, e) {
  for (let t = 0; t < e.length; t++) {
    let i = e[t];
    if (i.pos == n.pos && i.sameState(n)) {
      e[t].score < n.score && (e[t] = n);
      return;
    }
  }
  e.push(n);
}
class J2 {
  constructor(e, t, i) {
    this.source = e, this.flags = t, this.disabled = i;
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0;
  }
}
const Sc = (n) => n;
class tk {
  /**
  Define a context tracker.
  */
  constructor(e) {
    this.start = e.start, this.shift = e.shift || Sc, this.reduce = e.reduce || Sc, this.reuse = e.reuse || Sc, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;
  }
}
class Er extends Kh {
  /**
  @internal
  */
  constructor(e) {
    if (super(), this.wrappers = [], e.version != 14)
      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
    let t = e.nodeNames.split(" ");
    this.minRepeatTerm = t.length;
    for (let a = 0; a < e.repeatNodeCount; a++)
      t.push("");
    let i = Object.keys(e.topRules).map((a) => e.topRules[a][1]), r = [];
    for (let a = 0; a < t.length; a++)
      r.push([]);
    function s(a, l, c) {
      r[a].push([l, l.deserialize(String(c))]);
    }
    if (e.nodeProps)
      for (let a of e.nodeProps) {
        let l = a[0];
        typeof l == "string" && (l = pe[l]);
        for (let c = 1; c < a.length; ) {
          let u = a[c++];
          if (u >= 0)
            s(u, l, a[c++]);
          else {
            let h = a[c + -u];
            for (let f = -u; f > 0; f--)
              s(a[c++], l, h);
            c++;
          }
        }
      }
    this.nodeSet = new io(t.map((a, l) => ut.define({
      name: l >= this.minRepeatTerm ? void 0 : a,
      id: l,
      props: r[l],
      top: i.indexOf(l) > -1,
      error: l == 0,
      skipped: e.skippedNodes && e.skippedNodes.indexOf(l) > -1
    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = i0;
    let o = fs(e.tokenData);
    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let a = 0; a < this.specializerSpecs.length; a++)
      this.specialized[a] = this.specializerSpecs[a].term;
    this.specializers = this.specializerSpecs.map(bg), this.states = fs(e.states, Uint32Array), this.data = fs(e.stateData), this.goto = fs(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((a) => typeof a == "number" ? new dr(o, a) : a), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(e, t, i) {
    let r = new K2(this, e, t, i);
    for (let s of this.wrappers)
      r = s(r, e, t, i);
    return r;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, i = !1) {
    let r = this.goto;
    if (t >= r[0])
      return -1;
    for (let s = r[t + 1]; ; ) {
      let o = r[s++], a = o & 1, l = r[s++];
      if (a && i)
        return l;
      for (let c = s + (o >> 1); s < c; s++)
        if (r[s] == e)
          return l;
      if (a)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let i = this.data;
    for (let r = 0; r < 2; r++)
      for (let s = this.stateSlot(
        e,
        r ? 2 : 1
        /* ParseState.Actions */
      ), o; ; s += 3) {
        if ((o = i[s]) == 65535)
          if (i[s + 1] == 1)
            o = i[s = jn(i, s + 2)];
          else {
            if (i[s + 1] == 2)
              return jn(i, s + 2);
            break;
          }
        if (o == t || o == 0)
          return jn(i, s + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t];
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (this.stateSlot(
      e,
      0
      /* ParseState.Flags */
    ) & t) > 0;
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (i) => i == t ? !0 : null);
  }
  /**
  @internal
  */
  allActions(e, t) {
    let i = this.stateSlot(
      e,
      4
      /* ParseState.DefaultReduce */
    ), r = i ? t(i) : void 0;
    for (let s = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); r == null; s += 3) {
      if (this.data[s] == 65535)
        if (this.data[s + 1] == 1)
          s = jn(this.data, s + 2);
        else
          break;
      r = t(jn(this.data, s + 1));
    }
    return r;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = [];
    for (let i = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1)
          i = jn(this.data, i + 2);
        else
          break;
      if ((this.data[i + 2] & 1) == 0) {
        let r = this.data[i + 1];
        t.some((s, o) => o & 1 && s == r) || t.push(this.data[i], r);
      }
    }
    return t;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(Er.prototype), this);
    if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top) {
      let i = this.topRules[e.top];
      if (!i)
        throw new RangeError(`Invalid top rule name ${e.top}`);
      t.top = i;
    }
    return e.tokenizers && (t.tokenizers = this.tokenizers.map((i) => {
      let r = e.tokenizers.find((s) => s.from == i);
      return r ? r.to : i;
    })), e.specializers && (t.specializers = this.specializers.slice(), t.specializerSpecs = this.specializerSpecs.map((i, r) => {
      let s = e.specializers.find((a) => a.from == i.external);
      if (!s)
        return i;
      let o = Object.assign(Object.assign({}, i), { external: s.to });
      return t.specializers[r] = bg(o), o;
    })), e.contextTracker && (t.context = e.contextTracker), e.dialect && (t.dialect = this.parseDialect(e.dialect)), e.strict != null && (t.strict = e.strict), e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)), e.bufferLength != null && (t.bufferLength = e.bufferLength), t;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences;
    return t == null ? 0 : t[e] || 0;
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects), i = t.map(() => !1);
    if (e)
      for (let s of e.split(" ")) {
        let o = t.indexOf(s);
        o >= 0 && (i[o] = !0);
      }
    let r = null;
    for (let s = 0; s < t.length; s++)
      if (!i[s])
        for (let o = this.dialects[t[s]], a; (a = this.data[o++]) != 65535; )
          (r || (r = new Uint8Array(this.maxTerm + 1)))[a] = 1;
    return new J2(e, i, r);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new Er(e);
  }
}
function jn(n, e) {
  return n[e] | n[e + 1] << 16;
}
function eD(n) {
  let e = null;
  for (let t of n) {
    let i = t.p.stoppedAt;
    (t.pos == t.p.stream.end || i != null && t.pos > i) && t.p.parser.stateFlag(
      t.state,
      2
      /* StateFlag.Accepting */
    ) && (!e || e.score < t.score) && (e = t);
  }
  return e;
}
function bg(n) {
  if (n.external) {
    let e = n.extend ? 1 : 0;
    return (t, i) => n.external(t, i) << 1 | e;
  }
  return n.get;
}
const tD = 54, nD = 1, iD = 55, rD = 2, sD = 56, oD = 3, yg = 4, aD = 5, Ka = 6, nk = 7, ik = 8, rk = 9, sk = 10, lD = 11, cD = 12, uD = 13, wc = 57, hD = 14, xg = 58, ok = 20, fD = 22, ak = 23, dD = 24, ih = 26, lk = 27, pD = 28, mD = 31, gD = 34, OD = 36, bD = 37, yD = 0, xD = 1, kD = {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0,
  menuitem: !0
}, SD = {
  dd: !0,
  li: !0,
  optgroup: !0,
  option: !0,
  p: !0,
  rp: !0,
  rt: !0,
  tbody: !0,
  td: !0,
  tfoot: !0,
  th: !0,
  tr: !0
}, kg = {
  dd: { dd: !0, dt: !0 },
  dt: { dd: !0, dt: !0 },
  li: { li: !0 },
  option: { option: !0, optgroup: !0 },
  optgroup: { optgroup: !0 },
  p: {
    address: !0,
    article: !0,
    aside: !0,
    blockquote: !0,
    dir: !0,
    div: !0,
    dl: !0,
    fieldset: !0,
    footer: !0,
    form: !0,
    h1: !0,
    h2: !0,
    h3: !0,
    h4: !0,
    h5: !0,
    h6: !0,
    header: !0,
    hgroup: !0,
    hr: !0,
    menu: !0,
    nav: !0,
    ol: !0,
    p: !0,
    pre: !0,
    section: !0,
    table: !0,
    ul: !0
  },
  rp: { rp: !0, rt: !0 },
  rt: { rp: !0, rt: !0 },
  tbody: { tbody: !0, tfoot: !0 },
  td: { td: !0, th: !0 },
  tfoot: { tbody: !0 },
  th: { td: !0, th: !0 },
  thead: { tbody: !0, tfoot: !0 },
  tr: { tr: !0 }
};
function wD(n) {
  return n == 45 || n == 46 || n == 58 || n >= 65 && n <= 90 || n == 95 || n >= 97 && n <= 122 || n >= 161;
}
function ck(n) {
  return n == 9 || n == 10 || n == 13 || n == 32;
}
let Sg = null, wg = null, vg = 0;
function rh(n, e) {
  let t = n.pos + e;
  if (vg == t && wg == n) return Sg;
  let i = n.peek(e);
  for (; ck(i); ) i = n.peek(++e);
  let r = "";
  for (; wD(i); )
    r += String.fromCharCode(i), i = n.peek(++e);
  return wg = n, vg = t, Sg = r ? r.toLowerCase() : i == vD || i == ED ? void 0 : null;
}
const uk = 60, Ja = 62, wf = 47, vD = 63, ED = 33, _D = 45;
function Eg(n, e) {
  this.name = n, this.parent = e;
}
const QD = [Ka, sk, nk, ik, rk], CD = new tk({
  start: null,
  shift(n, e, t, i) {
    return QD.indexOf(e) > -1 ? new Eg(rh(i, 1) || "", n) : n;
  },
  reduce(n, e) {
    return e == ok && n ? n.parent : n;
  },
  reuse(n, e, t, i) {
    let r = e.type.id;
    return r == Ka || r == OD ? new Eg(rh(i, 1) || "", n) : n;
  },
  strict: !1
}), TD = new tn((n, e) => {
  if (n.next != uk) {
    n.next < 0 && e.context && n.acceptToken(wc);
    return;
  }
  n.advance();
  let t = n.next == wf;
  t && n.advance();
  let i = rh(n, 0);
  if (i === void 0) return;
  if (!i) return n.acceptToken(t ? hD : Ka);
  let r = e.context ? e.context.name : null;
  if (t) {
    if (i == r) return n.acceptToken(lD);
    if (r && SD[r]) return n.acceptToken(wc, -2);
    if (e.dialectEnabled(yD)) return n.acceptToken(cD);
    for (let s = e.context; s; s = s.parent) if (s.name == i) return;
    n.acceptToken(uD);
  } else {
    if (i == "script") return n.acceptToken(nk);
    if (i == "style") return n.acceptToken(ik);
    if (i == "textarea") return n.acceptToken(rk);
    if (kD.hasOwnProperty(i)) return n.acceptToken(sk);
    r && kg[r] && kg[r][i] ? n.acceptToken(wc, -1) : n.acceptToken(Ka);
  }
}, { contextual: !0 }), PD = new tn((n) => {
  for (let e = 0, t = 0; ; t++) {
    if (n.next < 0) {
      t && n.acceptToken(xg);
      break;
    }
    if (n.next == _D)
      e++;
    else if (n.next == Ja && e >= 2) {
      t >= 3 && n.acceptToken(xg, -2);
      break;
    } else
      e = 0;
    n.advance();
  }
});
function AD(n) {
  for (; n; n = n.parent)
    if (n.name == "svg" || n.name == "math") return !0;
  return !1;
}
const $D = new tn((n, e) => {
  if (n.next == wf && n.peek(1) == Ja) {
    let t = e.dialectEnabled(xD) || AD(e.context);
    n.acceptToken(t ? aD : yg, 2);
  } else n.next == Ja && n.acceptToken(yg, 1);
});
function vf(n, e, t) {
  let i = 2 + n.length;
  return new tn((r) => {
    for (let s = 0, o = 0, a = 0; ; a++) {
      if (r.next < 0) {
        a && r.acceptToken(e);
        break;
      }
      if (s == 0 && r.next == uk || s == 1 && r.next == wf || s >= 2 && s < i && r.next == n.charCodeAt(s - 2))
        s++, o++;
      else if ((s == 2 || s == i) && ck(r.next))
        o++;
      else if (s == i && r.next == Ja) {
        a > o ? r.acceptToken(e, -o) : r.acceptToken(t, -(o - 2));
        break;
      } else if ((r.next == 10 || r.next == 13) && a) {
        r.acceptToken(e, 1);
        break;
      } else
        s = o = 0;
      r.advance();
    }
  });
}
const RD = vf("script", tD, nD), MD = vf("style", iD, rD), ND = vf("textarea", sD, oD), ID = Nr({
  "Text RawText": k.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": k.angleBracket,
  TagName: k.tagName,
  "MismatchedCloseTag/TagName": [k.tagName, k.invalid],
  AttributeName: k.attributeName,
  "AttributeValue UnquotedAttributeValue": k.attributeValue,
  Is: k.definitionOperator,
  "EntityReference CharacterReference": k.character,
  Comment: k.blockComment,
  ProcessingInst: k.processingInstruction,
  DoctypeDecl: k.documentMeta
}), LD = Er.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: CD,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [ID],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [RD, MD, ND, $D, TD, PD, 0, 1, 2, 3, 4, 5],
  topRules: { Document: [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function hk(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let i of n.getChildren(ak)) {
    let r = i.getChild(dD), s = i.getChild(ih) || i.getChild(lk);
    r && (t[e.read(r.from, r.to)] = s ? s.type.id == ih ? e.read(s.from + 1, s.to - 1) : e.read(s.from, s.to) : "");
  }
  return t;
}
function _g(n, e) {
  let t = n.getChild(fD);
  return t ? e.read(t.from, t.to) : " ";
}
function vc(n, e, t) {
  let i;
  for (let r of t)
    if (!r.attrs || r.attrs(i || (i = hk(n.node.parent.firstChild, e))))
      return { parser: r.parser };
  return null;
}
function fk(n = [], e = []) {
  let t = [], i = [], r = [], s = [];
  for (let a of n)
    (a.tag == "script" ? t : a.tag == "style" ? i : a.tag == "textarea" ? r : s).push(a);
  let o = e.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let a of e) (o[a.name] || (o[a.name] = [])).push(a);
  return l0((a, l) => {
    let c = a.type.id;
    if (c == pD) return vc(a, l, t);
    if (c == mD) return vc(a, l, i);
    if (c == gD) return vc(a, l, r);
    if (c == ok && s.length) {
      let u = a.node, h = u.firstChild, f = h && _g(h, l), d;
      if (f) {
        for (let p of s)
          if (p.tag == f && (!p.attrs || p.attrs(d || (d = hk(h, l))))) {
            let m = u.lastChild, O = m.type.id == bD ? m.from : u.to;
            if (O > h.to)
              return { parser: p.parser, overlay: [{ from: h.to, to: O }] };
          }
      }
    }
    if (o && c == ak) {
      let u = a.node, h;
      if (h = u.firstChild) {
        let f = o[l.read(h.from, h.to)];
        if (f) for (let d of f) {
          if (d.tagName && d.tagName != _g(u.parent, l)) continue;
          let p = u.lastChild;
          if (p.type.id == ih) {
            let m = p.from + 1, O = p.lastChild, g = p.to - (O && O.isError ? 0 : 1);
            if (g > m) return { parser: d.parser, overlay: [{ from: m, to: g }] };
          } else if (p.type.id == lk)
            return { parser: d.parser, overlay: [{ from: p.from, to: p.to }] };
        }
      }
    }
    return null;
  });
}
const DD = 122, Qg = 1, BD = 123, zD = 124, dk = 2, ZD = 125, XD = 3, qD = 4, pk = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], VD = 58, YD = 40, mk = 95, FD = 91, ga = 45, UD = 46, GD = 35, WD = 37, jD = 38, HD = 92, KD = 10, JD = 42;
function Us(n) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n >= 161;
}
function Ef(n) {
  return n >= 48 && n <= 57;
}
function Cg(n) {
  return Ef(n) || n >= 97 && n <= 102 || n >= 65 && n <= 70;
}
const gk = (n, e, t) => (i, r) => {
  for (let s = !1, o = 0, a = 0; ; a++) {
    let { next: l } = i;
    if (Us(l) || l == ga || l == mk || s && Ef(l))
      !s && (l != ga || a > 0) && (s = !0), o === a && l == ga && o++, i.advance();
    else if (l == HD && i.peek(1) != KD) {
      if (i.advance(), Cg(i.next)) {
        do
          i.advance();
        while (Cg(i.next));
        i.next == 32 && i.advance();
      } else i.next > -1 && i.advance();
      s = !0;
    } else {
      s && i.acceptToken(
        o == 2 && r.canShift(dk) ? e : l == YD ? t : n
      );
      break;
    }
  }
}, eB = new tn(
  gk(BD, dk, zD)
), tB = new tn(
  gk(ZD, XD, qD)
), nB = new tn((n) => {
  if (pk.includes(n.peek(-1))) {
    let { next: e } = n;
    (Us(e) || e == mk || e == GD || e == UD || e == JD || e == FD || e == VD && Us(n.peek(1)) || e == ga || e == jD) && n.acceptToken(DD);
  }
}), iB = new tn((n) => {
  if (!pk.includes(n.peek(-1))) {
    let { next: e } = n;
    if (e == WD && (n.advance(), n.acceptToken(Qg)), Us(e)) {
      do
        n.advance();
      while (Us(n.next) || Ef(n.next));
      n.acceptToken(Qg);
    }
  }
}), rB = Nr({
  "AtKeyword import charset namespace keyframes media supports": k.definitionKeyword,
  "from to selector": k.keyword,
  NamespaceName: k.namespace,
  KeyframeName: k.labelName,
  KeyframeRangeName: k.operatorKeyword,
  TagName: k.tagName,
  ClassName: k.className,
  PseudoClassName: k.constant(k.className),
  IdName: k.labelName,
  "FeatureName PropertyName": k.propertyName,
  AttributeName: k.attributeName,
  NumberLiteral: k.number,
  KeywordQuery: k.keyword,
  UnaryQueryOp: k.operatorKeyword,
  "CallTag ValueName": k.atom,
  VariableName: k.variableName,
  Callee: k.operatorKeyword,
  Unit: k.unit,
  "UniversalSelector NestingSelector": k.definitionOperator,
  "MatchOp CompareOp": k.compareOperator,
  "ChildOp SiblingOp, LogicOp": k.logicOperator,
  BinOp: k.arithmeticOperator,
  Important: k.modifier,
  Comment: k.blockComment,
  ColorLiteral: k.color,
  "ParenthesizedContent StringLiteral": k.string,
  ":": k.punctuation,
  "PseudoOp #": k.derefOperator,
  "; ,": k.separator,
  "( )": k.paren,
  "[ ]": k.squareBracket,
  "{ }": k.brace
}), sB = { __proto__: null, lang: 38, "nth-child": 38, "nth-last-child": 38, "nth-of-type": 38, "nth-last-of-type": 38, dir: 38, "host-context": 38, if: 84, url: 124, "url-prefix": 124, domain: 124, regexp: 124 }, oB = { __proto__: null, or: 98, and: 98, not: 106, only: 106, layer: 170 }, aB = { __proto__: null, selector: 112, layer: 166 }, lB = { __proto__: null, "@import": 162, "@media": 174, "@charset": 178, "@namespace": 182, "@keyframes": 188, "@supports": 200, "@scope": 204 }, cB = { __proto__: null, to: 207 }, uB = Er.deserialize({
  version: 14,
  states: "EbQYQdOOO#qQdOOP#xO`OOOOQP'#Cf'#CfOOQP'#Ce'#CeO#}QdO'#ChO$nQaO'#CcO$xQdO'#CkO%TQdO'#DpO%YQdO'#DrO%_QdO'#DuO%_QdO'#DxOOQP'#FV'#FVO&eQhO'#EhOOQS'#FU'#FUOOQS'#Ek'#EkQYQdOOO&lQdO'#EOO&PQhO'#EUO&lQdO'#EWO'aQdO'#EYO'lQdO'#E]O'tQhO'#EcO(VQdO'#EeO(bQaO'#CfO)VQ`O'#D{O)[Q`O'#F`O)gQdO'#F`QOQ`OOP)qO&jO'#CaPOOO)C@t)C@tOOQP'#Cj'#CjOOQP,59S,59SO#}QdO,59SO)|QdO,59VO%TQdO,5:[O%YQdO,5:^O%_QdO,5:aO%_QdO,5:cO%_QdO,5:dO%_QdO'#ErO*XQ`O,58}O*aQdO'#DzOOQS,58},58}OOQP'#Cn'#CnOOQO'#Dn'#DnOOQP,59V,59VO*hQ`O,59VO*mQ`O,59VOOQP'#Dq'#DqOOQP,5:[,5:[OOQO'#Ds'#DsO*rQpO,5:^O+]QaO,5:aO+sQaO,5:dOOQW'#DZ'#DZO,ZQhO'#DdO,xQhO'#FaO'tQhO'#DbO-WQ`O'#DhOOQW'#F['#F[O-]Q`O,5;SO-eQ`O'#DeOOQS-E8i-E8iOOQ['#Cs'#CsO-jQdO'#CtO.QQdO'#CzO.hQdO'#C}O/OQ!pO'#DPO1RQ!jO,5:jOOQO'#DU'#DUO*mQ`O'#DTO1cQ!nO'#FXO3`Q`O'#DVO3eQ`O'#DkOOQ['#FX'#FXO-`Q`O,5:pO3jQ!bO,5:rOOQS'#E['#E[O3rQ`O,5:tO3wQdO,5:tOOQO'#E_'#E_O4PQ`O,5:wO4UQhO,5:}O%_QdO'#DgOOQS,5;P,5;PO-eQ`O,5;PO4^QdO,5;PO4fQdO,5:gO4vQdO'#EtO5TQ`O,5;zO5TQ`O,5;zPOOO'#Ej'#EjP5`O&jO,58{POOO,58{,58{OOQP1G.n1G.nOOQP1G.q1G.qO*hQ`O1G.qO*mQ`O1G.qOOQP1G/v1G/vO5kQpO1G/xO5sQaO1G/{O6ZQaO1G/}O6qQaO1G0OO7XQaO,5;^OOQO-E8p-E8pOOQS1G.i1G.iO7cQ`O,5:fO7hQdO'#DoO7oQdO'#CrOOQP1G/x1G/xO&lQdO1G/xO7vQ!jO'#DZO8UQ!bO,59vO8^QhO,5:OOOQO'#F]'#F]O8XQ!bO,59zO'tQhO,59xO8fQhO'#EvO8sQ`O,5;{O9OQhO,59|O9uQhO'#DiOOQW,5:S,5:SOOQS1G0n1G0nOOQW,5:P,5:PO9|Q!fO'#FYOOQS'#FY'#FYOOQS'#Em'#EmO;^QdO,59`OOQ[,59`,59`O;tQdO,59fOOQ[,59f,59fO<[QdO,59iOOQ[,59i,59iOOQ[,59k,59kO&lQdO,59mO<rQhO'#EQOOQW'#EQ'#EQO=WQ`O1G0UO1[QhO1G0UOOQ[,59o,59oO'tQhO'#DXOOQ[,59q,59qO=]Q#tO,5:VOOQS1G0[1G0[OOQS1G0^1G0^OOQS1G0`1G0`O=hQ`O1G0`O=mQdO'#E`OOQS1G0c1G0cOOQS1G0i1G0iO=xQaO,5:RO-`Q`O1G0kOOQS1G0k1G0kO-eQ`O1G0kO>PQ!fO1G0ROOQO1G0R1G0ROOQO,5;`,5;`O>gQdO,5;`OOQO-E8r-E8rO>tQ`O1G1fPOOO-E8h-E8hPOOO1G.g1G.gOOQP7+$]7+$]OOQP7+%d7+%dO&lQdO7+%dOOQS1G0Q1G0QO?PQaO'#F_O?ZQ`O,5:ZO?`Q!fO'#ElO@^QdO'#FWO@hQ`O,59^O@mQ!bO7+%dO&lQdO1G/bO@uQhO1G/fOOQW1G/j1G/jOOQW1G/d1G/dOAWQhO,5;bOOQO-E8t-E8tOAfQhO'#DZOAtQhO'#F^OBPQ`O'#F^OBUQ`O,5:TOOQS-E8k-E8kOOQ[1G.z1G.zOOQ[1G/Q1G/QOOQ[1G/T1G/TOOQ[1G/X1G/XOBZQdO,5:lOOQS7+%p7+%pOB`Q`O7+%pOBeQhO'#DYOBmQ`O,59sO'tQhO,59sOOQ[1G/q1G/qOBuQ`O1G/qOOQS7+%z7+%zOBzQbO'#DPOOQO'#Eb'#EbOCYQ`O'#EaOOQO'#Ea'#EaOCeQ`O'#EwOCmQdO,5:zOOQS,5:z,5:zOOQ[1G/m1G/mOOQS7+&V7+&VO-`Q`O7+&VOCxQ!fO'#EsO&lQdO'#EsOEPQdO7+%mOOQO7+%m7+%mOOQO1G0z1G0zOEdQ!bO<<IOOElQdO'#EqOEvQ`O,5;yOOQP1G/u1G/uOOQS-E8j-E8jOFOQdO'#EpOFYQ`O,5;rOOQ]1G.x1G.xOOQP<<IO<<IOOFbQdO7+$|OOQO'#D]'#D]OFiQ!bO7+%QOFqQhO'#EoOF{Q`O,5;xO&lQdO,5;xOOQW1G/o1G/oOOQO'#ES'#ESOGTQ`O1G0WOOQS<<I[<<I[O&lQdO,59tOGnQhO1G/_OOQ[1G/_1G/_OGuQ`O1G/_OOQW-E8l-E8lOOQ[7+%]7+%]OOQO,5:{,5:{O=pQdO'#ExOCeQ`O,5;cOOQS,5;c,5;cOOQS-E8u-E8uOOQS1G0f1G0fOOQS<<Iq<<IqOG}Q!fO,5;_OOQS-E8q-E8qOOQO<<IX<<IXOOQPAN>jAN>jOIUQaO,5;]OOQO-E8o-E8oOI`QdO,5;[OOQO-E8n-E8nOOQW<<Hh<<HhOOQW<<Hl<<HlOIjQhO<<HlOI{QhO,5;ZOJWQ`O,5;ZOOQO-E8m-E8mOJ]QdO1G1dOBZQdO'#EuOJgQ`O7+%rOOQW7+%r7+%rOJoQ!bO1G/`OOQ[7+$y7+$yOJzQhO7+$yPKRQ`O'#EnOOQO,5;d,5;dOOQO-E8v-E8vOOQS1G0}1G0}OKWQ`OAN>WO&lQdO1G0uOK]Q`O7+'OOOQO,5;a,5;aOOQO-E8s-E8sOOQW<<I^<<I^OOQ[<<He<<HePOQW,5;Y,5;YOOQWG23rG23rOKeQdO7+&a",
  stateData: "Kx~O#sOS#tQQ~OW[OZ[O]TO`VOaVOi]OjWOmXO!jYO!mZO!saO!ybO!{cO!}dO#QeO#WfO#YgO#oRO~OQiOW[OZ[O]TO`VOaVOi]OjWOmXO!jYO!mZO!saO!ybO!{cO!}dO#QeO#WfO#YgO#ohO~O#m$SP~P!dO#tmO~O#ooO~O]qO`rOarOjsOmtO!juO!mwO#nvO~OpzO!^xO~P$SOc!QO#o|O#p}O~O#o!RO~O#o!TO~OW[OZ[O]TO`VOaVOjWOmXO!jYO!mZO#oRO~OS!]Oe!YO!V![O!Y!`O#q!XOp$TP~Ok$TP~P&POQ!jOe!cOm!dOp!eOr!mOt!mOz!kO!`!lO#o!bO#p!hO#}!fO~Ot!qO!`!lO#o!pO~Ot!sO#o!sO~OS!]Oe!YO!V![O!Y!`O#q!XO~Oe!vOpzO#Z!xO~O]YX`YX`!pXaYXjYXmYXpYX!^YX!jYX!mYX#nYX~O`!zO~Ok!{O#m$SXo$SX~O#m$SXo$SX~P!dO#u#OO#v#OO#w#QO~Oc#UO#o|O#p}O~OpzO!^xO~Oo$SP~P!dOe#`O~Oe#aO~Ol#bO!h#cO~O]qO`rOarOjsOmtO~Op!ia!^!ia!j!ia!m!ia#n!iad!ia~P*zOp!la!^!la!j!la!m!la#n!lad!la~P*zOR#gOS!]Oe!YOr#gOt#gO!V![O!Y!`O#q#dO#}!fO~O!R#iO!^#jOk$TXp$TX~Oe#mO~Ok#oOpzO~Oe!vO~O]#rO`#rOd#uOi#rOj#rOk#rO~P&lO]#rO`#rOi#rOj#rOk#rOl#wO~P&lO]#rO`#rOi#rOj#rOk#rOo#yO~P&lOP#zOSsXesXksXvsX!VsX!YsX!usX!wsX#qsX!TsXQsX]sX`sXdsXisXjsXmsXpsXrsXtsXzsX!`sX#osX#psX#}sXlsXosX!^sX!qsX#msX~Ov#{O!u#|O!w#}Ok$TP~P'tOe#aOS#{Xk#{Xv#{X!V#{X!Y#{X!u#{X!w#{X#q#{XQ#{X]#{X`#{Xd#{Xi#{Xj#{Xm#{Xp#{Xr#{Xt#{Xz#{X!`#{X#o#{X#p#{X#}#{Xl#{Xo#{X!^#{X!q#{X#m#{X~Oe$RO~Oe$TO~Ok$VOv#{O~Ok$WO~Ot$XO!`!lO~Op$YO~OpzO!R#iO~OpzO#Z$`O~O!q$bOk!oa#m!oao!oa~P&lOk#hX#m#hXo#hX~P!dOk!{O#m$Sao$Sa~O#u#OO#v#OO#w$hO~Ol$jO!h$kO~Op!ii!^!ii!j!ii!m!ii#n!iid!ii~P*zOp!ki!^!ki!j!ki!m!ki#n!kid!ki~P*zOp!li!^!li!j!li!m!li#n!lid!li~P*zOp#fa!^#fa~P$SOo$lO~Od$RP~P%_Od#zP~P&lO`!PXd}X!R}X!T!PX~O`$sO!T$tO~Od$uO!R#iO~Ok#jXp#jX!^#jX~P'tO!^#jOk$Tap$Ta~O!R#iOk!Uap!Ua!^!Uad!Ua`!Ua~OS!]Oe!YO!V![O!Y!`O#q$yO~Od$QP~P9dOv#{OQ#|X]#|X`#|Xd#|Xe#|Xi#|Xj#|Xk#|Xm#|Xp#|Xr#|Xt#|Xz#|X!`#|X#o#|X#p#|X#}#|Xl#|Xo#|X~O]#rO`#rOd%OOi#rOj#rOk#rO~P&lO]#rO`#rOi#rOj#rOk#rOl%PO~P&lO]#rO`#rOi#rOj#rOk#rOo%QO~P&lOe%SOS!tXk!tX!V!tX!Y!tX#q!tX~Ok%TO~Od%YOt%ZO!a%ZO~Ok%[O~Oo%cO#o%^O#}%]O~Od%dO~P$SOv#{O!^%hO!q%jOk!oi#m!oio!oi~P&lOk#ha#m#hao#ha~P!dOk!{O#m$Sio$Si~O!^%mOd$RX~P$SOd%oO~Ov#{OQ#`Xd#`Xe#`Xm#`Xp#`Xr#`Xt#`Xz#`X!^#`X!`#`X#o#`X#p#`X#}#`X~O!^%qOd#zX~P&lOd%sO~Ol%tOv#{O~OR#gOr#gOt#gO#q%vO#}!fO~O!R#iOk#jap#ja!^#ja~O`!PXd}X!R}X!^}X~O!R#iO!^%xOd$QX~O`%zO~Od%{O~O#o%|O~Ok&OO~O`&PO!R#iO~Od&ROk&QO~Od&UO~OP#zOpsX!^sXdsX~O#}%]Op#TX!^#TX~OpzO!^&WO~Oo&[O#o%^O#}%]O~Ov#{OQ#gXe#gXk#gXm#gXp#gXr#gXt#gXz#gX!^#gX!`#gX!q#gX#m#gX#o#gX#p#gX#}#gXo#gX~O!^%hO!q&`Ok!oq#m!oqo!oq~P&lOl&aOv#{O~Od#eX!^#eX~P%_O!^%mOd$Ra~Od#dX!^#dX~P&lO!^%qOd#za~Od&fO~P&lOd&gO!T&hO~Od#cX!^#cX~P9dO!^%xOd$Qa~O]&mOd&oO~OS#bae#ba!V#ba!Y#ba#q#ba~Od&qO~PG]Od&qOk&rO~Ov#{OQ#gae#gak#gam#gap#gar#gat#gaz#ga!^#ga!`#ga!q#ga#m#ga#o#ga#p#ga#}#gao#ga~Od#ea!^#ea~P$SOd#da!^#da~P&lOR#gOr#gOt#gO#q%vO#}%]O~O!R#iOd#ca!^#ca~O`&xO~O!^%xOd$Qi~P&lO]&mOd&|O~Ov#{Od|ik|i~Od&}O~PG]Ok'OO~Od'PO~O!^%xOd$Qq~Od#cq!^#cq~P&lO#s!a#t#}]#}v!m~",
  goto: "2h$UPPPPP$VP$YP$c$uP$cP%X$cPP%_PPP%e%o%oPPPPP%oPP%oP&]P%oP%o'W%oP't'w'}'}(^'}P'}P'}P'}'}P(m'}(yP(|PP)p)v$c)|$c*SP$cP$c$cP*Y*{+YP$YP+aP+dP$YP$YP$YP+j$YP+m+p+s+z$YP$YPP$YP,P,V,f,|-[-b-l-r-x.O.U.`.f.l.rPPPPPPPPPPP.x/R/w/z0|P1U1u2O2R2U2[RnQ_^OP`kz!{$dq[OPYZ`kuvwxz!v!{#`$d%mqSOPYZ`kuvwxz!v!{#`$d%mQpTR#RqQ!OVR#SrQ#S!QS$Q!i!jR$i#U!V!mac!c!d!e!z#a#c#t#v#x#{$a$k$p$s%h%i%q%u%z&P&d&l&x'Q!U!mac!c!d!e!z#a#c#t#v#x#{$a$k$p$s%h%i%q%u%z&P&d&l&x'QU#g!Y$t&hU%`$Y%b&WR&V%_!V!iac!c!d!e!z#a#c#t#v#x#{$a$k$p$s%h%i%q%u%z&P&d&l&x'QR$S!kQ%W$RR&S%Xk!^]bf!Y![!g#i#j#m$P$R%X%xQ#e!YQ${#mQ%w$tQ&j%xR&w&hQ!ygQ#p!`Q$^!xR%f$`R#n!]!U!mac!c!d!e!z#a#c#t#v#x#{$a$k$p$s%h%i%q%u%z&P&d&l&x'QQ!qdR$X!rQ!PVR#TrQ#S!PR$i#TQ!SWR#VsQ!UXR#WtQ{UQ!wgQ#^yQ#o!_Q$U!nQ$[!uQ$_!yQ%e$^Q&Y%aQ&]%fR&v&XSjPzQ!}kQ$c!{R%k$dZiPkz!{$dR$P!gQ%}%SR&z&mR!rdR!teR$Z!tS%a$Y%bR&t&WV%_$Y%b&WQ#PmR$g#PQ`OSkPzU!a`k$dR$d!{Q$p#aY%p$p%u&d&l'QQ%u$sQ&d%qQ&l%zR'Q&xQ#t!cQ#v!dQ#x!eV$}#t#v#xQ%X$RR&T%XQ%y$zS&k%y&yR&y&lQ%r$pR&e%rQ%n$mR&c%nQyUR#]yQ%i$aR&_%iQ!|jS$e!|$fR$f!}Q&n%}R&{&nQ#k!ZR$x#kQ%b$YR&Z%bQ&X%aR&u&X__OP`kz!{$d^UOP`kz!{$dQ!VYQ!WZQ#XuQ#YvQ#ZwQ#[xQ$]!vQ$m#`R&b%mR$q#aQ!gaQ!oc[#q!c!d!e#t#v#xQ$a!zd$o#a$p$s%q%u%z&d&l&x'QQ$r#cQ%R#{S%g$a%iQ%l$kQ&^%hR&p&P]#s!c!d!e#t#v#xW!Z]b!g$PQ!ufQ#f!YQ#l![Q$v#iQ$w#jQ$z#mS%V$R%XR&i%xQ#h!YQ%w$tR&w&hR$|#mR$n#`QlPR#_zQ!_]Q!nbQ$O!gR%U$P",
  nodeNames: "⚠ Unit VariableName VariableName QueryCallee Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue AtKeyword # ; ] [ BracketedValue } { BracedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee IfExpression if ArgList IfBranch KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp ComparisonQuery CompareOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector ParenthesizedSelector CallQuery ArgList , CallLiteral CallTag ParenthesizedContent PseudoClassName ArgList IdSelector IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp Block Declaration PropertyName Important ImportStatement import Layer layer LayerName layer MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports ScopeStatement scope to AtRule Styles",
  maxTerm: 143,
  nodeProps: [
    ["isolate", -2, 5, 36, ""],
    ["openedBy", 20, "(", 28, "[", 31, "{"],
    ["closedBy", 21, ")", 29, "]", 32, "}"]
  ],
  propSources: [rB],
  skippedNodes: [0, 5, 106],
  repeatNodeCount: 15,
  tokenData: "JQ~R!YOX$qX^%i^p$qpq%iqr({rs-ust/itu6Wuv$qvw7Qwx7cxy9Qyz9cz{9h{|:R|}>t}!O?V!O!P?t!P!Q@]!Q![AU![!]BP!]!^B{!^!_C^!_!`DY!`!aDm!a!b$q!b!cEn!c!}$q!}#OG{#O#P$q#P#QH^#Q#R6W#R#o$q#o#pHo#p#q6W#q#rIQ#r#sIc#s#y$q#y#z%i#z$f$q$f$g%i$g#BY$q#BY#BZ%i#BZ$IS$q$IS$I_%i$I_$I|$q$I|$JO%i$JO$JT$q$JT$JU%i$JU$KV$q$KV$KW%i$KW&FU$q&FU&FV%i&FV;'S$q;'S;=`Iz<%lO$q`$tSOy%Qz;'S%Q;'S;=`%c<%lO%Q`%VS!a`Oy%Qz;'S%Q;'S;=`%c<%lO%Q`%fP;=`<%l%Q~%nh#s~OX%QX^'Y^p%Qpq'Yqy%Qz#y%Q#y#z'Y#z$f%Q$f$g'Y$g#BY%Q#BY#BZ'Y#BZ$IS%Q$IS$I_'Y$I_$I|%Q$I|$JO'Y$JO$JT%Q$JT$JU'Y$JU$KV%Q$KV$KW'Y$KW&FU%Q&FU&FV'Y&FV;'S%Q;'S;=`%c<%lO%Q~'ah#s~!a`OX%QX^'Y^p%Qpq'Yqy%Qz#y%Q#y#z'Y#z$f%Q$f$g'Y$g#BY%Q#BY#BZ'Y#BZ$IS%Q$IS$I_'Y$I_$I|%Q$I|$JO'Y$JO$JT%Q$JT$JU'Y$JU$KV%Q$KV$KW'Y$KW&FU%Q&FU&FV'Y&FV;'S%Q;'S;=`%c<%lO%Qj)OUOy%Qz#]%Q#]#^)b#^;'S%Q;'S;=`%c<%lO%Qj)gU!a`Oy%Qz#a%Q#a#b)y#b;'S%Q;'S;=`%c<%lO%Qj*OU!a`Oy%Qz#d%Q#d#e*b#e;'S%Q;'S;=`%c<%lO%Qj*gU!a`Oy%Qz#c%Q#c#d*y#d;'S%Q;'S;=`%c<%lO%Qj+OU!a`Oy%Qz#f%Q#f#g+b#g;'S%Q;'S;=`%c<%lO%Qj+gU!a`Oy%Qz#h%Q#h#i+y#i;'S%Q;'S;=`%c<%lO%Qj,OU!a`Oy%Qz#T%Q#T#U,b#U;'S%Q;'S;=`%c<%lO%Qj,gU!a`Oy%Qz#b%Q#b#c,y#c;'S%Q;'S;=`%c<%lO%Qj-OU!a`Oy%Qz#h%Q#h#i-b#i;'S%Q;'S;=`%c<%lO%Qj-iS!qY!a`Oy%Qz;'S%Q;'S;=`%c<%lO%Q~-xWOY-uZr-urs.bs#O-u#O#P.g#P;'S-u;'S;=`/c<%lO-u~.gOt~~.jRO;'S-u;'S;=`.s;=`O-u~.vXOY-uZr-urs.bs#O-u#O#P.g#P;'S-u;'S;=`/c;=`<%l-u<%lO-u~/fP;=`<%l-uj/nYjYOy%Qz!Q%Q!Q![0^![!c%Q!c!i0^!i#T%Q#T#Z0^#Z;'S%Q;'S;=`%c<%lO%Qj0cY!a`Oy%Qz!Q%Q!Q![1R![!c%Q!c!i1R!i#T%Q#T#Z1R#Z;'S%Q;'S;=`%c<%lO%Qj1WY!a`Oy%Qz!Q%Q!Q![1v![!c%Q!c!i1v!i#T%Q#T#Z1v#Z;'S%Q;'S;=`%c<%lO%Qj1}YrY!a`Oy%Qz!Q%Q!Q![2m![!c%Q!c!i2m!i#T%Q#T#Z2m#Z;'S%Q;'S;=`%c<%lO%Qj2tYrY!a`Oy%Qz!Q%Q!Q![3d![!c%Q!c!i3d!i#T%Q#T#Z3d#Z;'S%Q;'S;=`%c<%lO%Qj3iY!a`Oy%Qz!Q%Q!Q![4X![!c%Q!c!i4X!i#T%Q#T#Z4X#Z;'S%Q;'S;=`%c<%lO%Qj4`YrY!a`Oy%Qz!Q%Q!Q![5O![!c%Q!c!i5O!i#T%Q#T#Z5O#Z;'S%Q;'S;=`%c<%lO%Qj5TY!a`Oy%Qz!Q%Q!Q![5s![!c%Q!c!i5s!i#T%Q#T#Z5s#Z;'S%Q;'S;=`%c<%lO%Qj5zSrY!a`Oy%Qz;'S%Q;'S;=`%c<%lO%Qd6ZUOy%Qz!_%Q!_!`6m!`;'S%Q;'S;=`%c<%lO%Qd6tS!hS!a`Oy%Qz;'S%Q;'S;=`%c<%lO%Qb7VSZQOy%Qz;'S%Q;'S;=`%c<%lO%Q~7fWOY7cZw7cwx.bx#O7c#O#P8O#P;'S7c;'S;=`8z<%lO7c~8RRO;'S7c;'S;=`8[;=`O7c~8_XOY7cZw7cwx.bx#O7c#O#P8O#P;'S7c;'S;=`8z;=`<%l7c<%lO7c~8}P;=`<%l7cj9VSeYOy%Qz;'S%Q;'S;=`%c<%lO%Q~9hOd~n9oUWQvWOy%Qz!_%Q!_!`6m!`;'S%Q;'S;=`%c<%lO%Qj:YWvW!mQOy%Qz!O%Q!O!P:r!P!Q%Q!Q![=w![;'S%Q;'S;=`%c<%lO%Qj:wU!a`Oy%Qz!Q%Q!Q![;Z![;'S%Q;'S;=`%c<%lO%Qj;bY!a`#}YOy%Qz!Q%Q!Q![;Z![!g%Q!g!h<Q!h#X%Q#X#Y<Q#Y;'S%Q;'S;=`%c<%lO%Qj<VY!a`Oy%Qz{%Q{|<u|}%Q}!O<u!O!Q%Q!Q![=^![;'S%Q;'S;=`%c<%lO%Qj<zU!a`Oy%Qz!Q%Q!Q![=^![;'S%Q;'S;=`%c<%lO%Qj=eU!a`#}YOy%Qz!Q%Q!Q![=^![;'S%Q;'S;=`%c<%lO%Qj>O[!a`#}YOy%Qz!O%Q!O!P;Z!P!Q%Q!Q![=w![!g%Q!g!h<Q!h#X%Q#X#Y<Q#Y;'S%Q;'S;=`%c<%lO%Qj>yS!^YOy%Qz;'S%Q;'S;=`%c<%lO%Qj?[WvWOy%Qz!O%Q!O!P:r!P!Q%Q!Q![=w![;'S%Q;'S;=`%c<%lO%Qj?yU]YOy%Qz!Q%Q!Q![;Z![;'S%Q;'S;=`%c<%lO%Q~@bTvWOy%Qz{@q{;'S%Q;'S;=`%c<%lO%Q~@xS!a`#t~Oy%Qz;'S%Q;'S;=`%c<%lO%QjAZ[#}YOy%Qz!O%Q!O!P;Z!P!Q%Q!Q![=w![!g%Q!g!h<Q!h#X%Q#X#Y<Q#Y;'S%Q;'S;=`%c<%lO%QjBUU`YOy%Qz![%Q![!]Bh!];'S%Q;'S;=`%c<%lO%QbBoSaQ!a`Oy%Qz;'S%Q;'S;=`%c<%lO%QjCQSkYOy%Qz;'S%Q;'S;=`%c<%lO%QhCcU!TWOy%Qz!_%Q!_!`Cu!`;'S%Q;'S;=`%c<%lO%QhC|S!TW!a`Oy%Qz;'S%Q;'S;=`%c<%lO%QlDaS!TW!hSOy%Qz;'S%Q;'S;=`%c<%lO%QjDtV!jQ!TWOy%Qz!_%Q!_!`Cu!`!aEZ!a;'S%Q;'S;=`%c<%lO%QbEbS!jQ!a`Oy%Qz;'S%Q;'S;=`%c<%lO%QjEqYOy%Qz}%Q}!OFa!O!c%Q!c!}GO!}#T%Q#T#oGO#o;'S%Q;'S;=`%c<%lO%QjFfW!a`Oy%Qz!c%Q!c!}GO!}#T%Q#T#oGO#o;'S%Q;'S;=`%c<%lO%QjGV[iY!a`Oy%Qz}%Q}!OGO!O!Q%Q!Q![GO![!c%Q!c!}GO!}#T%Q#T#oGO#o;'S%Q;'S;=`%c<%lO%QjHQSmYOy%Qz;'S%Q;'S;=`%c<%lO%QnHcSl^Oy%Qz;'S%Q;'S;=`%c<%lO%QjHtSpYOy%Qz;'S%Q;'S;=`%c<%lO%QjIVSoYOy%Qz;'S%Q;'S;=`%c<%lO%QfIhU!mQOy%Qz!_%Q!_!`6m!`;'S%Q;'S;=`%c<%lO%Q`I}P;=`<%l$q",
  tokenizers: [nB, iB, eB, tB, 1, 2, 3, 4, new Ha("m~RRYZ[z{a~~g~aO#v~~dP!P!Qg~lO#w~~", 28, 129)],
  topRules: { StyleSheet: [0, 6], Styles: [1, 105] },
  specialized: [{ term: 124, get: (n) => sB[n] || -1 }, { term: 125, get: (n) => oB[n] || -1 }, { term: 4, get: (n) => aB[n] || -1 }, { term: 25, get: (n) => lB[n] || -1 }, { term: 123, get: (n) => cB[n] || -1 }],
  tokenPrec: 1963
});
let Ec = null;
function _c() {
  if (!Ec && typeof document == "object" && document.body) {
    let { style: n } = document.body, e = [], t = /* @__PURE__ */ new Set();
    for (let i in n)
      i != "cssText" && i != "cssFloat" && typeof n[i] == "string" && (/[A-Z]/.test(i) && (i = i.replace(/[A-Z]/g, (r) => "-" + r.toLowerCase())), t.has(i) || (e.push(i), t.add(i)));
    Ec = e.sort().map((i) => ({ type: "property", label: i, apply: i + ": " }));
  }
  return Ec || [];
}
const Tg = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((n) => ({ type: "class", label: n })), Pg = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((n) => ({ type: "keyword", label: n })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((n) => ({ type: "constant", label: n }))), hB = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((n) => ({ type: "type", label: n })), fB = /* @__PURE__ */ [
  "@charset",
  "@color-profile",
  "@container",
  "@counter-style",
  "@font-face",
  "@font-feature-values",
  "@font-palette-values",
  "@import",
  "@keyframes",
  "@layer",
  "@media",
  "@namespace",
  "@page",
  "@position-try",
  "@property",
  "@scope",
  "@starting-style",
  "@supports",
  "@view-transition"
].map((n) => ({ type: "keyword", label: n })), Wn = /^(\w[\w-]*|-\w[\w-]*|)$/, dB = /^-(-[\w-]*)?$/;
function pB(n, e) {
  var t;
  if ((n.name == "(" || n.type.isError) && (n = n.parent || n), n.name != "ArgList")
    return !1;
  let i = (t = n.parent) === null || t === void 0 ? void 0 : t.firstChild;
  return i?.name != "Callee" ? !1 : e.sliceString(i.from, i.to) == "var";
}
const Ag = /* @__PURE__ */ new a0(), mB = ["Declaration"];
function gB(n) {
  for (let e = n; ; ) {
    if (e.type.isTop)
      return e;
    if (!(e = e.parent))
      return n;
  }
}
function Ok(n, e, t) {
  if (e.to - e.from > 4096) {
    let i = Ag.get(e);
    if (i)
      return i;
    let r = [], s = /* @__PURE__ */ new Set(), o = e.cursor(Ye.IncludeAnonymous);
    if (o.firstChild())
      do
        for (let a of Ok(n, o.node, t))
          s.has(a.label) || (s.add(a.label), r.push(a));
      while (o.nextSibling());
    return Ag.set(e, r), r;
  } else {
    let i = [], r = /* @__PURE__ */ new Set();
    return e.cursor().iterate((s) => {
      var o;
      if (t(s) && s.matchContext(mB) && ((o = s.node.nextSibling) === null || o === void 0 ? void 0 : o.name) == ":") {
        let a = n.sliceString(s.from, s.to);
        r.has(a) || (r.add(a), i.push({ label: a, type: "variable" }));
      }
    }), i;
  }
}
const OB = (n) => (e) => {
  let { state: t, pos: i } = e, r = Fe(t).resolveInner(i, -1), s = r.type.isError && r.from == r.to - 1 && t.doc.sliceString(r.from, r.to) == "-";
  if (r.name == "PropertyName" || (s || r.name == "TagName") && /^(Block|Styles)$/.test(r.resolve(r.to).name))
    return { from: r.from, options: _c(), validFor: Wn };
  if (r.name == "ValueName")
    return { from: r.from, options: Pg, validFor: Wn };
  if (r.name == "PseudoClassName")
    return { from: r.from, options: Tg, validFor: Wn };
  if (n(r) || (e.explicit || s) && pB(r, t.doc))
    return {
      from: n(r) || s ? r.from : i,
      options: Ok(t.doc, gB(r), n),
      validFor: dB
    };
  if (r.name == "TagName") {
    for (let { parent: l } = r; l; l = l.parent)
      if (l.name == "Block")
        return { from: r.from, options: _c(), validFor: Wn };
    return { from: r.from, options: hB, validFor: Wn };
  }
  if (r.name == "AtKeyword")
    return { from: r.from, options: fB, validFor: Wn };
  if (!e.explicit)
    return null;
  let o = r.resolve(i), a = o.childBefore(i);
  return a && a.name == ":" && o.name == "PseudoClassSelector" ? { from: i, options: Tg, validFor: Wn } : a && a.name == ":" && o.name == "Declaration" || o.name == "ArgList" ? { from: i, options: Pg, validFor: Wn } : o.name == "Block" || o.name == "Styles" ? { from: i, options: _c(), validFor: Wn } : null;
}, bB = /* @__PURE__ */ OB((n) => n.name == "VariableName"), el = /* @__PURE__ */ xr.define({
  name: "css",
  parser: /* @__PURE__ */ uB.configure({
    props: [
      /* @__PURE__ */ ro.add({
        Declaration: /* @__PURE__ */ da()
      }),
      /* @__PURE__ */ Lr.add({
        "Block KeyframeList": m0
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function yB() {
  return new Ls(el, el.data.of({ autocomplete: bB }));
}
const xB = 315, kB = 316, $g = 1, SB = 2, wB = 3, vB = 4, EB = 317, _B = 319, QB = 320, CB = 5, TB = 6, PB = 0, sh = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], bk = 125, AB = 59, oh = 47, $B = 42, RB = 43, MB = 45, NB = 60, IB = 44, LB = 63, DB = 46, BB = 91, zB = new tk({
  start: !1,
  shift(n, e) {
    return e == CB || e == TB || e == _B ? n : e == QB;
  },
  strict: !1
}), ZB = new tn((n, e) => {
  let { next: t } = n;
  (t == bk || t == -1 || e.context) && n.acceptToken(EB);
}, { contextual: !0, fallback: !0 }), XB = new tn((n, e) => {
  let { next: t } = n, i;
  sh.indexOf(t) > -1 || t == oh && ((i = n.peek(1)) == oh || i == $B) || t != bk && t != AB && t != -1 && !e.context && n.acceptToken(xB);
}, { contextual: !0 }), qB = new tn((n, e) => {
  n.next == BB && !e.context && n.acceptToken(kB);
}, { contextual: !0 }), VB = new tn((n, e) => {
  let { next: t } = n;
  if (t == RB || t == MB) {
    if (n.advance(), t == n.next) {
      n.advance();
      let i = !e.context && e.canShift($g);
      n.acceptToken(i ? $g : SB);
    }
  } else t == LB && n.peek(1) == DB && (n.advance(), n.advance(), (n.next < 48 || n.next > 57) && n.acceptToken(wB));
}, { contextual: !0 });
function Qc(n, e) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n == 95 || n >= 192 || !e && n >= 48 && n <= 57;
}
const YB = new tn((n, e) => {
  if (n.next != NB || !e.dialectEnabled(PB) || (n.advance(), n.next == oh)) return;
  let t = 0;
  for (; sh.indexOf(n.next) > -1; )
    n.advance(), t++;
  if (Qc(n.next, !0)) {
    for (n.advance(), t++; Qc(n.next, !1); )
      n.advance(), t++;
    for (; sh.indexOf(n.next) > -1; )
      n.advance(), t++;
    if (n.next == IB) return;
    for (let i = 0; ; i++) {
      if (i == 7) {
        if (!Qc(n.next, !0)) return;
        break;
      }
      if (n.next != "extends".charCodeAt(i)) break;
      n.advance(), t++;
    }
  }
  n.acceptToken(vB, -t);
}), FB = Nr({
  "get set async static": k.modifier,
  "for while do if else switch try catch finally return throw break continue default case": k.controlKeyword,
  "in of await yield void typeof delete instanceof as satisfies": k.operatorKeyword,
  "let var const using function class extends": k.definitionKeyword,
  "import export from": k.moduleKeyword,
  "with debugger new": k.keyword,
  TemplateString: k.special(k.string),
  super: k.atom,
  BooleanLiteral: k.bool,
  this: k.self,
  null: k.null,
  Star: k.modifier,
  VariableName: k.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": k.function(k.variableName),
  VariableDefinition: k.definition(k.variableName),
  Label: k.labelName,
  PropertyName: k.propertyName,
  PrivatePropertyName: k.special(k.propertyName),
  "CallExpression/MemberExpression/PropertyName": k.function(k.propertyName),
  "FunctionDeclaration/VariableDefinition": k.function(k.definition(k.variableName)),
  "ClassDeclaration/VariableDefinition": k.definition(k.className),
  "NewExpression/VariableName": k.className,
  PropertyDefinition: k.definition(k.propertyName),
  PrivatePropertyDefinition: k.definition(k.special(k.propertyName)),
  UpdateOp: k.updateOperator,
  "LineComment Hashbang": k.lineComment,
  BlockComment: k.blockComment,
  Number: k.number,
  String: k.string,
  Escape: k.escape,
  ArithOp: k.arithmeticOperator,
  LogicOp: k.logicOperator,
  BitOp: k.bitwiseOperator,
  CompareOp: k.compareOperator,
  RegExp: k.regexp,
  Equals: k.definitionOperator,
  Arrow: k.function(k.punctuation),
  ": Spread": k.punctuation,
  "( )": k.paren,
  "[ ]": k.squareBracket,
  "{ }": k.brace,
  "InterpolationStart InterpolationEnd": k.special(k.brace),
  ".": k.derefOperator,
  ", ;": k.separator,
  "@": k.meta,
  TypeName: k.typeName,
  TypeDefinition: k.definition(k.typeName),
  "type enum interface implements namespace module declare": k.definitionKeyword,
  "abstract global Privacy readonly override": k.modifier,
  "is keyof unique infer asserts": k.operatorKeyword,
  JSXAttributeValue: k.attributeValue,
  JSXText: k.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": k.angleBracket,
  "JSXIdentifier JSXNameSpacedName": k.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": k.attributeName,
  "JSXBuiltin/JSXIdentifier": k.standard(k.tagName)
}), UB = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, in: 52, out: 55, const: 56, extends: 60, this: 64, true: 72, false: 72, null: 84, void: 88, typeof: 92, super: 108, new: 142, delete: 154, yield: 163, await: 167, class: 172, public: 235, private: 235, protected: 235, readonly: 237, instanceof: 256, satisfies: 259, import: 292, keyof: 349, unique: 353, infer: 359, asserts: 395, is: 397, abstract: 417, implements: 419, type: 421, let: 424, var: 426, using: 429, interface: 435, enum: 439, namespace: 445, module: 447, declare: 451, global: 455, for: 474, of: 483, while: 486, with: 490, do: 494, if: 498, else: 500, switch: 504, case: 510, try: 516, catch: 520, finally: 524, return: 528, throw: 532, break: 536, continue: 540, debugger: 544 }, GB = { __proto__: null, async: 129, get: 131, set: 133, declare: 195, public: 197, private: 197, protected: 197, static: 199, abstract: 201, override: 203, readonly: 209, accessor: 211, new: 401 }, WB = { __proto__: null, "<": 193 }, jB = Er.deserialize({
  version: 14,
  states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
  stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
  goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
  nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 379,
  context: zB,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""],
    ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"],
    ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"],
    ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]
  ],
  propSources: [FB],
  skippedNodes: [0, 5, 6, 277],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [XB, qB, VB, YB, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ZB, new Ha("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new Ha("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
  topRules: { Script: [0, 7], SingleExpression: [1, 275], SingleClassItem: [2, 276] },
  dialects: { jsx: 0, ts: 15098 },
  dynamicPrecedences: { 80: 1, 82: 1, 94: 1, 169: 1, 199: 1 },
  specialized: [{ term: 326, get: (n) => UB[n] || -1 }, { term: 342, get: (n) => GB[n] || -1 }, { term: 95, get: (n) => WB[n] || -1 }],
  tokenPrec: 15124
}), yk = [
  /* @__PURE__ */ Nt("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], HB = /* @__PURE__ */ yk.concat([
  /* @__PURE__ */ Nt("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Nt("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), Rg = /* @__PURE__ */ new a0(), xk = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function os(n) {
  return (e, t) => {
    let i = e.node.getChild("VariableDefinition");
    return i && t(i, n), !0;
  };
}
const KB = ["FunctionDeclaration"], JB = {
  FunctionDeclaration: /* @__PURE__ */ os("function"),
  ClassDeclaration: /* @__PURE__ */ os("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ os("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ os("type"),
  NamespaceDeclaration: /* @__PURE__ */ os("namespace"),
  VariableDefinition(n, e) {
    n.matchContext(KB) || e(n, "variable");
  },
  TypeDefinition(n, e) {
    e(n, "type");
  },
  __proto__: null
};
function kk(n, e) {
  let t = Rg.get(e);
  if (t)
    return t;
  let i = [], r = !0;
  function s(o, a) {
    let l = n.sliceString(o.from, o.to);
    i.push({ label: l, type: a });
  }
  return e.cursor(Ye.IncludeAnonymous).iterate((o) => {
    if (r)
      r = !1;
    else if (o.name) {
      let a = JB[o.name];
      if (a && a(o, s) || xk.has(o.name))
        return !1;
    } else if (o.to - o.from > 8192) {
      for (let a of kk(n, o.node))
        i.push(a);
      return !1;
    }
  }), Rg.set(e, i), i;
}
const Mg = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, Sk = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  "JSXText",
  "JSXAttributeValue",
  "JSXOpenTag",
  "JSXCloseTag",
  "JSXSelfClosingTag",
  ".",
  "?."
];
function ez(n) {
  let e = Fe(n.state).resolveInner(n.pos, -1);
  if (Sk.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && Mg.test(n.state.sliceDoc(e.from, e.to));
  if (!t && !n.explicit)
    return null;
  let i = [];
  for (let r = e; r; r = r.parent)
    xk.has(r.name) && (i = i.concat(kk(n.state.doc, r)));
  return {
    options: i,
    from: t ? e.from : n.pos,
    validFor: Mg
  };
}
const In = /* @__PURE__ */ xr.define({
  name: "javascript",
  parser: /* @__PURE__ */ jB.configure({
    props: [
      /* @__PURE__ */ ro.add({
        IfStatement: /* @__PURE__ */ da({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ da({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: CM,
        SwitchBody: (n) => {
          let e = n.textAfter, t = /^\s*\}/.test(e), i = /^\s*(case|default)\b/.test(e);
          return n.baseIndent + (t ? 0 : i ? 1 : 2) * n.unit;
        },
        Block: /* @__PURE__ */ QM({ closing: "}" }),
        ArrowFunction: (n) => n.baseIndent + n.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ da({ except: /^\s*{/ }),
        JSXElement(n) {
          let e = /^\s*<\//.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        JSXEscape(n) {
          let e = /\s*\}/.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        }
      }),
      /* @__PURE__ */ Lr.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": m0,
        BlockComment(n) {
          return { from: n.from + 2, to: n.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), wk = {
  test: (n) => /^JSX/.test(n.name),
  facet: /* @__PURE__ */ Jh({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, vk = /* @__PURE__ */ In.configure({ dialect: "ts" }, "typescript"), Ek = /* @__PURE__ */ In.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ ef.add((n) => n.isTop ? [wk] : void 0)]
}), _k = /* @__PURE__ */ In.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ ef.add((n) => n.isTop ? [wk] : void 0)]
}, "typescript");
let Qk = (n) => ({ label: n, type: "keyword" });
const Ck = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(Qk), tz = /* @__PURE__ */ Ck.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(Qk));
function nz(n = {}) {
  let e = n.jsx ? n.typescript ? _k : Ek : n.typescript ? vk : In, t = n.typescript ? HB.concat(tz) : yk.concat(Ck);
  return new Ls(e, [
    In.data.of({
      autocomplete: YI(Sk, gx(t))
    }),
    In.data.of({
      autocomplete: ez
    }),
    n.jsx ? sz : []
  ]);
}
function iz(n) {
  for (; ; ) {
    if (n.name == "JSXOpenTag" || n.name == "JSXSelfClosingTag" || n.name == "JSXFragmentTag")
      return n;
    if (n.name == "JSXEscape" || !n.parent)
      return null;
    n = n.parent;
  }
}
function Ng(n, e, t = n.length) {
  for (let i = e?.firstChild; i; i = i.nextSibling)
    if (i.name == "JSXIdentifier" || i.name == "JSXBuiltin" || i.name == "JSXNamespacedName" || i.name == "JSXMemberExpression")
      return n.sliceString(i.from, Math.min(i.to, t));
  return "";
}
const rz = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), sz = /* @__PURE__ */ U.inputHandler.of((n, e, t, i, r) => {
  if ((rz ? n.composing : n.compositionStarted) || n.state.readOnly || e != t || i != ">" && i != "/" || !In.isActiveAt(n.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, a = o.changeByRange((l) => {
    var c;
    let { head: u } = l, h = Fe(o).resolveInner(u - 1, -1), f;
    if (h.name == "JSXStartTag" && (h = h.parent), !(o.doc.sliceString(u - 1, u) != i || h.name == "JSXAttributeValue" && h.to > u)) {
      if (i == ">" && h.name == "JSXFragmentTag")
        return { range: l, changes: { from: u, insert: "</>" } };
      if (i == "/" && h.name == "JSXStartCloseTag") {
        let d = h.parent, p = d.parent;
        if (p && d.from == u - 2 && ((f = Ng(o.doc, p.firstChild, u)) || ((c = p.firstChild) === null || c === void 0 ? void 0 : c.name) == "JSXFragmentTag")) {
          let m = `${f}>`;
          return { range: I.cursor(u + m.length, -1), changes: { from: u, insert: m } };
        }
      } else if (i == ">") {
        let d = iz(h);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(o.doc.sliceString(u, u + 2)) && (f = Ng(o.doc, d, u)))
          return { range: l, changes: { from: u, insert: `</${f}>` } };
      }
    }
    return { range: l };
  });
  return a.changes.empty ? !1 : (n.dispatch([
    s,
    o.update(a, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
}), as = ["_blank", "_self", "_top", "_parent"], Cc = ["ascii", "utf-8", "utf-16", "latin1", "latin1"], Tc = ["get", "post", "put", "delete"], Pc = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], Gt = ["true", "false"], se = {}, oz = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: as,
      hreflang: null
    }
  },
  abbr: se,
  address: se,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: se,
  aside: se,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: se,
  base: { attrs: { href: null, target: as } },
  bdi: se,
  bdo: se,
  blockquote: { attrs: { cite: null } },
  body: se,
  br: se,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Pc,
      formmethod: Tc,
      formnovalidate: ["novalidate"],
      formtarget: as,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: se,
  center: se,
  cite: se,
  code: se,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: se,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: se,
  div: se,
  dl: se,
  dt: se,
  em: se,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: se,
  figure: se,
  footer: se,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": Cc,
      autocomplete: ["on", "off"],
      enctype: Pc,
      method: Tc,
      novalidate: ["novalidate"],
      target: as
    }
  },
  h1: se,
  h2: se,
  h3: se,
  h4: se,
  h5: se,
  h6: se,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: se,
  hgroup: se,
  hr: se,
  html: {
    attrs: { manifest: null }
  },
  i: se,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Pc,
      formmethod: Tc,
      formnovalidate: ["novalidate"],
      formtarget: as,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: se,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: se,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: se,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: Cc,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: se,
  noscript: se,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: se,
  param: { attrs: { name: null, value: null } },
  pre: se,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: se,
  rt: se,
  ruby: se,
  samp: se,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: Cc
    }
  },
  section: se,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: se,
  source: { attrs: { src: null, type: null, media: null } },
  span: se,
  strong: se,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: se,
  summary: se,
  sup: se,
  table: se,
  tbody: se,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: se,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: se,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: se,
  time: { attrs: { datetime: null } },
  title: se,
  tr: se,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: se,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: se
}, Tk = {
  accesskey: null,
  class: null,
  contenteditable: Gt,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: Gt,
  autocorrect: Gt,
  autocapitalize: Gt,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": Gt,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": Gt,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": Gt,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": Gt,
  "aria-hidden": Gt,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": Gt,
  "aria-multiselectable": Gt,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": Gt,
  "aria-relevant": null,
  "aria-required": Gt,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
}, Pk = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n) => "on" + n);
for (let n of Pk)
  Tk[n] = null;
class Gs {
  constructor(e, t) {
    this.tags = Object.assign(Object.assign({}, oz), e), this.globalAttrs = Object.assign(Object.assign({}, Tk), t), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
Gs.default = /* @__PURE__ */ new Gs();
function _r(n, e, t = n.length) {
  if (!e)
    return "";
  let i = e.firstChild, r = i && i.getChild("TagName");
  return r ? n.sliceString(r.from, Math.min(r.to, t)) : "";
}
function Qr(n, e = !1) {
  for (; n; n = n.parent)
    if (n.name == "Element")
      if (e)
        e = !1;
      else
        return n;
  return null;
}
function Ak(n, e, t) {
  let i = t.tags[_r(n, Qr(e))];
  return i?.children || t.allTags;
}
function _f(n, e) {
  let t = [];
  for (let i = Qr(e); i && !i.type.isTop; i = Qr(i.parent)) {
    let r = _r(n, i);
    if (r && i.lastChild.name == "CloseTag")
      break;
    r && t.indexOf(r) < 0 && (e.name == "EndTag" || e.from >= i.firstChild.to) && t.push(r);
  }
  return t;
}
const $k = /^[:\-\.\w\u00b7-\uffff]*$/;
function Ig(n, e, t, i, r) {
  let s = /\s*>/.test(n.sliceDoc(r, r + 5)) ? "" : ">", o = Qr(t, !0);
  return {
    from: i,
    to: r,
    options: Ak(n.doc, o, e).map((a) => ({ label: a, type: "type" })).concat(_f(n.doc, t).map((a, l) => ({
      label: "/" + a,
      apply: "/" + a + s,
      type: "type",
      boost: 99 - l
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function Lg(n, e, t, i) {
  let r = /\s*>/.test(n.sliceDoc(i, i + 5)) ? "" : ">";
  return {
    from: t,
    to: i,
    options: _f(n.doc, e).map((s, o) => ({ label: s, apply: s + r, type: "type", boost: 99 - o })),
    validFor: $k
  };
}
function az(n, e, t, i) {
  let r = [], s = 0;
  for (let o of Ak(n.doc, t, e))
    r.push({ label: "<" + o, type: "type" });
  for (let o of _f(n.doc, t))
    r.push({ label: "</" + o + ">", type: "type", boost: 99 - s++ });
  return { from: i, to: i, options: r, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function lz(n, e, t, i, r) {
  let s = Qr(t), o = s ? e.tags[_r(n.doc, s)] : null, a = o && o.attrs ? Object.keys(o.attrs) : [], l = o && o.globalAttrs === !1 ? a : a.length ? a.concat(e.globalAttrNames) : e.globalAttrNames;
  return {
    from: i,
    to: r,
    options: l.map((c) => ({ label: c, type: "property" })),
    validFor: $k
  };
}
function cz(n, e, t, i, r) {
  var s;
  let o = (s = t.parent) === null || s === void 0 ? void 0 : s.getChild("AttributeName"), a = [], l;
  if (o) {
    let c = n.sliceDoc(o.from, o.to), u = e.globalAttrs[c];
    if (!u) {
      let h = Qr(t), f = h ? e.tags[_r(n.doc, h)] : null;
      u = f?.attrs && f.attrs[c];
    }
    if (u) {
      let h = n.sliceDoc(i, r).toLowerCase(), f = '"', d = '"';
      /^['"]/.test(h) ? (l = h[0] == '"' ? /^[^"]*$/ : /^[^']*$/, f = "", d = n.sliceDoc(r, r + 1) == h[0] ? "" : h[0], h = h.slice(1), i++) : l = /^[^\s<>='"]*$/;
      for (let p of u)
        a.push({ label: p, apply: f + p + d, type: "constant" });
    }
  }
  return { from: i, to: r, options: a, validFor: l };
}
function Rk(n, e) {
  let { state: t, pos: i } = e, r = Fe(t).resolveInner(i, -1), s = r.resolve(i);
  for (let o = i, a; s == r && (a = r.childBefore(o)); ) {
    let l = a.lastChild;
    if (!l || !l.type.isError || l.from < l.to)
      break;
    s = r = a, o = l.from;
  }
  return r.name == "TagName" ? r.parent && /CloseTag$/.test(r.parent.name) ? Lg(t, r, r.from, i) : Ig(t, n, r, r.from, i) : r.name == "StartTag" ? Ig(t, n, r, i, i) : r.name == "StartCloseTag" || r.name == "IncompleteCloseTag" ? Lg(t, r, i, i) : r.name == "OpenTag" || r.name == "SelfClosingTag" || r.name == "AttributeName" ? lz(t, n, r, r.name == "AttributeName" ? r.from : i, i) : r.name == "Is" || r.name == "AttributeValue" || r.name == "UnquotedAttributeValue" ? cz(t, n, r, r.name == "Is" ? i : r.from, i) : e.explicit && (s.name == "Element" || s.name == "Text" || s.name == "Document") ? az(t, n, r, i) : null;
}
function uz(n) {
  return Rk(Gs.default, n);
}
function hz(n) {
  let { extraTags: e, extraGlobalAttributes: t } = n, i = t || e ? new Gs(e, t) : Gs.default;
  return (r) => Rk(i, r);
}
const fz = /* @__PURE__ */ In.parser.configure({ top: "SingleExpression" }), Mk = [
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript" || n.lang == "ts",
    parser: vk.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/babel" || n.type == "text/jsx",
    parser: Ek.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript-jsx",
    parser: _k.parser
  },
  {
    tag: "script",
    attrs(n) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(n.type);
    },
    parser: fz
  },
  {
    tag: "script",
    attrs(n) {
      return !n.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(n.type);
    },
    parser: In.parser
  },
  {
    tag: "style",
    attrs(n) {
      return (!n.lang || n.lang == "css") && (!n.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(n.type));
    },
    parser: el.parser
  }
], Nk = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ el.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ Pk.map((n) => ({ name: n, parser: In.parser }))), Ik = /* @__PURE__ */ xr.define({
  name: "html",
  parser: /* @__PURE__ */ LD.configure({
    props: [
      /* @__PURE__ */ ro.add({
        Element(n) {
          let e = /^(\s*)(<\/)?/.exec(n.textAfter);
          return n.node.to <= n.pos + e[0].length ? n.continue() : n.lineIndent(n.node.from) + (e[2] ? 0 : n.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        },
        Document(n) {
          if (n.pos + /\s*/.exec(n.textAfter)[0].length < n.node.to)
            return n.continue();
          let e = null, t;
          for (let i = n.node; ; ) {
            let r = i.lastChild;
            if (!r || r.name != "Element" || r.to != i.to)
              break;
            e = i = r;
          }
          return e && !((t = e.lastChild) && (t.name == "CloseTag" || t.name == "SelfClosingTag")) ? n.lineIndent(e.from) + n.unit : null;
        }
      }),
      /* @__PURE__ */ Lr.add({
        Element(n) {
          let e = n.firstChild, t = n.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : n.to };
        }
      }),
      /* @__PURE__ */ C0.add({
        "OpenTag CloseTag": (n) => n.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
}), Oa = /* @__PURE__ */ Ik.configure({
  wrap: /* @__PURE__ */ fk(Mk, Nk)
});
function dz(n = {}) {
  let e = "", t;
  n.matchClosingTags === !1 && (e = "noMatch"), n.selfClosingTags === !0 && (e = (e ? e + " " : "") + "selfClosing"), (n.nestedLanguages && n.nestedLanguages.length || n.nestedAttributes && n.nestedAttributes.length) && (t = fk((n.nestedLanguages || []).concat(Mk), (n.nestedAttributes || []).concat(Nk)));
  let i = t ? Ik.configure({ wrap: t, dialect: e }) : e ? Oa.configure({ dialect: e }) : Oa;
  return new Ls(i, [
    Oa.data.of({ autocomplete: hz(n) }),
    n.autoCloseTags !== !1 ? pz : [],
    nz().support,
    yB().support
  ]);
}
const Dg = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")), pz = /* @__PURE__ */ U.inputHandler.of((n, e, t, i, r) => {
  if (n.composing || n.state.readOnly || e != t || i != ">" && i != "/" || !Oa.isActiveAt(n.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, a = o.changeByRange((l) => {
    var c, u, h;
    let f = o.doc.sliceString(l.from - 1, l.to) == i, { head: d } = l, p = Fe(o).resolveInner(d, -1), m;
    if (f && i == ">" && p.name == "EndTag") {
      let O = p.parent;
      if (((u = (c = O.parent) === null || c === void 0 ? void 0 : c.lastChild) === null || u === void 0 ? void 0 : u.name) != "CloseTag" && (m = _r(o.doc, O.parent, d)) && !Dg.has(m)) {
        let g = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), y = `</${m}>`;
        return { range: l, changes: { from: d, to: g, insert: y } };
      }
    } else if (f && i == "/" && p.name == "IncompleteCloseTag") {
      let O = p.parent;
      if (p.from == d - 2 && ((h = O.lastChild) === null || h === void 0 ? void 0 : h.name) != "CloseTag" && (m = _r(o.doc, O, d)) && !Dg.has(m)) {
        let g = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), y = `${m}>`;
        return {
          range: I.cursor(d + y.length, -1),
          changes: { from: d, to: g, insert: y }
        };
      }
    }
    return { range: l };
  });
  return a.changes.empty ? !1 : (n.dispatch([
    s,
    o.update(a, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), Lk = /* @__PURE__ */ Jh({ commentTokens: { block: { open: "<!--", close: "-->" } } }), Dk = /* @__PURE__ */ new pe(), Bk = /* @__PURE__ */ $2.configure({
  props: [
    /* @__PURE__ */ Lr.add((n) => !n.is("Block") || n.is("Document") || ah(n) != null || mz(n) ? void 0 : (e, t) => ({ from: t.doc.lineAt(e.from).to, to: e.to })),
    /* @__PURE__ */ Dk.add(ah),
    /* @__PURE__ */ ro.add({
      Document: () => null
    }),
    /* @__PURE__ */ Mi.add({
      Document: Lk
    })
  ]
});
function ah(n) {
  let e = /^(?:ATX|Setext)Heading(\d)$/.exec(n.name);
  return e ? +e[1] : void 0;
}
function mz(n) {
  return n.name == "OrderedList" || n.name == "BulletList";
}
function gz(n, e) {
  let t = n;
  for (; ; ) {
    let i = t.nextSibling, r;
    if (!i || (r = ah(i.type)) != null && r <= e)
      break;
    t = i;
  }
  return t.to;
}
const Oz = /* @__PURE__ */ p0.of((n, e, t) => {
  for (let i = Fe(n).resolveInner(t, -1); i && !(i.from < e); i = i.parent) {
    let r = i.type.prop(Dk);
    if (r == null)
      continue;
    let s = gz(i, r);
    if (s > t)
      return { from: t, to: s };
  }
  return null;
});
function Qf(n) {
  return new on(Lk, n, [Oz], "markdown");
}
const bz = /* @__PURE__ */ Qf(Bk), yz = /* @__PURE__ */ Bk.configure([q2, Y2, V2, F2, {
  props: [
    /* @__PURE__ */ Lr.add({
      Table: (n, e) => ({ from: e.doc.lineAt(n.from).to, to: n.to })
    })
  ]
}]), lh = /* @__PURE__ */ Qf(yz);
function xz(n, e) {
  return (t) => {
    if (t && n) {
      let i = null;
      if (t = /\S*/.exec(t)[0], typeof n == "function" ? i = n(t) : i = Ia.matchLanguageName(n, t, !0), i instanceof Ia)
        return i.support ? i.support.language.parser : Is.getSkippingParser(i.load());
      if (i)
        return i.parser;
    }
    return e ? e.parser : null;
  };
}
class Ac {
  constructor(e, t, i, r, s, o, a) {
    this.node = e, this.from = t, this.to = i, this.spaceBefore = r, this.spaceAfter = s, this.type = o, this.item = a;
  }
  blank(e, t = !0) {
    let i = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
    if (e != null) {
      for (; i.length < e; )
        i += " ";
      return i;
    } else {
      for (let r = this.to - this.from - i.length - this.spaceAfter.length; r > 0; r--)
        i += " ";
      return i + (t ? this.spaceAfter : "");
    }
  }
  marker(e, t) {
    let i = this.node.name == "OrderedList" ? String(+Zk(this.item, e)[2] + t) : "";
    return this.spaceBefore + i + this.type + this.spaceAfter;
  }
}
function zk(n, e) {
  let t = [], i = [];
  for (let r = n; r; r = r.parent) {
    if (r.name == "FencedCode")
      return i;
    (r.name == "ListItem" || r.name == "Blockquote") && t.push(r);
  }
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r], o, a = e.lineAt(s.from), l = s.from - a.from;
    if (s.name == "Blockquote" && (o = /^ *>( ?)/.exec(a.text.slice(l))))
      i.push(new Ac(s, l, l + o[0].length, "", o[1], ">", null));
    else if (s.name == "ListItem" && s.parent.name == "OrderedList" && (o = /^( *)\d+([.)])( *)/.exec(a.text.slice(l)))) {
      let c = o[3], u = o[0].length;
      c.length >= 4 && (c = c.slice(0, c.length - 4), u -= 4), i.push(new Ac(s.parent, l, l + u, o[1], c, o[2], s));
    } else if (s.name == "ListItem" && s.parent.name == "BulletList" && (o = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(a.text.slice(l)))) {
      let c = o[4], u = o[0].length;
      c.length > 4 && (c = c.slice(0, c.length - 4), u -= 4);
      let h = o[2];
      o[3] && (h += o[3].replace(/[xX]/, " ")), i.push(new Ac(s.parent, l, l + u, o[1], c, h, s));
    }
  }
  return i;
}
function Zk(n, e) {
  return /^(\s*)(\d+)(?=[.)])/.exec(e.sliceString(n.from, n.from + 10));
}
function $c(n, e, t, i = 0) {
  for (let r = -1, s = n; ; ) {
    if (s.name == "ListItem") {
      let a = Zk(s, e), l = +a[2];
      if (r >= 0) {
        if (l != r + 1)
          return;
        t.push({ from: s.from + a[1].length, to: s.from + a[0].length, insert: String(r + 2 + i) });
      }
      r = l;
    }
    let o = s.nextSibling;
    if (!o)
      break;
    s = o;
  }
}
function Cf(n, e) {
  let t = /^[ \t]*/.exec(n)[0].length;
  if (!t || e.facet(Ir) != "	")
    return n;
  let i = gn(n, 4, t), r = "";
  for (let s = i; s > 0; )
    s >= 4 ? (r += "	", s -= 4) : (r += " ", s--);
  return r + n.slice(t);
}
const kz = ({ state: n, dispatch: e }) => {
  let t = Fe(n), { doc: i } = n, r = null, s = n.changeByRange((o) => {
    if (!o.empty || !lh.isActiveAt(n, o.from, -1) && !lh.isActiveAt(n, o.from, 1))
      return r = { range: o };
    let a = o.from, l = i.lineAt(a), c = zk(t.resolveInner(a, -1), i);
    for (; c.length && c[c.length - 1].from > a - l.from; )
      c.pop();
    if (!c.length)
      return r = { range: o };
    let u = c[c.length - 1];
    if (u.to - u.spaceAfter.length > a - l.from)
      return r = { range: o };
    let h = a >= u.to - u.spaceAfter.length && !/\S/.test(l.text.slice(u.to));
    if (u.item && h) {
      let O = u.node.firstChild, g = u.node.getChild("ListItem", "ListItem");
      if (O.to >= a || g && g.to < a || l.from > 0 && !/[^\s>]/.test(i.lineAt(l.from - 1).text)) {
        let y = c.length > 1 ? c[c.length - 2] : null, S, _ = "";
        y && y.item ? (S = l.from + y.from, _ = y.marker(i, 1)) : S = l.from + (y ? y.to : 0);
        let v = [{ from: S, to: a, insert: _ }];
        return u.node.name == "OrderedList" && $c(u.item, i, v, -2), y && y.node.name == "OrderedList" && $c(y.item, i, v), { range: I.cursor(S + _.length), changes: v };
      } else {
        let y = zg(c, n, l);
        return {
          range: I.cursor(a + y.length + 1),
          changes: { from: l.from, insert: y + n.lineBreak }
        };
      }
    }
    if (u.node.name == "Blockquote" && h && l.from) {
      let O = i.lineAt(l.from - 1), g = />\s*$/.exec(O.text);
      if (g && g.index == u.from) {
        let y = n.changes([
          { from: O.from + g.index, to: O.to },
          { from: l.from + u.from, to: l.to }
        ]);
        return { range: o.map(y), changes: y };
      }
    }
    let f = [];
    u.node.name == "OrderedList" && $c(u.item, i, f);
    let d = u.item && u.item.from < l.from, p = "";
    if (!d || /^[\s\d.)\-+*>]*/.exec(l.text)[0].length >= u.to)
      for (let O = 0, g = c.length - 1; O <= g; O++)
        p += O == g && !d ? c[O].marker(i, 1) : c[O].blank(O < g ? gn(l.text, 4, c[O + 1].from) - p.length : null);
    let m = a;
    for (; m > l.from && /\s/.test(l.text.charAt(m - l.from - 1)); )
      m--;
    return p = Cf(p, n), Sz(u.node, n.doc) && (p = zg(c, n, l) + n.lineBreak + p), f.push({ from: m, to: a, insert: n.lineBreak + p }), { range: I.cursor(m + p.length + 1), changes: f };
  });
  return r ? !1 : (e(n.update(s, { scrollIntoView: !0, userEvent: "input" })), !0);
};
function Bg(n) {
  return n.name == "QuoteMark" || n.name == "ListMark";
}
function Sz(n, e) {
  if (n.name != "OrderedList" && n.name != "BulletList")
    return !1;
  let t = n.firstChild, i = n.getChild("ListItem", "ListItem");
  if (!i)
    return !1;
  let r = e.lineAt(t.to), s = e.lineAt(i.from), o = /^[\s>]*$/.test(r.text);
  return r.number + (o ? 0 : 1) < s.number;
}
function zg(n, e, t) {
  let i = "";
  for (let r = 0, s = n.length - 2; r <= s; r++)
    i += n[r].blank(r < s ? gn(t.text, 4, n[r + 1].from) - i.length : null, r < s);
  return Cf(i, e);
}
function wz(n, e) {
  let t = n.resolveInner(e, -1), i = e;
  Bg(t) && (i = t.from, t = t.parent);
  for (let r; r = t.childBefore(i); )
    if (Bg(r))
      i = r.from;
    else if (r.name == "OrderedList" || r.name == "BulletList")
      t = r.lastChild, i = t.to;
    else
      break;
  return t;
}
const vz = ({ state: n, dispatch: e }) => {
  let t = Fe(n), i = null, r = n.changeByRange((s) => {
    let o = s.from, { doc: a } = n;
    if (s.empty && lh.isActiveAt(n, s.from)) {
      let l = a.lineAt(o), c = zk(wz(t, o), a);
      if (c.length) {
        let u = c[c.length - 1], h = u.to - u.spaceAfter.length + (u.spaceAfter ? 1 : 0);
        if (o - l.from > h && !/\S/.test(l.text.slice(h, o - l.from)))
          return {
            range: I.cursor(l.from + h),
            changes: { from: l.from + h, to: o }
          };
        if (o - l.from == h && // Only apply this if we're on the line that has the
        // construct's syntax, or there's only indentation in the
        // target range
        (!u.item || l.from <= u.item.from || !/\S/.test(l.text.slice(0, u.to)))) {
          let f = l.from + u.from;
          if (u.item && u.node.from < u.item.from && /\S/.test(l.text.slice(u.from, u.to))) {
            let d = u.blank(gn(l.text, 4, u.to) - gn(l.text, 4, u.from));
            return f == l.from && (d = Cf(d, n)), {
              range: I.cursor(f + d.length),
              changes: { from: f, to: l.from + u.to, insert: d }
            };
          }
          if (f < o)
            return { range: I.cursor(f), changes: { from: f, to: o } };
        }
      }
    }
    return i = { range: s };
  });
  return i ? !1 : (e(n.update(r, { scrollIntoView: !0, userEvent: "delete" })), !0);
}, Ez = [
  { key: "Enter", run: kz },
  { key: "Backspace", run: vz }
], Xk = /* @__PURE__ */ dz({ matchClosingTags: !1 });
function _z(n = {}) {
  let { codeLanguages: e, defaultCodeLanguage: t, addKeymap: i = !0, base: { parser: r } = bz, completeHTMLTags: s = !0, htmlTagLanguage: o = Xk } = n;
  if (!(r instanceof gl))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let a = n.extensions ? [n.extensions] : [], l = [o.support], c;
  t instanceof Ls ? (l.push(t.support), c = t.language) : t && (c = t);
  let u = e || c ? xz(e, c) : void 0;
  a.push(M2({ codeParser: u, htmlParser: o.language.parser })), i && l.push(ri.high(Mr.of(Ez)));
  let h = Qf(r.configure(a));
  return s && l.push(h.data.of({ autocomplete: Qz })), new Ls(h, l);
}
function Qz(n) {
  let { state: e, pos: t } = n, i = /<[:\-\.\w\u00b7-\uffff]*$/.exec(e.sliceDoc(t - 25, t));
  if (!i)
    return null;
  let r = Fe(e).resolveInner(t, -1);
  for (; r && !r.type.isTop; ) {
    if (r.name == "CodeBlock" || r.name == "FencedCode" || r.name == "ProcessingInstructionBlock" || r.name == "CommentBlock" || r.name == "Link" || r.name == "Image")
      return null;
    r = r.parent;
  }
  return {
    from: t - i[0].length,
    to: t,
    options: Cz(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
let Rc = null;
function Cz() {
  if (Rc)
    return Rc;
  let n = uz(new hf(we.create({ extensions: Xk }), 0, !0));
  return Rc = n ? n.options : [];
}
function Tz({ className: n, ...e }) {
  return /* @__PURE__ */ ce.jsx(
    "div",
    {
      "data-slot": "card",
      className: Rr(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        n
      ),
      ...e
    }
  );
}
function Pz({ className: n, ...e }) {
  return /* @__PURE__ */ ce.jsx(
    "div",
    {
      "data-slot": "card-header",
      className: Rr(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        n
      ),
      ...e
    }
  );
}
function Az({ className: n, ...e }) {
  return /* @__PURE__ */ ce.jsx(
    "div",
    {
      "data-slot": "card-title",
      className: Rr("leading-none font-semibold", n),
      ...e
    }
  );
}
function $z({ className: n, ...e }) {
  return /* @__PURE__ */ ce.jsx(
    "div",
    {
      "data-slot": "card-content",
      className: Rr("px-6", n),
      ...e
    }
  );
}
const Xz = ({
  value: n = "",
  onChange: e,
  className: t = "",
  readOnly: i = !1,
  maxWidth: r = "100%"
  // 默认最大宽度为100%
}) => {
  const [s, o] = He(n), a = (l) => {
    o(l), e && e(l);
  };
  return /* @__PURE__ */ ce.jsxs(
    Tz,
    {
      className: `w-full h-full flex flex-col ${t}`,
      style: { maxWidth: r },
      children: [
        /* @__PURE__ */ ce.jsx(Pz, { className: "flex-shrink-0", children: /* @__PURE__ */ ce.jsx(Az, { children: "Markdown Flow Editor" }) }),
        /* @__PURE__ */ ce.jsx($z, { className: "flex-1 px-6", children: /* @__PURE__ */ ce.jsx(
          Ax,
          {
            value: s,
            height: "100%",
            extensions: [
              _z()
            ],
            onChange: a,
            editable: !i,
            basicSetup: {
              lineNumbers: !1,
              highlightActiveLine: !1,
              highlightSelectionMatches: !0,
              foldGutter: !1
            },
            style: {
              height: "100%",
              width: "100%",
              overflowWrap: "break-word"
              // 自动换行
            }
          }
        ) })
      ]
    }
  );
};
export {
  FP as MarkdownFlow,
  Xz as MarkdownFlowEditor,
  Nz as Playground
};
//# sourceMappingURL=index.es.js.map
